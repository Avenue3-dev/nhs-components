{"version":3,"file":"Row-8f6f5b67.js","sources":["../../src/components/navigation/header/HeaderContext.ts","../../src/assets/nhs-logo.tsx","../../src/components/navigation/header/Header.tsx","../../src/hooks/use-id-with-prefix.ts","../../src/components/core/form-group/FormGroup.tsx","../../src/components/form-elements/checkboxes/CheckboxesContext.ts","../../src/utils/random.ts","../../src/components/form-elements/checkboxes/Checkboxes.tsx","../../src/components/form-elements/date-input/DateInputContext.ts","../../src/components/form-elements/date-input/DateInput.tsx","../../src/components/form-elements/input/Input.tsx","../../src/components/form-elements/radios/RadiosContext.ts","../../src/components/form-elements/radios/Radios.tsx","../../src/components/form-elements/select/Select.tsx","../../src/components/form-elements/textarea/Textarea.tsx","../../src/components/core/grid/column/Column.tsx","../../src/components/core/main/Main.tsx","../../src/components/core/grid/row/Row.tsx"],"sourcesContent":["import { createContext, useContext } from 'react'\n\nexport type HeaderContextValue = {\n  orgName?: string\n  orgSplit?: string\n  orgDescriptor?: string\n  serviceName?: string\n  setHasSearch: (toggle: boolean) => void\n  setHasMenuToggle: (toggle: boolean) => void\n  setHasTransactionalLink: (toggle: boolean) => void\n  toggleMenu: () => void\n  toggleSearch: () => void\n  hasTransactionalLink: boolean\n  hasSearch: boolean\n  hasMenuToggle: boolean\n  menuOpen: boolean\n  searchOpen: boolean\n  transactional: boolean\n}\n\nconst HeaderContext = createContext<HeaderContextValue>({\n  setHasSearch: /* istanbul ignore next */ () => {},\n  setHasMenuToggle: /* istanbul ignore next */ () => {},\n  toggleMenu: /* istanbul ignore next */ () => {},\n  toggleSearch: /* istanbul ignore next */ () => {},\n  setHasTransactionalLink: /* istanbul ignore next */ () => {},\n  hasTransactionalLink: false,\n  hasSearch: false,\n  hasMenuToggle: false,\n  menuOpen: false,\n  searchOpen: false,\n  transactional: false,\n})\n\nexport default HeaderContext\n\nexport const useHeaderContext = () => useContext(HeaderContext)\n","import clsx from 'clsx'\nimport { SVGProps } from 'react'\n\nexport const NhsLogo: React.FC<SVGProps<SVGSVGElement>> = ({\n  className,\n  height = '40',\n  width = '100',\n  ...rest\n}): JSX.Element => {\n  return (\n    <svg\n      className={clsx('nhsuk-logo', className)}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 40 16\"\n      height={height}\n      width={width}\n      {...rest}\n    >\n      <path\n        className=\"nhsuk-logo__background\"\n        fill=\"#005eb8\"\n        d=\"M0 0h40v16H0z\"\n      ></path>\n      <path\n        className=\"nhsuk-logo__text\"\n        fill=\"#fff\"\n        d=\"M3.9 1.5h4.4l2.6 9h.1l1.8-9h3.3l-2.8 13H9l-2.7-9h-.1l-1.8 9H1.1M17.3 1.5h3.6l-1 4.9h4L25 1.5h3.5l-2.7 13h-3.5l1.1-5.6h-4.1l-1.2 5.6h-3.4M37.7 4.4c-.7-.3-1.6-.6-2.9-.6-1.4 0-2.5.2-2.5 1.3 0 1.8 5.1 1.2 5.1 5.1 0 3.6-3.3 4.5-6.4 4.5-1.3 0-2.9-.3-4-.7l.8-2.7c.7.4 2.1.7 3.2.7s2.8-.2 2.8-1.5c0-2.1-5.1-1.3-5.1-5 0-3.4 2.9-4.4 5.8-4.4 1.6 0 3.1.2 4 .6\"\n      ></path>\n    </svg>\n  )\n}\n","import { Container } from '@/index'\nimport clsx from 'clsx'\nimport React, {\n  ComponentProps,\n  HTMLProps,\n  MouseEventHandler,\n  PropsWithChildren,\n  useEffect,\n  useState,\n} from 'react'\nimport HeaderContext, {\n  HeaderContextValue,\n  useHeaderContext,\n} from './HeaderContext'\nimport { AsElementLink } from '@/types/link-like'\nimport { NhsLogo } from '@/assets/nhs-logo'\nimport { ChevronRightIcon, CloseIcon, SearchIcon } from '@/icons'\n\ntype Header = {\n  Logo: typeof Logo\n  TransactionalLink: typeof TransactionalServiceName\n  Container: typeof HeaderContainer\n  MenuToggle: typeof MenuToggle\n  Content: typeof HeaderContent\n  Nav: typeof HeaderNav\n  NavItem: typeof NavItem\n  Search: typeof Search\n} & React.FC<HeaderProps>\n\ntype HeaderProps = Partial<{\n  transactional: boolean\n  orgName: string\n  orgSplit: string\n  orgDescriptor: string\n  serviceName: string\n  white: boolean\n}> &\n  HTMLProps<HTMLDivElement> &\n  PropsWithChildren\n\ntype MenuToggleProps = {\n  type?: 'button' | 'submit' | 'reset'\n} & Omit<HTMLProps<HTMLButtonElement>, 'children'>\n\ntype LogoProps = Omit<AsElementLink<HTMLAnchorElement>, 'children'>\n\ntype HeaderNavProps = {\n  containerProps?: ComponentProps<typeof Container>\n} & HTMLProps<HTMLDivElement> &\n  PropsWithChildren\n\ntype NavItemProps = {\n  mobileOnly?: boolean\n} & AsElementLink<HTMLAnchorElement> &\n  PropsWithChildren\n\ntype HeaderContentProps = HTMLProps<HTMLDivElement> & PropsWithChildren\n\ntype ButtonToggleProps = {\n  'data-testid'?: string\n} & Omit<\n  HTMLProps<HTMLButtonElement>,\n  'children' | 'type' | 'onClick' | 'className'\n>\n\ntype SearchProps = {\n  visuallyHiddenText?: string\n  toggleProps?: ButtonToggleProps\n  submitProps?: ButtonToggleProps\n  closeProps?: ButtonToggleProps\n} & Omit<HTMLProps<HTMLInputElement>, 'children'>\n\nconst Logo: React.FC<LogoProps> = ({\n  className,\n  asElement: Component = 'a',\n  ...rest\n}): JSX.Element => {\n  const {\n    orgName,\n    orgDescriptor,\n    orgSplit,\n    serviceName,\n    hasMenuToggle,\n    hasSearch,\n    hasTransactionalLink,\n  } = useHeaderContext()\n\n  const label = orgName\n    ? `${orgName} ${orgSplit} ${orgDescriptor} homepage`\n    : 'NHS homepage'\n\n  return (\n    <div\n      className={clsx('nhsuk-header__logo', {\n        'nhsuk-header__logo--only':\n          !hasMenuToggle && !hasSearch && hasTransactionalLink,\n      })}\n    >\n      <Component\n        className={clsx(\n          'nhsuk-header__link',\n          {\n            'nhsuk-header__link--service': !orgName && serviceName,\n          },\n          className,\n        )}\n        aria-label={label}\n        {...rest}\n      >\n        <NhsLogo />\n        {orgName && (\n          <>\n            <span className=\"nhsuk-organisation-name\">\n              {orgName}\n              {orgSplit && (\n                <span className=\"nhsuk-organisation-name-split\">\n                  {orgSplit}\n                </span>\n              )}\n            </span>\n            {orgDescriptor && (\n              <span className=\"nhsuk-organisation-descriptor\">\n                {orgDescriptor}\n              </span>\n            )}\n          </>\n        )}\n\n        {!hasTransactionalLink && serviceName && (\n          <span className=\"nhsuk-header__service-name\">{serviceName}</span>\n        )}\n      </Component>\n    </div>\n  )\n}\n\nconst TransactionalServiceName: React.FC<\n  Omit<AsElementLink<HTMLAnchorElement>, 'children'>\n> = ({ className, asElement: Component = 'a', ...rest }): JSX.Element => {\n  const { serviceName, setHasTransactionalLink } = useHeaderContext()\n\n  useEffect(() => {\n    setHasTransactionalLink(true)\n\n    return () => setHasTransactionalLink(false)\n  }, [])\n\n  return (\n    <div className=\"nhsuk-header__transactional-service-name\">\n      <Component\n        className={clsx(\n          'nhsuk-header__transactional-service-name--link',\n          className,\n        )}\n        {...rest}\n      >\n        {serviceName}\n      </Component>\n    </div>\n  )\n}\n\nconst MenuToggle: React.FC<MenuToggleProps> = ({\n  className,\n  onClick,\n  ...rest\n}): JSX.Element => {\n  const { toggleMenu, setHasMenuToggle, menuOpen } = useHeaderContext()\n\n  const onToggleClick: MouseEventHandler<HTMLButtonElement> = (e) => {\n    toggleMenu()\n    onClick?.(e)\n  }\n\n  useEffect(() => {\n    setHasMenuToggle(true)\n    return () => setHasMenuToggle(false)\n  }, [])\n\n  return (\n    <div className=\"nhsuk-header__menu\">\n      <button\n        className={clsx('nhsuk-header__menu-toggle', className)}\n        aria-label=\"Open menu\"\n        aria-expanded={menuOpen ? 'true' : 'false'}\n        onClick={onToggleClick}\n        {...rest}\n      >\n        Menu\n      </button>\n    </div>\n  )\n}\n\nconst HeaderContainer: React.FC<ComponentProps<typeof Container>> = ({\n  children,\n  className,\n  ...rest\n}): JSX.Element => {\n  return (\n    <Container className={clsx('nhsuk-header__container', className)} {...rest}>\n      {children}\n    </Container>\n  )\n}\n\nconst HeaderContent: React.FC<HeaderContentProps> = ({\n  children,\n  className,\n  id = 'content-header',\n  ...rest\n}): JSX.Element => {\n  const { searchOpen } = useHeaderContext()\n  return (\n    <div\n      className={clsx(\n        'nhsuk-header__content',\n        { 'js-show': searchOpen },\n        className,\n      )}\n      id={id}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n\nconst HeaderNav: React.FC<HeaderNavProps> = ({\n  children,\n  className,\n  open,\n  role = 'navigation',\n  containerProps = {},\n  ...rest\n}): JSX.Element => {\n  const { menuOpen, toggleMenu } = useHeaderContext()\n\n  return (\n    <nav\n      className={clsx(\n        'nhsuk-header__navigation',\n        {\n          'js-show': open ?? menuOpen,\n        },\n        className,\n      )}\n      aria-label=\"Primary navigation\"\n      aria-labelledby=\"label-navigation\"\n      role={role}\n      {...rest}\n    >\n      <Container {...containerProps}>\n        <p className=\"nhsuk-header__navigation-title\">\n          <span id=\"label-navigation\">Menu</span>\n          <button\n            className=\"nhsuk-header__navigation-close\"\n            id=\"close-menu\"\n            onClick={toggleMenu}\n          >\n            <CloseIcon />\n            <span className=\"nhsuk-u-visually-hidden\">Close menu</span>\n          </button>\n        </p>\n        <ul className=\"nhsuk-header__navigation-list\">{children}</ul>\n      </Container>\n    </nav>\n  )\n}\n\nconst NavItem: React.FC<NavItemProps> = ({\n  children,\n  className,\n  mobileOnly,\n  asElement: Component = 'a',\n  ...rest\n}): JSX.Element => {\n  return (\n    <li\n      className={clsx(\n        'nhsuk-header__navigation-item',\n        { 'nhsuk-header__navigation-item--for-mobile': mobileOnly },\n        className,\n      )}\n    >\n      <Component className=\"nhsuk-header__navigation-link\" {...rest}>\n        {children}\n        <ChevronRightIcon />\n      </Component>\n    </li>\n  )\n}\n\nconst Search: React.FC<SearchProps> = ({\n  className,\n  action = '/search',\n  method = 'get',\n  id = 'search-field',\n  type = 'search',\n  autoComplete = 'off',\n  placeholder = 'Search',\n  role = 'search',\n  visuallyHiddenText = 'Search',\n  toggleProps = {},\n  submitProps = {},\n  closeProps = {},\n  ...rest\n}): JSX.Element => {\n  const { toggleSearch, setHasSearch, searchOpen } = useHeaderContext()\n\n  useEffect(() => {\n    setHasSearch(true)\n\n    return () => setHasSearch(false)\n  }, [])\n\n  return (\n    <div className={clsx('nhsuk-header__search', className)}>\n      <button\n        className={clsx('nhsuk-header__search-toggle', {\n          'is-active': searchOpen,\n        })}\n        onClick={toggleSearch}\n        {...toggleProps}\n      >\n        <span className=\"nhsuk-u-visually-hidden\">{visuallyHiddenText}</span>\n        <SearchIcon />\n      </button>\n      <div\n        className={clsx('nhsuk-header__search-wrap', {\n          'js-show': searchOpen,\n        })}\n      >\n        <form\n          className=\"nhsuk-header__search-form\"\n          action={action}\n          method={method}\n          role={role}\n        >\n          <label className=\"nhsuk-u-visually-hidden\" htmlFor={id}>\n            {visuallyHiddenText}\n          </label>\n          <input\n            className=\"nhsuk-search__input\"\n            id={id}\n            type={type}\n            placeholder={placeholder}\n            autoComplete={autoComplete}\n            {...rest}\n          />\n          <button\n            className=\"nhsuk-search__submit\"\n            type=\"submit\"\n            aria-label=\"Submit search\"\n            {...submitProps}\n          >\n            <SearchIcon />\n          </button>\n          <button\n            className=\"nhsuk-search__close\"\n            type=\"button\"\n            onClick={toggleSearch}\n            {...closeProps}\n          >\n            <CloseIcon />\n            <span className=\"nhsuk-u-visually-hidden\">Close search</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Use the header to show users they are on an NHS service and help them get started in finding what they need.\n *\n * For more information on when to use this component, go to the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/header).\n *\n * @link https://service-manual.nhs.uk/design-system/components/header\n *\n * @example\n * ```tsx\n * <Header orgName=\"Anytown Anyplace\" orgSplit=\"Anywhere\" orgDescriptor=\"NHS Foundation Trust\">\n *  <Header.Container>\n *   <Header.Logo href=\"/\" />\n *   <Header.Content>\n *    <Header.MenuToggle />\n *   </Header.Content>\n *  </Header.Container>\n *  <Header.Nav>\n *   <Header.NavItem mobileOnly href=\"/\">Home</Header.NavItem>\n *   <Header.NavItem href=\"/service-one\">Service one</Header.NavItem>\n *   <Header.NavItem href=\"/service-two\">Service two</Header.NavItem>\n *  </Header.Nav>\n * </Header>\n * ```\n */\nconst Header: Header = ({\n  children,\n  className,\n  role = 'banner',\n  transactional,\n  orgName,\n  orgSplit,\n  orgDescriptor,\n  serviceName,\n  white,\n  ...rest\n}): JSX.Element => {\n  const [hasMenuToggle, setHasMenuToggle] = useState<boolean>(false)\n  const [menuOpen, toggleMenu] = useState<boolean>(false)\n  const [searchOpen, toggleSearch] = useState<boolean>(false)\n  const [hasSearch, setHasSearch] = useState<boolean>(false)\n  const [hasTransactionalLink, setHasTransactionalLink] =\n    useState<boolean>(false)\n\n  const value: HeaderContextValue = {\n    orgName,\n    orgSplit,\n    orgDescriptor,\n    serviceName,\n    transactional: transactional ?? false,\n    hasSearch,\n    searchOpen,\n    menuOpen,\n    hasMenuToggle,\n    hasTransactionalLink,\n    setHasTransactionalLink,\n    setHasMenuToggle,\n    setHasSearch,\n    toggleMenu: () => toggleMenu(!menuOpen),\n    toggleSearch: () => toggleSearch(!searchOpen),\n  }\n\n  return (\n    <header\n      className={clsx(\n        'nhsuk-header',\n        {\n          'nhsuk-header--transactional': transactional,\n          'nhsuk-header--organisation': orgName,\n          'nhsuk-header--white': white,\n        },\n        className,\n      )}\n      role={role}\n      {...rest}\n    >\n      <HeaderContext.Provider value={value}>{children}</HeaderContext.Provider>\n    </header>\n  )\n}\n\nHeader.Container = HeaderContainer\nHeader.Logo = Logo\nHeader.TransactionalLink = TransactionalServiceName\nHeader.MenuToggle = MenuToggle\nHeader.Content = HeaderContent\nHeader.Nav = HeaderNav\nHeader.NavItem = NavItem\nHeader.Search = Search\n\nHeader.displayName = 'Header'\nHeaderContainer.displayName = 'Header.Container'\nLogo.displayName = 'Header.Logo'\nTransactionalServiceName.displayName = 'Header.TransactionalLink'\nMenuToggle.displayName = 'Header.MenuToggle'\nHeaderContent.displayName = 'Header.Content'\nHeaderNav.displayName = 'Header.Nav'\nNavItem.displayName = 'Header.NavItem'\nSearch.displayName = 'Header.Search'\n\nexport default Header\n","import { useId } from 'react'\n\n/**\n * Generate a unique string with a prefix.\n *\n * @param prefix {string} - The prefix to use\n * @returns A unique string with the provided prefix\n *\n * @example\n * ```tsx\n * const id = useIdWithPrefix('my-id')\n * ```\n */\nconst useIdWithPrefix = (prefix: string) => `${prefix}_${useId()}`\n\nexport default useIdWithPrefix\n","import { HTMLProps, ReactNode, useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport useIdWithPrefix from '@/hooks/use-id-with-prefix'\nimport Label from '@/components/core/label/Label'\nimport ErrorMessage from '@/components/form-elements/error-message/ErrorMessage'\nimport Hint from '@/components/form-elements/hint/Hint'\nimport { useFieldsetContext } from '@/index'\nimport { FormElementProps } from '@/types/form-element-types'\n\ntype ExcludedProps =\n  | 'hint'\n  | 'label'\n  | 'labelProps'\n  | 'hintProps'\n  | 'errorProps'\n  | 'inputType'\n  | 'disableErrorLine'\n\ntype BaseFormElementRenderProps = {\n  error?: string | boolean\n} & HTMLProps<\n  HTMLInputElement | HTMLDivElement | HTMLSelectElement | HTMLTextAreaElement\n>\n\ntype FormElementRenderProps<T> = Omit<T, ExcludedProps> & {\n  id: string\n  name: string\n}\n\ntype FormGroupProps<T> = FormElementProps & {\n  render: (props: FormElementRenderProps<T>) => ReactNode\n  inputType:\n    | 'input'\n    | 'radios'\n    | 'select'\n    | 'checkboxes'\n    | 'dateinput'\n    | 'textarea'\n}\n\nconst FormGroup = <T extends BaseFormElementRenderProps>(\n  props: FormGroupProps<T>,\n): JSX.Element => {\n  const {\n    render,\n    hint,\n    label,\n    id,\n    labelProps,\n    error,\n    hintProps,\n    errorProps,\n    formGroupProps,\n    inputType,\n    disableErrorLine,\n    name,\n    ...rest\n  } = props\n\n  const [generatedId] = useState(useIdWithPrefix(inputType))\n  const { isFieldset, dispatch: dispatchFieldsetAction } = useFieldsetContext()\n\n  const elementId = id || generatedId\n  const labelId = `${elementId}--label`\n  const hintId = `${elementId}--hint`\n  const errorId = `${elementId}--error-message`\n\n  const renderProps = {\n    'aria-describedby': hint ? hintId : undefined,\n    'aria-labelledby': label ? labelId : undefined,\n    error,\n    name: name || elementId,\n    id: elementId,\n    ...rest,\n  } as FormElementRenderProps<T>\n\n  useEffect(() => {\n    if (!isFieldset) {\n      return\n    }\n\n    dispatchFieldsetAction({\n      type: 'set_error',\n      data: { id: elementId, error: Boolean(error) },\n    })\n\n    return () =>\n      dispatchFieldsetAction({\n        type: 'set_error',\n        data: { id: elementId, error: false },\n      })\n  }, [elementId, error, isFieldset])\n\n  useEffect(() => {\n    dispatchFieldsetAction({\n      type: 'register_component',\n      data: { id: elementId, unregister: false },\n    })\n    return () =>\n      dispatchFieldsetAction({\n        type: 'register_component',\n        data: { id: elementId, unregister: true },\n      })\n  }, [])\n\n  const { className: formGroupClass, ...formGroupRest } = formGroupProps || {}\n\n  return (\n    <div\n      className={clsx(\n        'nhsuk-form-group',\n        {\n          'nhsuk-form-group--error': !disableErrorLine && error,\n        },\n        formGroupClass,\n      )}\n      {...formGroupRest}\n    >\n      {label && (\n        <Label id={labelId} htmlFor={elementId} {...labelProps}>\n          {label}\n        </Label>\n      )}\n\n      {hint && (\n        <Hint id={hintId} htmlFor={elementId} {...hintProps}>\n          {hint}\n        </Hint>\n      )}\n\n      {error && typeof error === 'string' && (\n        <ErrorMessage id={errorId} htmlFor={elementId} {...errorProps}>\n          {error}\n        </ErrorMessage>\n      )}\n\n      {render(renderProps)}\n    </div>\n  )\n}\n\nFormGroup.displayName = 'FormGroup'\n\nexport default FormGroup\n","import { ActionBase } from '@/utils/reducer'\nimport { createContext, useContext } from 'react'\n\nexport type CheckboxesState = {\n  conditional: string[]\n}\n\nexport type SetConditionalAction = ActionBase<\n  'set_conditional',\n  { refId: string; hasConditional: boolean }\n>\n\nexport type CheckboxesReducer = (\n  state: CheckboxesState,\n  action: SetConditionalAction,\n) => CheckboxesState\n\nexport const reducer: CheckboxesReducer = (state, { type, data }) => {\n  switch (type) {\n    case 'set_conditional':\n      return {\n        ...state,\n        conditional: data.hasConditional\n          ? state.conditional\n              .filter(/* istanbul ignore next */ (id) => id !== data.refId)\n              .concat(data.refId)\n          : state.conditional.filter((id) => id !== data.refId),\n      }\n  }\n}\n\nexport type CheckboxesContextValue = {\n  name: string\n  dispatch: React.Dispatch<SetConditionalAction>\n  getCheckboxId: (reference: string) => string\n  leaseReference: () => string\n  releaseReference: (reference: string) => void\n}\n\nconst CheckboxesContext = createContext<CheckboxesContextValue>({\n  name: '',\n  dispatch: /* istanbul ignore next */ () => {},\n  getCheckboxId: /* istanbul ignore next */ () => '',\n  leaseReference: /* istanbul ignore next */ () => '',\n  releaseReference: /* istanbul ignore next */ () => {},\n})\n\nCheckboxesContext.displayName = 'CheckboxesContext'\n\nexport const useCheckboxesContext = () =>\n  useContext<CheckboxesContextValue>(CheckboxesContext)\n\nexport default CheckboxesContext\n","export const generateRandomString = (length: number = 8): string => {\n  return [...Array<string>(length)]\n    .map(() => Math.random().toString(36)[2])\n    .join('')\n}\n","import FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLProps,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useReducer,\n  useState,\n} from 'react'\nimport CheckboxesContext, {\n  CheckboxesContextValue,\n  reducer,\n  useCheckboxesContext,\n} from './CheckboxesContext'\nimport { generateRandomString } from '@/utils/random'\nimport Hint from '@/components/form-elements/hint'\nimport Label from '@/components/core/label/Label'\n\ntype Checkboxes = {\n  Box: typeof BoxForwardRef\n} & React.FC<CheckboxContainerProps>\n\ntype CheckboxContainerProps = {\n  idPrefix?: string\n} & HTMLProps<HTMLDivElement> &\n  FormElementProps\n\ntype CheckboxProps = {\n  conditional?: ReactNode\n  forceShowConditional?: boolean\n  conditionalWrapperProps?: HTMLProps<HTMLDivElement>\n} & Omit<HTMLProps<HTMLInputElement>, 'label'> &\n  Omit<\n    FormElementProps,\n    'error' | 'errorProps' | 'formGroupProps' | 'disableErrorLine'\n  >\n\nconst Box: ForwardRefRenderFunction<HTMLInputElement, CheckboxProps> = (\n  {\n    children,\n    className,\n    id,\n    hint,\n    hintProps,\n    labelProps,\n    conditional,\n    forceShowConditional,\n    conditionalWrapperProps,\n    checked,\n    defaultChecked,\n    onChange,\n    type = 'checkbox',\n    ...rest\n  },\n  ref,\n): JSX.Element => {\n  const { name, getCheckboxId, leaseReference, releaseReference, dispatch } =\n    useCheckboxesContext()\n\n  const [checkboxReference] = useState(leaseReference())\n  const [showConditional, setShowConditional] = useState<boolean>(\n    !!(checked || defaultChecked),\n  )\n  const inputId = id || getCheckboxId(checkboxReference)\n\n  const { className: labelClassName, ...labelRest } = labelProps || {}\n  const { className: hintClassName, ...hintRest } = hintProps || {}\n  const { className: conditionalClassName, ...conditionalRest } =\n    conditionalWrapperProps || {}\n\n  useEffect(() => {\n    return () => releaseReference(checkboxReference)\n  }, [])\n\n  useEffect(() => {\n    if (checked !== undefined) {\n      setShowConditional(checked)\n    }\n  }, [checked])\n\n  useEffect(() => {\n    dispatch({\n      type: 'set_conditional',\n      data: { refId: checkboxReference, hasConditional: Boolean(conditional) },\n    })\n\n    return () =>\n      dispatch({\n        type: 'set_conditional',\n        data: { refId: checkboxReference, hasConditional: false },\n      })\n  }, [conditional])\n\n  return (\n    <>\n      <div className={clsx('nhsuk-checkboxes__item', className)}>\n        <input\n          className=\"nhsuk-checkboxes__input\"\n          id={inputId}\n          name={name}\n          type={type}\n          checked={checked}\n          defaultChecked={defaultChecked}\n          ref={ref}\n          onChange={(ev) => {\n            if (checked === undefined) {\n              setShowConditional(ev.target.checked)\n            }\n\n            onChange?.(ev)\n          }}\n          {...rest}\n        />\n        {children && (\n          <Label\n            className={clsx('nhsuk-checkboxes__label', labelClassName)}\n            id={`${inputId}--label`}\n            htmlFor={inputId}\n            {...labelRest}\n          >\n            {children}\n          </Label>\n        )}\n        {hint && (\n          <Hint\n            className={clsx('nhsuk-checkboxes__hint', hintClassName)}\n            {...hintRest}\n          >\n            {hint}\n          </Hint>\n        )}\n      </div>\n      {conditional && (showConditional || forceShowConditional) && (\n        <div\n          className={clsx(\n            'nhsuk-checkboxes__conditional',\n            conditionalClassName,\n          )}\n          {...conditionalRest}\n        >\n          {conditional}\n        </div>\n      )}\n    </>\n  )\n}\n\n/**\n * A checkbox component that can be used within a `Checkboxes` component.\n *\n * @example\n * ```tsx\n * <Checkboxes.Box value=\"GP Practice\">GP Practice</Checkboxes.Box>\n * ```\n */\nconst BoxForwardRef = forwardRef(Box)\n\n/**\n * Use checkboxes to let users select 1 or more options on a form.\n *\n * For more information on when to use this component, got to the [NHS Digital service manual](https://service-manual.nhs.uk/design-system/components/checkboxes).\n *\n * @example\n * ```tsx\n * <Checkboxes label=\"Which services?\" name=\"fruit\">\n *  <Checkboxes.Box value=\"GP Practice\">GP Practice</Checkboxes.Box>\n *  <Checkboxes.Box value=\"Dentist\">Dentist</Checkboxes.Box>\n * </Checkboxes>\n * ```\n */\nconst Checkboxes: Checkboxes = ({\n  children,\n  idPrefix,\n  ...rest\n}): JSX.Element => {\n  let checkboxIds: Record<string, string> = {}\n  let checkboxReferences: string[] = []\n  let checkboxCount = 0\n\n  const [state, dispatch] = useReducer(reducer, { conditional: [] })\n\n  const getCheckboxId = useCallback((id: string, reference: string) => {\n    if (reference in checkboxIds) {\n      return checkboxIds[reference]\n    }\n\n    checkboxCount += 1\n    checkboxIds[reference] = `${idPrefix || id}-${checkboxCount}`\n    return checkboxIds[reference]\n  }, [])\n\n  const leaseReference = (): string => {\n    const reference = generateRandomString()\n\n    if (checkboxReferences.includes(reference)) {\n      return leaseReference()\n    }\n\n    checkboxReferences.push(reference)\n    return reference\n  }\n\n  const releaseReference = (reference: string): void => {\n    checkboxReferences = checkboxReferences.filter((ref) => ref !== reference)\n  }\n\n  const resetCheckboxes = (): void => {\n    checkboxIds = {}\n    checkboxCount = 0\n  }\n\n  return (\n    <FormGroup<CheckboxContainerProps>\n      {...rest}\n      inputType=\"checkboxes\"\n      render={({ id, name, className, ...renderProps }) => {\n        resetCheckboxes()\n        const contextValues: CheckboxesContextValue = {\n          name,\n          getCheckboxId: (reference) => getCheckboxId(id, reference),\n          leaseReference,\n          releaseReference,\n          dispatch,\n        }\n\n        return (\n          <div\n            className={clsx(\n              'nhsuk-checkboxes',\n              {\n                'nhsuk-checkboxes--conditional': state.conditional.length > 0,\n              },\n              className,\n            )}\n            id={id}\n            {...renderProps}\n          >\n            <CheckboxesContext.Provider value={contextValues}>\n              {children}\n            </CheckboxesContext.Provider>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nBoxForwardRef.displayName = 'Checkboxes.Box'\nCheckboxes.displayName = 'Checkboxes'\n\nCheckboxes.Box = BoxForwardRef\n\nexport default Checkboxes\n","import { ChangeEvent, createContext, useContext } from 'react'\nimport { DateInputValue, DateInputPart } from './DateInput'\n\nexport type DateInputContextValue = {\n  id: string\n  name: string\n  error?: string | boolean\n  value?: Partial<DateInputValue>\n  defaultValue?: Partial<DateInputValue>\n  handleChange: (\n    field: DateInputPart,\n    event: ChangeEvent<HTMLInputElement>,\n  ) => void\n  registerInput: (field: DateInputPart, input: HTMLInputElement | null) => void\n}\n\nexport const DateInputContext = createContext<DateInputContextValue>({\n  id: '',\n  name: '',\n  handleChange: /* istanbul ignore next */ () => {},\n  registerInput: /* istanbul ignore next */ () => {},\n})\n\nDateInputContext.displayName = 'DateInputContext'\n\nexport const useDateInputContext = () => useContext(DateInputContext)\n","import FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport clsx from 'clsx'\nimport {\n  ChangeEvent,\n  ForwardRefRenderFunction,\n  HTMLProps,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport {\n  DateInputContext,\n  DateInputContextValue,\n  useDateInputContext,\n} from './DateInputContext'\nimport Label, { LabelProps } from '@/components/core/label/Label'\n\nexport type DateInputPart = 'day' | 'month' | 'year'\n\nexport type DateInputValue = {\n  day: string\n  month: string\n  year: string\n}\n\nexport type DateInputChangeEvent = ChangeEvent<HTMLInputElement> & {\n  target: HTMLInputElement & { value: DateInputValue }\n  currentTarget: HTMLInputElement & { value: DateInputValue }\n}\n\ntype DateInputProps = {\n  autoSelectNext?: boolean\n  value?: Partial<DateInputValue>\n  defaultValue?: Partial<DateInputValue>\n  onChange?: (event: DateInputChangeEvent) => void\n} & Omit<HTMLProps<HTMLDivElement>, 'value' | 'defaultValue' | 'ref'> &\n  FormElementProps\n\nconst dayPartLabels: Record<DateInputPart, string> = {\n  day: 'Day',\n  month: 'Month',\n  year: 'Year',\n}\n\ntype DatePartProps = {\n  labelProps?: LabelProps\n  part: DateInputPart\n  error?: boolean\n} & Omit<HTMLProps<HTMLDivElement>, 'type'>\n\ntype DateInput = {\n  Day: typeof Day\n  Month: typeof Month\n  Year: typeof Year\n} & React.FC<DateInputProps>\n\nconst DatePart: ForwardRefRenderFunction<\n  HTMLInputElement,\n  Omit<DatePartProps, 'ref'>\n> = (\n  {\n    id,\n    className,\n    name,\n    onChange,\n    labelProps = {},\n    label,\n    part,\n    error,\n    value,\n    defaultValue,\n    ...rest\n  },\n  ref,\n): JSX.Element => {\n  const {\n    id: ctxId,\n    name: ctxName,\n    value: ctxValue,\n    defaultValue: ctxDefaultValue,\n    registerInput,\n    handleChange: ctxHandleChange,\n  } = useDateInputContext()\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    event.persist()\n    onChange?.(event)\n    if (!event.isPropagationStopped()) {\n      ctxHandleChange(part, event)\n    }\n  }, [])\n\n  const passedRef = ref as ((element: HTMLInputElement | null) => void) | null\n\n  const registerRef = (element: HTMLInputElement | null) => {\n    registerInput(part, element)\n    passedRef?.(element)\n  }\n\n  const inputValue = value ?? ctxValue?.[part]\n  const inputDefaultValue = defaultValue ?? ctxDefaultValue?.[part]\n\n  const inputId = id || `${ctxId}-${part}`\n  const inputName = name || `${ctxName}-${part}`\n  const labelId = `${inputId}--label`\n\n  const {\n    className: labelClassName,\n    id: labelIdProp,\n    ...restLabelProps\n  } = labelProps\n  return (\n    <div className=\"nhsuk-date-input__item\">\n      <div className=\"nhsuk-form-group\">\n        <Label\n          className={clsx('nhsuk-date-input__label', labelClassName)}\n          id={labelId}\n          htmlFor={inputId}\n          {...restLabelProps}\n        >\n          {label || dayPartLabels[part]}\n        </Label>\n        <input\n          className={clsx(\n            'nhsuk-input nhsuk-date-input__input',\n            {\n              'nhsuk-input--width-2': part !== 'year',\n              'nhsuk-input--width-4': part === 'year',\n              'nhsuk-input--error': error || false,\n            },\n            className,\n          )}\n          id={inputId}\n          value={inputValue}\n          defaultValue={inputDefaultValue}\n          aria-labelledby={labelIdProp || labelIdProp}\n          name={inputName}\n          onChange={handleChange}\n          ref={registerRef}\n          {...rest}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst ForwardRefDatePart = forwardRef(DatePart)\n\nconst Day = forwardRef<HTMLInputElement, Omit<DatePartProps, 'ref' | 'part'>>(\n  (props, ref) => <ForwardRefDatePart {...props} part=\"day\" ref={ref} />,\n)\n\nconst Month = forwardRef<HTMLInputElement, Omit<DatePartProps, 'ref' | 'part'>>(\n  (props, ref) => <ForwardRefDatePart {...props} part=\"month\" ref={ref} />,\n)\n\nconst Year = forwardRef<HTMLInputElement, Omit<DatePartProps, 'ref' | 'part'>>(\n  (props, ref) => <ForwardRefDatePart {...props} part=\"year\" ref={ref} />,\n)\n\n/**\n * Use date input to help users enter a memorable date, like their date of birth.\n *\n * For more information on when to use this component, go to the [HTN Digital service manual](https://service-manual.nhs.uk/design-system/components/date-input).\n *\n * @link https://service-manual.nhs.uk/design-system/components/date-input\n *\n * @example\n * ```tsx\n * <DateInput label=\"Date of birth\" />\n * ```\n */\nconst DateInput: DateInput = ({\n  children,\n  value,\n  defaultValue,\n  autoSelectNext,\n  onChange,\n  ...rest\n}): JSX.Element => {\n  const [, setInternalValue] = useState<{\n    values: DateInputValue\n  }>({\n    values: {\n      day: value?.day ?? '',\n      month: value?.month ?? '',\n      year: value?.year ?? '',\n    },\n  })\n\n  useEffect(() => {\n    setInternalValue((old) => {\n      if (!value || old.values === value) {\n        return old\n      }\n\n      const { day, month, year } = value\n\n      return {\n        values: {\n          day: day && old.values.day !== day ? day : old.values.day,\n          month: month && old.values.month !== month ? month : old.values.month,\n          year: year && old.values.year !== year ? year : old.values.year,\n        },\n      }\n    })\n  }, [value])\n\n  const monthRef = useRef<HTMLInputElement | null>(null)\n  const yearRef = useRef<HTMLInputElement | null>(null)\n\n  const handleSelectNext = (part: DateInputPart, value: string) => {\n    if (!autoSelectNext) {\n      return\n    }\n\n    if (part === 'day' && value.length === 2) {\n      monthRef?.current?.focus()\n    } else if (part === 'month' && value.length === 2) {\n      yearRef?.current?.focus()\n    }\n  }\n\n  const registerInput = (\n    part: DateInputPart,\n    input: HTMLInputElement | null,\n  ) => {\n    switch (part) {\n      case 'month':\n        monthRef.current = input\n        break\n      case 'year':\n        yearRef.current = input\n        break\n    }\n  }\n\n  const handleChange = (\n    part: DateInputPart,\n    event: ChangeEvent<HTMLInputElement>,\n  ) => {\n    handleSelectNext(part, event.target.value)\n    event.stopPropagation()\n    setInternalValue((old) => {\n      const newValue = {\n        ...old.values,\n        [part]: event.target.value,\n      }\n\n      if (onChange) {\n        const newEvent = {\n          ...event,\n          target: { ...event.target, value: newValue },\n          currentTarget: { ...event.currentTarget, value: newValue },\n        } as DateInputChangeEvent\n\n        onChange(newEvent)\n      }\n\n      return {\n        values: newValue,\n      }\n    })\n  }\n\n  return (\n    <FormGroup<Omit<DateInputProps, 'value' | 'defaultValue'>>\n      {...rest}\n      inputType=\"dateinput\"\n      render={({ id, name, className, error, ...restProps }) => {\n        const value: DateInputContextValue = {\n          id,\n          name,\n          error,\n          defaultValue,\n          handleChange: handleChange,\n          registerInput: registerInput,\n        }\n\n        return (\n          <div\n            className={clsx('nhsuk-date-input', className)}\n            id={id}\n            {...restProps}\n          >\n            <DateInputContext.Provider value={value}>\n              {children || (\n                <>\n                  <DateInput.Day />\n                  <DateInput.Month />\n                  <DateInput.Year />\n                </>\n              )}\n            </DateInputContext.Provider>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nDateInput.displayName = 'DateInput'\nDay.displayName = 'DateInput.Day'\nMonth.displayName = 'DateInput.Month'\nYear.displayName = 'DateInput.Year'\n\nDateInput.Day = Day\nDateInput.Month = Month\nDateInput.Year = Year\n\nexport default DateInput\n","import FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport { InputWidth } from '@/types/nhsuk-sizes'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLInputTypeAttribute,\n  HTMLProps,\n  forwardRef,\n} from 'react'\n\ntype InputProps = {\n  width?: InputWidth\n  type?: HTMLInputTypeAttribute\n} & Omit<HTMLProps<HTMLInputElement>, 'type'> &\n  FormElementProps\n\n/**\n * Use text input to let users enter a single line of text.\n *\n * For more information on when to use this component, go to the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/text-input).\n *\n * @example\n * ```tsx\n * <Input id=\"example\" label=\"Example\" />\n * ```\n */\nconst Input: ForwardRefRenderFunction<HTMLInputElement, InputProps> = (\n  props,\n  ref,\n): JSX.Element => {\n  return (\n    <FormGroup<InputProps>\n      {...props}\n      inputType=\"input\"\n      render={({\n        id,\n        name,\n        className,\n        error,\n        width,\n        type = 'text',\n        ...rest\n      }) => (\n        <input\n          id={id}\n          name={name}\n          className={clsx(\n            'nhsuk-input',\n            {\n              [`nhsuk-input--width-${width}`]: width,\n              'nhsuk-input--error': error,\n            },\n            className,\n          )}\n          type={type}\n          ref={ref}\n          {...rest}\n        />\n      )}\n    />\n  )\n}\n\nconst InputForwardRef = forwardRef(Input)\n\nInputForwardRef.displayName = 'Input'\n\nexport default InputForwardRef\n","import { ActionBase } from '@/utils/reducer'\nimport { createContext, useContext } from 'react'\n\nexport type RadiosState = {\n  selected: string\n  conditional: string[]\n}\n\nexport type SetConditionalAction = ActionBase<\n  'set_conditional',\n  { refId: string; hasConditional: boolean }\n>\nexport type SetSelectedAction = ActionBase<'set_selected', { refId: string }>\nexport type RadiosReducer = (\n  state: RadiosState,\n  action: SetConditionalAction | SetSelectedAction,\n) => RadiosState\n\nexport const reducer: RadiosReducer = (state, { type, data }) => {\n  switch (type) {\n    case 'set_conditional':\n      return {\n        ...state,\n        conditional: data.hasConditional\n          ? state.conditional\n              .filter(/* istanbul ignore next */ (id) => id !== data.refId)\n              .concat(data.refId)\n          : state.conditional.concat(data.refId),\n      }\n    case 'set_selected':\n      return {\n        ...state,\n        selected: data.refId,\n      }\n  }\n}\n\nexport type RadiosContextValue = {\n  name: string\n  selectedRadio: string\n  dispatch: React.Dispatch<SetConditionalAction | SetSelectedAction>\n  getRadioId: (reference: string) => string\n  leaseReference: () => string\n  releaseReference: (reference: string) => void\n}\n\nconst RadiosContext = createContext<RadiosContextValue>({\n  name: '',\n  selectedRadio: '',\n  dispatch: /* istanbul ignore next */ () => {},\n  getRadioId: /* istanbul ignore next */ () => '',\n  leaseReference: /* istanbul ignore next */ () => '',\n  releaseReference: /* istanbul ignore next */ () => {},\n})\n\nRadiosContext.displayName = 'RadiosContext'\n\nexport const useRadiosContext = () =>\n  useContext<RadiosContextValue>(RadiosContext)\n\nexport default RadiosContext\n","import Label from '@/components/core/label/Label'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLProps,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useReducer,\n  useState,\n} from 'react'\nimport RadiosContext, {\n  RadiosContextValue,\n  reducer,\n  useRadiosContext,\n} from './RadiosContext'\nimport Hint from '@/components/form-elements/hint'\nimport FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport { generateRandomString } from '@/utils/random'\n\ntype Radios = {\n  Divider: typeof Divider\n  Radio: typeof RadioForwardRef\n} & React.FC<RadioContainerProps>\n\ntype RadioProps = {\n  conditional?: ReactNode\n  forceShowConditional?: boolean\n  conditionalWrapperProps?: HTMLProps<HTMLDivElement>\n} & HTMLProps<HTMLInputElement> &\n  Omit<\n    FormElementProps,\n    'error' | 'errorProps' | 'formGroupProps' | 'disableErrorLine'\n  >\n\ntype RadioContainerProps = {\n  inline?: boolean\n  idPrefix?: string\n} & HTMLProps<HTMLDivElement> &\n  FormElementProps\n\nconst Divider: React.FC<HTMLProps<HTMLDivElement>> = ({\n  children,\n  className,\n  ...rest\n}): JSX.Element => {\n  return (\n    <div className={clsx('nhsuk-radios__divider', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n\nconst Radio: ForwardRefRenderFunction<HTMLInputElement, RadioProps> = (\n  {\n    children,\n    className,\n    id,\n    hint,\n    hintProps,\n    labelProps,\n    conditional,\n    forceShowConditional,\n    conditionalWrapperProps,\n    checked,\n    defaultChecked,\n    onChange,\n    type = 'radio',\n    ...rest\n  },\n  ref,\n): JSX.Element => {\n  const {\n    name,\n    getRadioId,\n    leaseReference,\n    releaseReference,\n    selectedRadio,\n    dispatch,\n  } = useRadiosContext()\n  const [radioReference] = useState<string>(leaseReference())\n  const inputId = id || getRadioId(radioReference)\n  const shouldShowConditional =\n    selectedRadio === radioReference && checked !== false\n\n  const { className: labelClassName, ...labelRest } = labelProps || {}\n  const { className: hintClassName, ...hintRest } = hintProps || {}\n  const { className: conditionalClassName, ...conditionalRest } =\n    conditionalWrapperProps || {}\n\n  const setSelected = (reference: string): void => {\n    dispatch({ type: 'set_selected', data: { refId: reference } })\n  }\n\n  useEffect(() => {\n    if (defaultChecked) {\n      setSelected(radioReference)\n    }\n\n    return () => releaseReference(radioReference)\n  }, [])\n\n  useEffect(() => {\n    if (checked) {\n      setSelected(radioReference)\n    }\n  }, [checked])\n\n  useEffect(() => {\n    dispatch({\n      type: 'set_conditional',\n      data: { refId: radioReference, hasConditional: Boolean(conditional) },\n    })\n\n    return () =>\n      dispatch({\n        type: 'set_conditional',\n        data: { refId: radioReference, hasConditional: false },\n      })\n  }, [conditional])\n\n  return (\n    <>\n      <div className={clsx('nhsuk-radios__item', className)}>\n        <input\n          className=\"nhsuk-radios__input\"\n          id={inputId}\n          name={name}\n          type={type}\n          checked={checked}\n          defaultChecked={defaultChecked}\n          ref={ref}\n          onChange={(ev) => {\n            setSelected(radioReference)\n            onChange?.(ev)\n          }}\n          {...rest}\n        />\n        {children && (\n          <Label\n            className={clsx('nhsuk-radios__label', labelClassName)}\n            id={`${inputId}--label`}\n            htmlFor={inputId}\n            {...labelRest}\n          >\n            {children}\n          </Label>\n        )}\n        {hint && (\n          <Hint\n            className={clsx('nhsuk-radios__hint', hintClassName)}\n            id={`${inputId}--hint`}\n            {...hintRest}\n          >\n            {hint}\n          </Hint>\n        )}\n      </div>\n      {conditional && (shouldShowConditional || forceShowConditional) && (\n        <div\n          className={clsx('nhsuk-radios__conditional', conditionalClassName)}\n          id={`${inputId}--conditional`}\n          {...conditionalRest}\n        >\n          {conditional}\n        </div>\n      )}\n    </>\n  )\n}\n\n/**\n * Radio component that renders a single radio input.\n *\n * @param {RadioProps} props - The props to be passed to the radio input.\n * @param {React.ForwardedRef<HTMLInputElement>} ref - Optional ref to be passed to the radio input.\n *\n * @example\n * ```tsx\n * <Radios.Radio value=\"yes\" hint=\"some hint\">\n *  Yes\n * </Radios.Radio>\n * ```\n */\nconst RadioForwardRef = forwardRef(Radio)\n\n/**\n * Use radios when you want users to select only 1 option from a list.\n *\n * For more information on when to use this component, go to the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/radios).\n *\n * @example\n * ```tsx\n * <Radios label=\"Do you have any allergies?\">\n *  <Radios.Radio value=\"yes\" hint=\"some hint\">\n *   Yes\n *  </Radios.Radio>\n *  <Radios.Radio value=\"no\">No</Radios.Radio>\n * </Radios>\n * ```\n */\nconst Radios: Radios = ({ children, ...rest }): JSX.Element => {\n  let radioIds: Record<string, string> = {}\n  let radioReferences: string[] = []\n  let radioCount = 0\n\n  const [state, dispatch] = useReducer(reducer, {\n    selected: '',\n    conditional: [],\n  })\n\n  const getRadioId = useCallback((id: string, reference: string) => {\n    if (reference in radioIds) {\n      return radioIds[reference]\n    }\n\n    radioCount += 1\n    radioIds[reference] = `${rest.idPrefix || id}-${radioCount}`\n    return radioIds[reference]\n  }, [])\n\n  const leaseReference = (): string => {\n    const reference = generateRandomString()\n\n    if (radioReferences.includes(reference)) {\n      return leaseReference()\n    }\n\n    radioReferences.push(reference)\n    return reference\n  }\n\n  const releaseReference = (reference: string): void => {\n    radioReferences = radioReferences.filter((ref) => ref !== reference)\n  }\n\n  const resetRadios = (): void => {\n    radioIds = {}\n    radioCount = 0\n  }\n\n  return (\n    <FormGroup<RadioContainerProps>\n      {...rest}\n      inputType=\"radios\"\n      render={({ id, name, inline, className, ...renderRest }) => {\n        resetRadios()\n\n        const radiosContextValue: RadiosContextValue = {\n          name,\n          getRadioId: (reference) => getRadioId(id, reference),\n          selectedRadio: state.selected,\n          leaseReference,\n          releaseReference,\n          dispatch,\n        }\n\n        return (\n          <div\n            className={clsx(\n              'nhsuk-radios',\n              { 'nhsuk-radios--inline': inline },\n              className,\n            )}\n            id={id}\n            {...renderRest}\n          >\n            <RadiosContext.Provider value={radiosContextValue}>\n              {children}\n            </RadiosContext.Provider>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nDivider.displayName = 'Radios.Divider'\nRadioForwardRef.displayName = 'Radios.Radio'\nRadios.displayName = 'Radios'\n\nRadios.Divider = Divider\nRadios.Radio = RadioForwardRef\n\nexport default Radios\n","import FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport {\n  ForwardRefExoticComponent,\n  ForwardRefRenderFunction,\n  HTMLProps,\n  RefAttributes,\n  forwardRef,\n} from 'react'\nimport clsx from 'clsx'\n\ntype Select = {\n  Option: React.FC<OptionProps>\n} & ForwardRefExoticComponent<Omit<SelectProps, 'ref'>> &\n  RefAttributes<HTMLSelectElement>\n\ntype SelectProps = HTMLProps<HTMLSelectElement> & FormElementProps\ntype OptionProps = HTMLProps<HTMLOptionElement>\n\n/**\n * To be used as a child of the Select component.\n */\nconst Option: React.FC<OptionProps> = ({ children, ...rest }): JSX.Element => {\n  return <option {...rest}>{children}</option>\n}\n\nconst Select: ForwardRefRenderFunction<HTMLSelectElement, SelectProps> = (\n  { children, ...rest },\n  ref,\n): JSX.Element => {\n  return (\n    <FormGroup<SelectProps>\n      {...rest}\n      inputType=\"select\"\n      render={({ id, name, className, error, ...renderRest }) => (\n        <select\n          id={id}\n          name={name}\n          className={clsx(\n            'nhsuk-select',\n            { 'nhsuk-select--error': error },\n            className,\n          )}\n          ref={ref}\n          {...renderRest}\n        >\n          {children}\n        </select>\n      )}\n    />\n  )\n}\n\n/**\n * Use select to let users choose an option from a long list but only use it as a last resort.\n *\n * For more information on when to use this component, go to the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/select).\n *\n * @link https://service-manual.nhs.uk/design-system/components/select\n *\n * @example\n * ```tsx\n * <Select label=\"Choose a country\">\n *  <Select.Option value=\"england\">England</Select.Option>\n *  <Select.Option value=\"northern-ireland\">Northern Ireland</Select.Option>\n *  <Select.Option value=\"scotland\">Scotland</Select.Option>\n *  <Select.Option value=\"wales\">Wales</Select.Option>\n *  <Select.Option value=\"channel-islands\">Channel Islands</Select.Option>\n *  <Select.Option value=\"isle-of-man\">Isle of Man</Select.Option>\n * </Select>\n * ```\n */\nconst SelectForwardRef = forwardRef(Select) as Select\n\nSelectForwardRef.displayName = 'Select'\nOption.displayName = 'Select.Option'\n\nSelectForwardRef.Option = Option\n\nexport default SelectForwardRef\n","import FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport clsx from 'clsx'\nimport { ForwardRefRenderFunction, HTMLProps, forwardRef } from 'react'\n\ntype TextareaProps = Omit<HTMLProps<HTMLTextAreaElement>, 'width'> &\n  FormElementProps\n\nconst Textarea: ForwardRefRenderFunction<HTMLTextAreaElement, TextareaProps> = (\n  props,\n  ref,\n): JSX.Element => {\n  return (\n    <FormGroup<TextareaProps>\n      {...props}\n      inputType=\"textarea\"\n      render={({ id, name, error, className, rows, ...rest }) => (\n        <textarea\n          id={id}\n          name={name}\n          className={clsx(\n            'nhsuk-textarea',\n            {\n              'nhsuk-textarea--error': error,\n            },\n            className,\n          )}\n          ref={ref}\n          rows={rows}\n          {...rest}\n        />\n      )}\n    />\n  )\n}\n\n/**\n * Use textarea to let users enter more than 1 line of text.\n *\n * For more information on when to use this component, go to the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/textarea).\n *\n * @param {TextareaProps} props - The props of the component.\n * @param {React.ForwardedRef<HTMLTextAreaElement>} ref - Optional ref to be passed to the textarea.\n *\n * @example\n * ```tsx\n * <Textarea id=\"example\" label=\"Example\" />\n * ```\n */\nconst TextareaForwardRef = forwardRef(Textarea)\n\nTextareaForwardRef.displayName = 'Textarea'\n\nexport default TextareaForwardRef\n","import clxs from 'clsx'\nimport { HTMLProps } from 'react'\n\nexport type ColumnWidth =\n  | 'full'\n  | 'one-half'\n  | 'one-third'\n  | 'two-thirds'\n  | 'one-quarter'\n  | 'three-quarters'\n\ntype ColumnProps = {\n  width?: ColumnWidth\n} & HTMLProps<HTMLDivElement>\n\nconst Column: React.FC<ColumnProps> = ({\n  children,\n  className,\n  width = 'full',\n  ...rest\n}) => {\n  return (\n    <div className={clxs(`nhsuk-grid-column-${width}`, className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n\nColumn.displayName = 'Column'\n\nexport default Column\n","import clsx from 'clsx'\n\ntype MainProps = {\n  size?: 's' | 'l'\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst Main: React.FC<MainProps> = ({\n  children,\n  className,\n  size,\n  role = 'main',\n  ...rest\n}) => {\n  return (\n    <main\n      className={clsx(\n        'nhsuk-main-wrapper',\n        { [`nhsuk-main-wrapper--${size}`]: size },\n        className,\n      )}\n      role={role}\n      {...rest}\n    >\n      {children}\n    </main>\n  )\n}\n\nMain.displayName = 'Main'\n\nexport default Main\n","import clsx from 'clsx'\nimport { HTMLProps } from 'react'\n\ntype RowProps = HTMLProps<HTMLDivElement>\n\nconst Row: React.FC<RowProps> = ({ children, className, ...rest }) => {\n  return (\n    <div className={clsx('nhsuk-grid-row', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n\nRow.displayName = 'Row'\n\nexport default Row\n"],"names":["HeaderContext","createContext","useHeaderContext","useContext","NhsLogo","className","height","width","rest","jsxs","clsx","jsx","Logo","Component","orgName","orgDescriptor","orgSplit","serviceName","hasMenuToggle","hasSearch","hasTransactionalLink","label","Fragment","TransactionalServiceName","setHasTransactionalLink","useEffect","MenuToggle","onClick","toggleMenu","setHasMenuToggle","menuOpen","onToggleClick","e","HeaderContainer","children","Container","HeaderContent","id","searchOpen","HeaderNav","open","role","containerProps","CloseIcon","NavItem","mobileOnly","ChevronRightIcon","Search","action","method","type","autoComplete","placeholder","visuallyHiddenText","toggleProps","submitProps","closeProps","toggleSearch","setHasSearch","SearchIcon","Header","transactional","white","useState","value","useIdWithPrefix","prefix","useId","FormGroup","props","render","hint","labelProps","error","hintProps","errorProps","formGroupProps","inputType","disableErrorLine","name","generatedId","isFieldset","dispatchFieldsetAction","useFieldsetContext","elementId","labelId","hintId","errorId","renderProps","formGroupClass","formGroupRest","Label","Hint","ErrorMessage","reducer","state","data","CheckboxesContext","useCheckboxesContext","generateRandomString","length","Box","conditional","forceShowConditional","conditionalWrapperProps","checked","defaultChecked","onChange","ref","getCheckboxId","leaseReference","releaseReference","dispatch","checkboxReference","showConditional","setShowConditional","inputId","labelClassName","labelRest","hintClassName","hintRest","conditionalClassName","conditionalRest","ev","BoxForwardRef","forwardRef","Checkboxes","idPrefix","checkboxIds","checkboxReferences","checkboxCount","useReducer","useCallback","reference","resetCheckboxes","contextValues","DateInputContext","useDateInputContext","dayPartLabels","DatePart","part","defaultValue","ctxId","ctxName","ctxValue","ctxDefaultValue","registerInput","ctxHandleChange","handleChange","event","passedRef","registerRef","element","inputValue","inputDefaultValue","inputName","labelIdProp","restLabelProps","ForwardRefDatePart","Day","Month","Year","DateInput","autoSelectNext","setInternalValue","old","day","month","year","monthRef","useRef","yearRef","handleSelectNext","value2","_a","_b","input","newValue","newEvent","restProps","Input","InputForwardRef","RadiosContext","useRadiosContext","Divider","Radio","getRadioId","selectedRadio","radioReference","shouldShowConditional","setSelected","RadioForwardRef","Radios","radioIds","radioReferences","radioCount","resetRadios","inline","renderRest","radiosContextValue","Option","Select","SelectForwardRef","Textarea","rows","TextareaForwardRef","Column","clxs","Main","size","Row"],"mappings":"u/BAoBA,MAAMA,GAAgBC,EAAAA,cAAkC,CACtD,aAAyC,IAAM,CAAC,EAChD,iBAA6C,IAAM,CAAC,EACpD,WAAuC,IAAM,CAAC,EAC9C,aAAyC,IAAM,CAAC,EAChD,wBAAoD,IAAM,CAAC,EAC3D,qBAAsB,GACtB,UAAW,GACX,cAAe,GACf,SAAU,GACV,WAAY,GACZ,cAAe,EACjB,CAAC,EAIYC,EAAmB,IAAMC,EAAA,WAAWH,EAAa,ECjCvDI,EAAA,CAAA,CAAoD,UAAAC,EACzD,OAAAC,EAAA,KACS,MAAAC,EAAA,MACD,GAAAC,CAEV,IACEC,EAAA,KACE,MAAC,CAAA,UAAAC,EAAA,aAAAL,CAAA,EACwC,MAAA,6BACjC,QAAA,YACE,OAAAC,EACR,MAAAC,EACA,GAAAC,EACI,SAAA,CAEJG,EAAA,IAAA,OAAC,CAAA,UAAA,yBACW,KAAA,UACL,EAAA,eACH,CAAA,EACHA,EAAA,IACD,OAAC,CAAA,UAAA,mBACW,KAAA,OACL,EAAA,4VACH,CAAA,CACH,CAAA,CAAA,oGC6CP,MAAAC,GAAA,CAAA,CAAmC,UAAAP,EACjC,UAAAQ,EAAA,IACuB,GAAAL,CAEzB,IAAA,CACE,KAAA,CAAM,QAAAM,EACJ,cAAAC,EACA,SAAAC,EACA,YAAAC,EACA,cAAAC,EACA,UAAAC,EACA,qBAAAC,CACA,EAAAlB,EAAA,EAGFmB,EAAAP,EAAA,GAAAA,CAAA,IAAAE,CAAA,IAAAD,CAAA,YAAA,eAIA,OAAAJ,EAAA,IACE,MAAC,CAAA,UAAAD,EAAA,qBAAA,CACuC,2BAAA,CAAAQ,GAAA,CAAAC,GAAAC,CAEF,CAAA,EACnC,SAAAX,EAAA,KAEDI,EAAC,CAAA,UAAAH,EACY,qBACT,CACA,8BAAA,CAAAI,GAAAG,CAC6C,EAC7CZ,CACA,EACF,aAAAgB,EACY,GAAAb,EACR,SAAA,CAEJG,EAAA,IAAAP,EAAA,EAAA,EAASU,GAAAL,EAAA,KAAAa,WAAA,CAAA,SAAA,CAGLb,EAAAA,KAAA,OAAA,CAAA,UAAA,0BAAA,SAAA,CACGK,EAAAE,GAAAL,EAAA,IAAA,OAAA,CAAA,UAAA,gCAAA,SAAAK,EAAA,CAIC,EAAA,EAEJD,GAAAJ,EAAA,IAAA,OAAA,CAAA,UAAA,gCAAA,SAAAI,EAAA,CAIE,EAAA,EAEJ,CAAAK,GAAAH,GAAAN,EAAAA,IAAA,OAAA,CAAA,UAAA,6BAAA,SAAAM,EAAA,CAI0D,CAAA,CAAA,CAE9D,CAAA,CAGN,EAEAM,GAAA,CAAA,CAAA,UAAAlB,EAAA,UAAAQ,EAAA,IAAA,GAAAL,KAAA,CAGE,KAAA,CAAA,YAAAS,EAAA,wBAAAO,CAAA,EAAAtB,EAAA,EAEAuB,OAAAA,EAAAA,UAAA,KACED,EAAA,EAAA,EAEA,IAAAA,EAAA,EAAA,GAA0C,CAAA,CAAA,EAG5Cb,EAAAA,IAAA,MAAA,CAAA,UAAA,2CAAA,SAAAA,EAAA,IAEIE,EAAC,CAAA,UAAAH,EACY,iDACTL,CACA,EACF,GAAAG,EACI,SAAAS,CAEH,CAAA,CAAA,CAAA,CAIT,EAEAS,GAAA,CAAA,CAA+C,UAAArB,EAC7C,QAAAsB,EACA,GAAAnB,CAEF,IAAA,CACE,KAAA,CAAA,WAAAoB,EAAA,iBAAAC,EAAA,SAAAC,CAAA,EAAA5B,EAAA,EAEA6B,EAAAC,GAAA,CACEJ,IACAD,GAAA,MAAAA,EAAAK,EAAW,EAGbP,OAAAA,EAAAA,UAAA,KACEI,EAAA,EAAA,EACA,IAAAA,EAAA,EAAA,GAAmC,CAAA,CAAA,EAGrClB,EAAAA,IAAA,MAAA,CAAA,UAAA,qBAAA,SAAAA,EAAA,IAEI,SAAC,CAAA,UAAAD,EAAA,4BAAAL,CAAA,EACuD,aAAA,YAC3C,gBAAAyB,EAAA,OAAA,QACwB,QAAAC,EAC1B,GAAAvB,EACL,SAAA,MACL,CAAA,CAAA,CAAA,CAKP,EAEAyB,GAAA,CAAA,CAAqE,SAAAC,EACnE,UAAA7B,EACA,GAAAG,CAEF,IACEG,MAAAwB,GAAA,CAAA,UAAAzB,EAAA,0BAAAL,CAAA,EAAA,GAAAG,EAAA,SAAA0B,CAAA,CAAA,EAOFE,GAAA,CAAA,CAAqD,SAAAF,EACnD,UAAA7B,EACA,GAAAgC,EAAA,iBACK,GAAA7B,CAEP,IAAA,CACE,KAAA,CAAA,WAAA8B,GAAApC,IACA,OAAAS,EAAA,IACE,MAAC,CAAA,UAAAD,EACY,wBACT,CAAA,UAAA4B,CAAA,EACwBjC,CACxB,EACF,GAAAgC,EACA,GAAA7B,EACI,SAAA0B,CAEH,CAAA,CAGP,EAEAK,GAAA,CAAA,CAA6C,SAAAL,EAC3C,UAAA7B,EACA,KAAAmC,EACA,KAAAC,EAAA,aACO,eAAAC,EAAA,CAAA,EACW,GAAAlC,CAEpB,IAAA,CACE,KAAA,CAAA,SAAAsB,EAAA,WAAAF,CAAA,EAAA1B,EAAA,EAEA,OAAAS,EAAA,IACE,MAAC,CAAA,UAAAD,EACY,2BACT,CACA,UAAA8B,GAAAV,CACqB,EACrBzB,CACA,EACF,aAAA,qBACW,kBAAA,mBACK,KAAAoC,EAChB,GAAAjC,EACI,SAAAC,EAAAA,KAAA0B,GAAA,CAAA,GAAAO,EAAA,SAAA,CAGFjC,EAAAA,KAAA,IAAA,CAAA,UAAA,iCAAA,SAAA,CACEE,EAAA,IAAA,OAAA,CAAA,GAAA,mBAAA,SAAA,OAAA,EAAgCF,EAAA,KAChC,SAAC,CAAA,UAAA,iCACW,GAAA,aACP,QAAAmB,EACM,SAAA,CAETjB,EAAA,IAAAgC,GAAA,EAAA,EAAWhC,EAAA,IAAA,OAAA,CAAA,UAAA,0BAAA,SAAA,aAAA,CACyC,CAAA,CAAA,CACtD,EAAA,EACFA,EAAAA,IAAA,KAAA,CAAA,UAAA,gCAAA,SAAAuB,CAAA,CAAA,CACwD,EAAA,CAC1D,CAAA,CAGN,EAEAU,GAAA,CAAA,CAAyC,SAAAV,EACvC,UAAA7B,EACA,WAAAwC,EACA,UAAAhC,EAAA,IACuB,GAAAL,CAEzB,IACEG,EAAA,IACE,KAAC,CAAA,UAAAD,EACY,gCACT,CAAA,4CAAAmC,CAAA,EAC0DxC,CAC1D,EACF,SAAAI,EAAA,KAAAI,EAAA,CAAA,UAAA,gCAAA,GAAAL,EAAA,SAAA,CAGG0B,EAAAvB,EAAA,IAAAmC,GAAA,EAAA,CACiB,EAAA,CACpB,CAAA,EAKNC,GAAA,CAAA,CAAuC,UAAA1C,EACrC,OAAA2C,EAAA,UACS,OAAAC,EAAA,MACA,GAAAZ,EAAA,eACJ,KAAAa,EAAA,SACE,aAAAC,EAAA,MACQ,YAAAC,EAAA,SACD,KAAAX,EAAA,SACP,mBAAAY,EAAA,SACc,YAAAC,EAAA,CAAA,EACN,YAAAC,EAAA,CAAA,EACA,WAAAC,EAAA,CAAA,EACD,GAAAhD,CAEhB,IAAA,CACE,KAAA,CAAA,aAAAiD,EAAA,aAAAC,EAAA,WAAApB,CAAA,EAAApC,EAAA,EAEAuB,OAAAA,EAAAA,UAAA,KACEiC,EAAA,EAAA,EAEA,IAAAA,EAAA,EAAA,GAA+B,CAAA,CAAA,EAGjCjD,EAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,uBAAAL,CAAA,EAAA,SAAA,CAEII,EAAA,KAAA,SAAC,CAAA,UAAAC,EAAA,8BAAA,CACgD,YAAA4B,CAChC,CAAA,EACd,QAAAmB,EACQ,GAAAH,EACL,SAAA,CAEJ3C,EAAA,IAAA,OAAA,CAAA,UAAA,0BAAA,SAAA0C,EAAA,EAA8D1C,EAAA,IAAAgD,GAAA,EAAA,CAClD,CAAA,CAAA,EACdhD,EAAA,IACA,MAAC,CAAA,UAAAD,EAAA,4BAAA,CAC8C,UAAA4B,CAChC,CAAA,EACZ,SAAA7B,EAAA,KAED,OAAC,CAAA,UAAA,4BACW,OAAAuC,EACV,OAAAC,EACA,KAAAR,EACA,SAAA,CAEA9B,MAAA,QAAA,CAAA,UAAA,0BAAA,QAAA0B,EAAA,SAAAgB,EAAA,EAEA1C,EAAA,IACA,QAAC,CAAA,UAAA,sBACW,GAAA0B,EACV,KAAAa,EACA,YAAAE,EACA,aAAAD,EACA,GAAA3C,CACI,CAAA,EACNG,EAAA,IACA,SAAC,CAAA,UAAA,uBACW,KAAA,SACL,aAAA,gBACM,GAAA4C,EACP,SAAA5C,EAAAA,IAAAgD,GAAA,EAAA,CAEQ,CAAA,EACdlD,EAAA,KACA,SAAC,CAAA,UAAA,sBACW,KAAA,SACL,QAAAgD,EACI,GAAAD,EACL,SAAA,CAEJ7C,EAAA,IAAAgC,GAAA,EAAA,EAAWhC,EAAA,IAAA,OAAA,CAAA,UAAA,0BAAA,SAAA,eAAA,CAC2C,CAAA,CAAA,CACxD,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAAA,CAGN,EA0BAiD,EAAA,CAAA,CAAwB,SAAA1B,EACtB,UAAA7B,EACA,KAAAoC,EAAA,SACO,cAAAoB,EACP,QAAA/C,EACA,SAAAE,EACA,cAAAD,EACA,YAAAE,EACA,MAAA6C,EACA,GAAAtD,CAEF,IAAA,CACE,KAAA,CAAAU,EAAAW,CAAA,EAAAkC,EAAA,SAAA,EAAA,EACA,CAAAjC,EAAAF,CAAA,EAAAmC,EAAA,SAAA,EAAA,EACA,CAAAzB,EAAAmB,CAAA,EAAAM,EAAA,SAAA,EAAA,EACA,CAAA5C,EAAAuC,CAAA,EAAAK,EAAA,SAAA,EAAA,EACA,CAAA3C,EAAAI,CAAA,EAAAuC,EAAA,SAAA,EAAA,EAGAC,EAAA,CAAkC,QAAAlD,EAChC,SAAAE,EACA,cAAAD,EACA,YAAAE,EACA,cAAA4C,GAAA,GACgC,UAAA1C,EAChC,WAAAmB,EACA,SAAAR,EACA,cAAAZ,EACA,qBAAAE,EACA,wBAAAI,EACA,iBAAAK,EACA,aAAA6B,EACA,WAAA,IAAA9B,EAAA,CAAAE,CAAA,EACsC,aAAA,IAAA2B,EAAA,CAAAnB,CAAA,CACM,EAG9C,OAAA3B,EAAA,IACE,SAAC,CAAA,UAAAD,EACY,eACT,CACA,8BAAAmD,EACiC,6BAAA/C,EACD,sBAAAgD,CACP,EACzBzD,CACA,EACF,KAAAoC,EACA,GAAAjC,EACI,SAAAG,EAAA,IAAAX,GAAA,SAAA,CAAA,MAAAgE,EAAA,SAAA9B,EAAA,CAE4C,CAAA,CAGtD,EAEA0B,EAAA,UAAA3B,GACA2B,EAAA,KAAAhD,GACAgD,EAAA,kBAAArC,GACAqC,EAAA,WAAAlC,GACAkC,EAAA,QAAAxB,GACAwB,EAAA,IAAArB,GACAqB,EAAA,QAAAhB,GACAgB,EAAA,OAAAb,GAEAa,EAAA,YAAA,SACA3B,GAAA,YAAA,mBACArB,GAAA,YAAA,cACAW,GAAA,YAAA,2BACAG,GAAA,YAAA,oBACAU,GAAA,YAAA,iBACAG,GAAA,YAAA,aACAK,GAAA,YAAA,iBACAG,GAAA,YAAA;;owBCzcA,MAAMkB,GAAmBC,GAAmB,GAAGA,CAAM,IAAIC,SAAO,GC2BhEC,EAAAC,GAAA,CAGE,KAAA,CAAM,OAAAC,EACJ,KAAAC,EACA,MAAAlD,EACA,GAAAgB,EACA,WAAAmC,EACA,MAAAC,EACA,UAAAC,EACA,WAAAC,EACA,eAAAC,EACA,UAAAC,EACA,iBAAAC,EACA,KAAAC,EACA,GAAAvE,CACG,EAAA6D,EAGL,CAAAW,CAAA,EAAAjB,EAAAA,SAAAE,GAAAY,CAAA,CAAA,EACA,CAAA,WAAAI,EAAA,SAAAC,CAAA,EAAAC,GAAA,EAEAC,EAAA/C,GAAA2C,EACAK,EAAA,GAAAD,CAAA,UACAE,EAAA,GAAAF,CAAA,SACAG,EAAA,GAAAH,CAAA,kBAEAI,EAAA,CAAoB,mBAAAjB,EAAAe,EAAA,OACkB,kBAAAjE,EAAAgE,EAAA,OACC,MAAAZ,EACrC,KAAAM,GAAAK,EACc,GAAAA,EACV,GAAA5E,CACD,EAGLiB,EAAAA,UAAA,IAAA,CACE,GAAAwD,EAIA,OAAAC,EAAA,CAAuB,KAAA,YACf,KAAA,CAAA,GAAAE,EAAA,MAAA,EAAAX,CAAA,CACuC,CAAA,EAG/C,IAAAS,EAAA,CACyB,KAAA,YACf,KAAA,CAAA,GAAAE,EAAA,MAAA,EAAA,CAC8B,CAAA,CACrC,EAAA,CAAAA,EAAAX,EAAAQ,CAAA,CAAA,EAGLxD,EAAAA,UAAA,KACEyD,EAAA,CAAuB,KAAA,qBACf,KAAA,CAAA,GAAAE,EAAA,WAAA,EAAA,CACmC,CAAA,EAE3C,IAAAF,EAAA,CACyB,KAAA,qBACf,KAAA,CAAA,GAAAE,EAAA,WAAA,EAAA,CACkC,CAAA,GACzC,CAAA,CAAA,EAGL,KAAA,CAAA,UAAAK,EAAA,GAAAC,CAAA,EAAAd,GAAA,GAEA,OAAAnE,EAAA,KACE,MAAC,CAAA,UAAAC,EACY,mBACT,CACA,0BAAA,CAAAoE,GAAAL,CACkD,EAClDgB,CACA,EACF,GAAAC,EACI,SAAA,CAEHrE,GAAAV,EAAA,IAAAgF,EAAA,CAAA,GAAAN,EAAA,QAAAD,EAAA,GAAAZ,EAAA,SAAAnD,CAAA,CAAA,EAGCkD,GAAA5D,EAAA,IAAAiF,EAAA,CAAA,GAAAN,EAAA,QAAAF,EAAA,GAAAV,EAAA,SAAAH,CAAA,CAAA,EAMAE,GAAA,OAAAA,GAAA,UAAA9D,EAAA,IAAAkF,GAAA,CAAA,GAAAN,EAAA,QAAAH,EAAA,GAAAT,EAAA,SAAAF,CAAA,CAAA,EAMAH,EAAAkB,CAAA,CAGiB,CAAA,CAAA,CAGzB,EAEApB,EAAA,YAAA,q7CC5HO,MAAM0B,GAA6B,CAACC,EAAO,CAAE,KAAA7C,EAAM,KAAA8C,KAAW,CACnE,OAAQ9C,EAAM,CACZ,IAAK,kBACI,MAAA,CACL,GAAG6C,EACH,YAAaC,EAAK,eACdD,EAAM,YACH,OAAmC1D,GAAOA,IAAO2D,EAAK,KACtD,EAAA,OAAOA,EAAK,KAAK,EACpBD,EAAM,YAAY,OAAQ1D,GAAOA,IAAO2D,EAAK,KAAK,CAAA,CAE5D,CACF,EAUMC,EAAoBhG,EAAAA,cAAsC,CAC9D,KAAM,GACN,SAAqC,IAAM,CAAC,EAC5C,cAA0C,IAAM,GAChD,eAA2C,IAAM,GACjD,iBAA6C,IAAM,CAAC,CACtD,CAAC,EAEDgG,EAAkB,YAAc,oBAEnB,MAAAC,GAAuB,IAClC/F,EAAA,WAAmC8F,CAAiB,EClDzCE,GAAuB,CAACC,EAAiB,IAC7C,CAAC,GAAG,MAAcA,CAAM,CAAC,EAC7B,IAAI,IAAM,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC,EACvC,KAAK,EAAE,ECsCZC,GAAA,CAAA,CACE,SAAAnE,EACE,UAAA7B,EACA,GAAAgC,EACA,KAAAkC,EACA,UAAAG,EACA,WAAAF,EACA,YAAA8B,EACA,qBAAAC,EACA,wBAAAC,EACA,QAAAC,EACA,eAAAC,EACA,SAAAC,EACA,KAAAzD,EAAA,WACO,GAAA1C,CAET,EAAAoG,IAAA,CAGA,KAAA,CAAA,KAAA7B,EAAA,cAAA8B,EAAA,eAAAC,EAAA,iBAAAC,EAAA,SAAAC,CAAA,EAAAd,KAGA,CAAAe,CAAA,EAAAlD,WAAA+C,EAAA,CAAA,EACA,CAAAI,EAAAC,CAAA,EAAApD,EAAA,SAA8C,CAAA,EAAA0C,GAAAC,EAC9B,EAEhBU,EAAA/E,GAAAwE,EAAAI,CAAA,EAEA,CAAA,UAAAI,EAAA,GAAAC,CAAA,EAAA9C,GAAA,GACA,CAAA,UAAA+C,EAAA,GAAAC,CAAA,EAAA9C,GAAA,GACA,CAAA,UAAA+C,EAAA,GAAAC,CAAA,EAAAlB,GAAA,GAGA/E,OAAAA,EAAAA,UAAA,IACE,IAAAsF,EAAAE,CAAA,EAA+C,CAAA,CAAA,EAGjDxF,EAAAA,UAAA,IAAA,CACEgF,IAAA,QACEU,EAAAV,CAAA,CACF,EAAA,CAAAA,CAAA,CAAA,EAGFhF,EAAAA,UAAA,KACEuF,EAAA,CAAS,KAAA,kBACD,KAAA,CAAA,MAAAC,EAAA,eAAA,EAAAX,CAAA,CACiE,CAAA,EAGzE,IAAAU,EAAA,CACW,KAAA,kBACD,KAAA,CAAA,MAAAC,EAAA,eAAA,EAAA,CACkD,CAAA,GACzD,CAAAX,CAAA,CAAA,EAGL7F,EAAA,KAAAa,WAAA,CAAA,SAAA,CAEIb,EAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,yBAAAL,CAAA,EAAA,SAAA,CACEM,EAAA,IAAA,QAAC,CAAA,UAAA,0BACW,GAAAyG,EACN,KAAArC,EACJ,KAAA7B,EACA,QAAAuD,EACA,eAAAC,EACA,IAAAE,EACA,SAAAe,GAAA,CAEElB,IAAA,QACEU,EAAAQ,EAAA,OAAA,OAAA,EAGFhB,GAAA,MAAAA,EAAAgB,EAAa,EACf,GAAAnH,CACI,CAAA,EACN0B,GAAAvB,EAAA,IAEEgF,EAAC,CAAA,UAAAjF,EAAA,0BAAA2G,CAAA,EAC0D,GAAA,GAAAD,CAAA,UAC3C,QAAAA,EACL,GAAAE,EACL,SAAApF,CAEH,CAAA,EACHqC,GAAA5D,EAAA,IAGAiF,EAAC,CAAA,UAAAlF,EAAA,yBAAA6G,CAAA,EACwD,GAAAC,EACnD,SAAAjD,CAEH,CAAA,CACH,EAAA,EAEJ+B,IAAAY,GAAAX,IAAA5F,EAAA,IAEE,MAAC,CAAA,UAAAD,EACY,gCACT+G,CACA,EACF,GAAAC,EACI,SAAApB,CAEH,CAAA,CACH,CAAA,CAAA,CAIR,EAUAsB,GAAAC,EAAAA,WAAAxB,EAAA,EAeAyB,EAAA,CAAA,CAAgC,SAAA5F,EAC9B,SAAA6F,EACA,GAAAvH,CAEF,IAAA,CACE,IAAAwH,EAAA,CAAA,EACAC,EAAA,CAAA,EACAC,EAAA,EAEA,KAAA,CAAAnC,EAAAiB,CAAA,EAAAmB,EAAAA,WAAArC,GAAA,CAAA,YAAA,CAAA,CAAA,CAAA,EAEAe,EAAAuB,EAAAA,YAAA,CAAA/F,EAAAgG,KACEA,KAAAL,IAIAE,GAAA,EACAF,EAAAK,CAAA,EAAA,GAAAN,GAAA1F,CAAA,IAAA6F,CAAA,IACAF,EAAAK,CAAA,GAA4B,CAAA,CAAA,EAG9BvB,EAAA,IAAA,CACE,MAAAuB,EAAAlC,KAEA,OAAA8B,EAAA,SAAAI,CAAA,EACEvB,EAAA,GAGFmB,EAAA,KAAAI,CAAA,EACAA,EAAO,EAGTtB,EAAAsB,GAAA,CACEJ,EAAAA,EAAA,OAAArB,GAAAA,IAAAyB,CAAA,CAAyE,EAG3EC,EAAA,IAAA,CACEN,EAAA,CAAA,EACAE,EAAA,CAAgB,EAGlB,OAAAvH,EAAA,IACEyD,EAAC,CAAA,GAAA5D,EACK,UAAA,aACM,OAAA,CAAA,CAAA,GAAA6B,EAAA,KAAA0C,EAAA,UAAA1E,EAAA,GAAAmF,KAAA,CAER8C,IACA,MAAAC,EAAA,CAA8C,KAAAxD,EAC5C,cAAAsD,GAAAxB,EAAAxE,EAAAgG,CAAA,EACyD,eAAAvB,EACzD,iBAAAC,EACA,SAAAC,CACA,EAGF,OAAArG,EAAA,IACE,MAAC,CAAA,UAAAD,EACY,mBACT,CACA,gCAAAqF,EAAA,YAAA,OAAA,CAC8D,EAC9D1F,CACA,EACF,GAAAgC,EACA,GAAAmD,EACI,SAAA7E,EAAA,IAAAsF,EAAA,SAAA,CAAA,MAAAsC,EAAA,SAAArG,EAAA,CAIJ,CAAA,CACF,CAEJ,CAAA,CAGN,EAEA0F,GAAA,YAAA,iBACAE,EAAA,YAAA,aAEAA,EAAA,IAAAF;;ihCC9OO,MAAMY,EAAmBvI,EAAAA,cAAqC,CACnE,GAAI,GACJ,KAAM,GACN,aAAyC,IAAM,CAAC,EAChD,cAA0C,IAAM,CAAC,CACnD,CAAC,EAEDuI,EAAiB,YAAc,mBAElB,MAAAC,GAAsB,IAAMtI,EAAA,WAAWqI,CAAgB,ECgBpEE,GAAA,CAAqD,IAAA,MAC9C,MAAA,QACE,KAAA,MAET,EAcAC,GAAA,CAAA,CAIE,GAAAtG,EACE,UAAAhC,EACA,KAAA0E,EACA,SAAA4B,EACA,WAAAnC,EAAA,CAAA,EACc,MAAAnD,EACd,KAAAuH,EACA,MAAAnE,EACA,MAAAT,EACA,aAAA6E,EACA,GAAArI,CAEF,EAAAoG,IAAA,CAGA,KAAA,CAAM,GAAAkC,EACA,KAAAC,EACE,MAAAC,EACC,aAAAC,EACO,cAAAC,EACd,aAAAC,CACc,EAAAV,GAAA,EAGhBW,EAAAhB,cAAAiB,GAAA,CACEA,EAAA,QAAA,EACA1C,GAAA,MAAAA,EAAA0C,GACAA,EAAA,wBACEF,EAAAP,EAAAS,CAAA,CACF,EAAA,CAAA,CAAA,EAGFC,EAAA1C,EAEA2C,EAAAC,GAAA,CACEN,EAAAN,EAAAY,CAAA,EACAF,GAAA,MAAAA,EAAAE,EAAmB,EAGrBC,EAAAzF,IAAAgF,GAAA,YAAAA,EAAAJ,IACAc,EAAAb,IAAAI,GAAA,YAAAA,EAAAL,IAEAxB,EAAA/E,GAAA,GAAAyG,CAAA,IAAAF,CAAA,GACAe,EAAA5E,GAAA,GAAAgE,CAAA,IAAAH,CAAA,GACAvD,EAAA,GAAA+B,CAAA,UAEA,CAAM,UAAAC,EACO,GAAAuC,EACP,GAAAC,CACD,EAAArF,EAEL,OAAA7D,MAAA,MAAA,CAAA,UAAA,yBAAA,SAAAF,EAAA,KAAA,MAAA,CAAA,UAAA,mBAAA,SAAA,CAGME,EAAA,IAAAgF,EAAC,CAAA,UAAAjF,EAAA,0BAAA2G,CAAA,EAC0D,GAAAhC,EACrD,QAAA+B,EACK,GAAAyC,EACL,SAAAxI,GAAAqH,GAAAE,CAAA,CAEwB,CAAA,EAC9BjI,EAAA,IACA,QAAC,CAAA,UAAAD,EACY,sCACT,CACA,uBAAAkI,IAAA,OACmC,uBAAAA,IAAA,OACA,qBAAAnE,GAAA,EACF,EACjCpE,CACA,EACF,GAAA+G,EACI,MAAAqC,EACG,aAAAC,EACO,kBAAAE,GAAAA,EACkB,KAAAD,EAC1B,SAAAP,EACI,IAAAG,EACL,GAAA/I,CACD,CAAA,CACN,CAAA,CAAA,CAAA,CAAA,CAIR,EAEAsJ,EAAAjC,EAAAA,WAAAc,EAAA,EAEAoB,GAAAlC,EAAA,WAAY,CAAAxD,EAAAuC,IAAAjG,EAAAA,IAAAmJ,EAAA,CAAA,GAAAzF,EAAA,KAAA,MAAA,IAAAuC,EAAA,CAEZ,EAEAoD,GAAAnC,EAAA,WAAc,CAAAxD,EAAAuC,IAAAjG,EAAAA,IAAAmJ,EAAA,CAAA,GAAAzF,EAAA,KAAA,QAAA,IAAAuC,EAAA,CAEd,EAEAqD,GAAApC,EAAA,WAAa,CAAAxD,EAAAuC,IAAAjG,EAAAA,IAAAmJ,EAAA,CAAA,GAAAzF,EAAA,KAAA,OAAA,IAAAuC,EAAA,CAEb,EAcAsD,EAAA,CAAA,CAA8B,SAAAhI,EAC5B,MAAA8B,EACA,aAAA6E,EACA,eAAAsB,EACA,SAAAxD,EACA,GAAAnG,CAEF,IAAA,CACE,KAAA,CAAA,CAAA4J,CAAA,EAAArG,WAAA,CAEG,OAAA,CACO,KAAAC,GAAA,YAAAA,EAAA,MAAA,GACa,OAAAA,GAAA,YAAAA,EAAA,QAAA,GACI,MAAAA,GAAA,YAAAA,EAAA,OAAA,EACF,CACvB,CAAA,EAGFvC,EAAAA,UAAA,IAAA,CACE2I,EAAAC,GAAA,CACE,GAAA,CAAArG,GAAAqG,EAAA,SAAArG,EACE,OAAAqG,EAGF,KAAA,CAAA,IAAAC,EAAA,MAAAC,EAAA,KAAAC,CAAA,EAAAxG,EAEA,MAAA,CAAO,OAAA,CACG,IAAAsG,GAAAD,EAAA,OAAA,MAAAC,EAAAA,EAAAD,EAAA,OAAA,IACgD,MAAAE,GAAAF,EAAA,OAAA,QAAAE,EAAAA,EAAAF,EAAA,OAAA,MACU,KAAAG,GAAAH,EAAA,OAAA,OAAAG,EAAAA,EAAAH,EAAA,OAAA,IACL,CAC7D,CACF,CAAA,CACD,EAAA,CAAArG,CAAA,CAAA,EAGH,MAAAyG,EAAAC,SAAA,IAAA,EACAC,EAAAD,SAAA,IAAA,EAEAE,EAAA,CAAAhC,EAAAiC,IAAA,SACEV,IAIAvB,IAAA,OAAAiC,EAAA,SAAA,GACEC,EAAAL,GAAA,YAAAA,EAAA,UAAA,MAAAK,EAAA,QAAyBlC,IAAA,SAAAiC,EAAA,SAAA,KAEzBE,EAAAJ,GAAA,YAAAA,EAAA,UAAA,MAAAI,EAAA,SACF,EAGF7B,EAAA,CAAAN,EAAAoC,IAAA,CAIE,OAAApC,EAAA,CAAc,IAAA,QAEV6B,EAAA,QAAAO,EACA,MAAA,IAAA,OAEAL,EAAA,QAAAK,EACA,KAAA,CACJ,EAGF5B,EAAA,CAAAR,EAAAS,IAAA,CAIEuB,EAAAhC,EAAAS,EAAA,OAAA,KAAA,EACAA,EAAA,gBAAA,EACAe,EAAAC,GAAA,CACE,MAAAY,EAAA,CAAiB,GAAAZ,EAAA,OACR,CAAAzB,CAAA,EAAAS,EAAA,OAAA,KACc,EAGvB,GAAA1C,EAAA,CACE,MAAAuE,EAAA,CAAiB,GAAA7B,EACZ,OAAA,CAAA,GAAAA,EAAA,OAAA,MAAA4B,CAAA,EACwC,cAAA,CAAA,GAAA5B,EAAA,cAAA,MAAA4B,CAAA,CACc,EAG3DtE,EAAAuE,CAAA,CAAiB,CAGnB,MAAA,CAAO,OAAAD,CACG,CACV,CAAA,CACD,EAGH,OAAAtK,EAAA,IACEyD,EAAC,CAAA,GAAA5D,EACK,UAAA,YACM,OAAA,CAAA,CAAA,GAAA6B,EAAA,KAAA0C,EAAA,UAAA1E,EAAA,MAAAoE,EAAA,GAAA0G,KAAA,CAER,MAAAN,EAAA,CAAqC,GAAAxI,EACnC,KAAA0C,EACA,MAAAN,EACA,aAAAoE,EACA,aAAAO,EACA,cAAAF,CACA,EAGF,OAAAvI,EAAA,IACE,MAAC,CAAA,UAAAD,EAAA,mBAAAL,CAAA,EAC8C,GAAAgC,EAC7C,GAAA8I,EACI,SAAAxK,EAAA,IAAA6H,EAAA,SAAA,CAAA,MAAAqC,EAAA,SAAA3I,GAAAzB,EAAAA,KAAAa,EAAA,SAAA,CAAA,SAAA,CAKEX,MAAAuJ,EAAA,IAAA,EAAA,EAAevJ,MAAAuJ,EAAA,MAAA,EAAA,EACEvJ,MAAAuJ,EAAA,KAAA,EAAA,CACD,CAAA,CAAA,CAAA,CAAA,CAGtB,CAAA,CACF,CAEJ,CAAA,CAGN,EAEAA,EAAA,YAAA,YACAH,GAAA,YAAA,gBACAC,GAAA,YAAA,kBACAC,GAAA,YAAA,iBAEAC,EAAA,IAAAH,GACAG,EAAA,MAAAF,GACAE,EAAA,KAAAD;;i6CC5RA,MAAAmB,EAAA,CAAA/G,EAAAuC,IAIEjG,EAAA,IACEyD,EAAC,CAAA,GAAAC,EACK,UAAA,QACM,OAAA,CAAA,CACD,GAAAhC,EACP,KAAA0C,EACA,UAAA1E,EACA,MAAAoE,EACA,MAAAlE,EACA,KAAA2C,EAAA,OACO,GAAA1C,CACJ,IAAAG,EAAA,IAEH,QAAC,CAAA,GAAA0B,EACC,KAAA0C,EACA,UAAArE,EACW,cACT,CACA,CAAA,sBAAAH,CAAA,EAAA,EAAAA,EACmC,qBAAAkE,CACX,EACxBpE,CACA,EACF,KAAA6C,EACA,IAAA0D,EACA,GAAApG,CACI,CAAA,CACN,CAAA,EAMR6K,GAAAxD,EAAA,WAAAuD,CAAA,EAEAC,GAAA,YAAA,knCChDO,MAAMvF,GAAyB,CAACC,EAAO,CAAE,KAAA7C,EAAM,KAAA8C,KAAW,CAC/D,OAAQ9C,EAAM,CACZ,IAAK,kBACI,MAAA,CACL,GAAG6C,EACH,YAAaC,EAAK,eACdD,EAAM,YACH,OAAmC1D,GAAOA,IAAO2D,EAAK,KAAA,EACtD,OAAOA,EAAK,KAAK,EACpBD,EAAM,YAAY,OAAOC,EAAK,KAAK,CAAA,EAE3C,IAAK,eACI,MAAA,CACL,GAAGD,EACH,SAAUC,EAAK,KAAA,CAErB,CACF,EAWMsF,EAAgBrL,EAAAA,cAAkC,CACtD,KAAM,GACN,cAAe,GACf,SAAqC,IAAM,CAAC,EAC5C,WAAuC,IAAM,GAC7C,eAA2C,IAAM,GACjD,iBAA6C,IAAM,CAAC,CACtD,CAAC,EAEDqL,EAAc,YAAc,gBAEf,MAAAC,GAAmB,IAC9BpL,EAAA,WAA+BmL,CAAa,ECf9CE,GAAA,CAAA,CAAsD,SAAAtJ,EACpD,UAAA7B,EACA,GAAAG,CAEF,IACEG,MAAA,MAAA,CAAA,UAAAD,EAAA,wBAAAL,CAAA,EAAA,GAAAG,EAAA,SAAA0B,CAAA,CAAA,EAOFuJ,GAAA,CAAA,CACE,SAAAvJ,EACE,UAAA7B,EACA,GAAAgC,EACA,KAAAkC,EACA,UAAAG,EACA,WAAAF,EACA,YAAA8B,EACA,qBAAAC,EACA,wBAAAC,EACA,QAAAC,EACA,eAAAC,EACA,SAAAC,EACA,KAAAzD,EAAA,QACO,GAAA1C,CAET,EAAAoG,IAAA,CAGA,KAAA,CAAM,KAAA7B,EACJ,WAAA2G,EACA,eAAA5E,EACA,iBAAAC,EACA,cAAA4E,EACA,SAAA3E,CACA,EAAAuE,GAAA,EAEF,CAAAK,CAAA,EAAA7H,WAAA+C,EAAA,CAAA,EACAM,EAAA/E,GAAAqJ,EAAAE,CAAA,EACAC,EAAAF,IAAAC,GAAAnF,IAAA,GAGA,CAAA,UAAAY,EAAA,GAAAC,CAAA,EAAA9C,GAAA,GACA,CAAA,UAAA+C,EAAA,GAAAC,CAAA,EAAA9C,GAAA,GACA,CAAA,UAAA+C,EAAA,GAAAC,CAAA,EAAAlB,GAAA,GAGAsF,EAAAzD,GAAA,CACErB,EAAA,CAAA,KAAA,eAAA,KAAA,CAAA,MAAAqB,CAAA,CAAA,CAAA,CAA6D,EAG/D5G,OAAAA,EAAAA,UAAA,KACEiF,GACEoF,EAAAF,CAAA,EAGF,IAAA7E,EAAA6E,CAAA,GAA4C,CAAA,CAAA,EAG9CnK,EAAAA,UAAA,IAAA,CACEgF,GACEqF,EAAAF,CAAA,CACF,EAAA,CAAAnF,CAAA,CAAA,EAGFhF,EAAAA,UAAA,KACEuF,EAAA,CAAS,KAAA,kBACD,KAAA,CAAA,MAAA4E,EAAA,eAAA,EAAAtF,CAAA,CAC8D,CAAA,EAGtE,IAAAU,EAAA,CACW,KAAA,kBACD,KAAA,CAAA,MAAA4E,EAAA,eAAA,EAAA,CAC+C,CAAA,GACtD,CAAAtF,CAAA,CAAA,EAGL7F,EAAA,KAAAa,WAAA,CAAA,SAAA,CAEIb,EAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,qBAAAL,CAAA,EAAA,SAAA,CACEM,EAAA,IAAA,QAAC,CAAA,UAAA,sBACW,GAAAyG,EACN,KAAArC,EACJ,KAAA7B,EACA,QAAAuD,EACA,eAAAC,EACA,IAAAE,EACA,SAAAe,GAAA,CAEEmE,EAAAF,CAAA,EACAjF,GAAA,MAAAA,EAAAgB,EAAa,EACf,GAAAnH,CACI,CAAA,EACN0B,GAAAvB,EAAA,IAEEgF,EAAC,CAAA,UAAAjF,EAAA,sBAAA2G,CAAA,EACsD,GAAA,GAAAD,CAAA,UACvC,QAAAA,EACL,GAAAE,EACL,SAAApF,CAEH,CAAA,EACHqC,GAAA5D,EAAA,IAGAiF,EAAC,CAAA,UAAAlF,EAAA,qBAAA6G,CAAA,EACoD,GAAA,GAAAH,CAAA,SACrC,GAAAI,EACV,SAAAjD,CAEH,CAAA,CACH,EAAA,EAEJ+B,IAAAuF,GAAAtF,IAAA5F,EAAA,IAEE,MAAC,CAAA,UAAAD,EAAA,4BAAA+G,CAAA,EACkE,GAAA,GAAAL,CAAA,gBACnD,GAAAM,EACV,SAAApB,CAEH,CAAA,CACH,CAAA,CAAA,CAIR,EAeAyF,GAAAlE,EAAAA,WAAA4D,EAAA,EAiBAO,EAAA,CAAA,CAAA,SAAA9J,EAAA,GAAA1B,CAAA,IAAA,CACE,IAAAyL,EAAA,CAAA,EACAC,EAAA,CAAA,EACAC,EAAA,EAEA,KAAA,CAAApG,EAAAiB,CAAA,EAAAmB,EAAAA,WAAArC,GAAA,CAA8C,SAAA,GAClC,YAAA,CAAA,CACI,CAAA,EAGhB4F,EAAAtD,EAAAA,YAAA,CAAA/F,EAAAgG,KACEA,KAAA4D,IAIAE,GAAA,EACAF,EAAA5D,CAAA,EAAA,GAAA7H,EAAA,UAAA6B,CAAA,IAAA8J,CAAA,IACAF,EAAA5D,CAAA,GAAyB,CAAA,CAAA,EAG3BvB,EAAA,IAAA,CACE,MAAAuB,EAAAlC,KAEA,OAAA+F,EAAA,SAAA7D,CAAA,EACEvB,EAAA,GAGFoF,EAAA,KAAA7D,CAAA,EACAA,EAAO,EAGTtB,EAAAsB,GAAA,CACE6D,EAAAA,EAAA,OAAAtF,GAAAA,IAAAyB,CAAA,CAAmE,EAGrE+D,EAAA,IAAA,CACEH,EAAA,CAAA,EACAE,EAAA,CAAa,EAGf,OAAAxL,EAAA,IACEyD,EAAC,CAAA,GAAA5D,EACK,UAAA,SACM,OAAA,CAAA,CAAA,GAAA6B,EAAA,KAAA0C,EAAA,OAAAsH,EAAA,UAAAhM,EAAA,GAAAiM,KAAA,CAERF,IAEA,MAAAG,EAAA,CAA+C,KAAAxH,EAC7C,WAAAsD,GAAAqD,EAAArJ,EAAAgG,CAAA,EACmD,cAAAtC,EAAA,SAC9B,eAAAe,EACrB,iBAAAC,EACA,SAAAC,CACA,EAGF,OAAArG,EAAA,IACE,MAAC,CAAA,UAAAD,EACY,eACT,CAAA,uBAAA2L,CAAA,EACiChM,CACjC,EACF,GAAAgC,EACA,GAAAiK,EACI,SAAA3L,EAAA,IAAA2K,EAAA,SAAA,CAAA,MAAAiB,EAAA,SAAArK,EAAA,CAIJ,CAAA,CACF,CAEJ,CAAA,CAGN,EAEAsJ,GAAA,YAAA,iBACAO,GAAA,YAAA,eACAC,EAAA,YAAA,SAEAA,EAAA,QAAAR,GACAQ,EAAA,MAAAD;;umCCtQA,MAAAS,GAAA,CAAA,CAAA,SAAAtK,EAAA,GAAA1B,CAAA,IACEG,EAAAA,IAAA,SAAA,CAAA,GAAAH,EAAA,SAAA0B,CAAA,CAAA,EAGFuK,EAAA,CAAA,CAAA,SAAAvK,EAAA,GAAA1B,CAAA,EAAAoG,IAIEjG,EAAA,IACEyD,EAAC,CAAA,GAAA5D,EACK,UAAA,SACM,OAAA,CAAA,CAAA,GAAA6B,EAAA,KAAA0C,EAAA,UAAA1E,EAAA,MAAAoE,EAAA,GAAA6H,CAAA,IAAA3L,EAAA,IAER,SAAC,CAAA,GAAA0B,EACC,KAAA0C,EACA,UAAArE,EACW,eACT,CAAA,sBAAA+D,CAAA,EAC+BpE,CAC/B,EACF,IAAAuG,EACA,GAAA0F,EACI,SAAApK,CAEH,CAAA,CACH,CAAA,EAyBRwK,GAAA7E,EAAA,WAAA4E,CAAA,EAEAC,GAAA,YAAA,SACAF,GAAA,YAAA,gBAEAE,GAAA,OAAAF,w0BCrEA,MAAAG,EAAA,CAAAtI,EAAAuC,IAIEjG,EAAA,IACEyD,EAAC,CAAA,GAAAC,EACK,UAAA,WACM,OAAA,CAAA,CAAA,GAAAhC,EAAA,KAAA0C,EAAA,MAAAN,EAAA,UAAApE,EAAA,KAAAuM,EAAA,GAAApM,CAAA,IAAAG,EAAA,IAER,WAAC,CAAA,GAAA0B,EACC,KAAA0C,EACA,UAAArE,EACW,iBACT,CACA,wBAAA+D,CAC2B,EAC3BpE,CACA,EACF,IAAAuG,EACA,KAAAgG,EACA,GAAApM,CACI,CAAA,CACN,CAAA,EAmBRqM,GAAAhF,EAAA,WAAA8E,CAAA,EAEAE,GAAA,YAAA;;46BCpCA,MAAAC,EAAA,CAAA,CAAuC,SAAA5K,EACrC,UAAA7B,EACA,MAAAE,EAAA,OACQ,GAAAC,CAEV,IACEG,EAAA,IAAA,MAAA,CAAA,UAAAoM,EAAA,qBAAAxM,CAAA,GAAAF,CAAA,EAAA,GAAAG,EAAA,SAAA0B,CAAA,CAAA,EAOF4K,EAAA,YAAA,qVCtBA,MAAAE,EAAA,CAAA,CAAmC,SAAA9K,EACjC,UAAA7B,EACA,KAAA4M,EACA,KAAAxK,EAAA,OACO,GAAAjC,CAET,IACEG,EAAA,IACE,OAAC,CAAA,UAAAD,EACY,qBACT,CAAA,CAAA,uBAAAuM,CAAA,EAAA,EAAAA,CAAA,EACwC5M,CACxC,EACF,KAAAoC,EACA,GAAAjC,EACI,SAAA0B,CAEH,CAAA,EAKP8K,EAAA,YAAA,yNCvBA,MAAAE,EAAA,CAAA,CAAA,SAAAhL,EAAA,UAAA7B,EAAA,GAAAG,CAAA,IACEG,MAAA,MAAA,CAAA,UAAAD,EAAA,iBAAAL,CAAA,EAAA,GAAAG,EAAA,SAAA0B,CAAA,CAAA,EAOFgL,EAAA,YAAA"}