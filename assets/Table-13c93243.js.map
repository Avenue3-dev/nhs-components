{"version":3,"file":"Table-13c93243.js","sources":["../../../../packages/nhsuk-frontend-react/src/lib/components/content-presentation/table/TableContext.tsx","../../../../packages/nhsuk-frontend-react/src/lib/components/content-presentation/table/Table.tsx"],"sourcesContent":["import { createContext, useContext } from 'react'\n\ntype TableContextValue = {\n  isResponsive: boolean\n  headings: string[]\n  setHeadings: (headings: string[]) => void\n}\n\nexport const TableContext = createContext<TableContextValue>({\n  isResponsive: false,\n  headings: [],\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setHeadings: /* istanbul ignore next */ () => {},\n})\n\nTableContext.displayName = 'TableContext'\n\nexport const useTableContext = () => useContext(TableContext)\n\ntype TableSection = 'header' | 'body' | 'none'\n\nexport const TableSectionContext = createContext<TableSection>('none')\n\nTableSectionContext.displayName = 'TableSectionContext'\n\nexport const useTableSectionContext = () => useContext(TableSectionContext)\n","import clsx from 'clsx'\nimport React, {\n  HTMLProps,\n  PropsWithChildren,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react'\nimport {\n  TableContext,\n  TableSectionContext,\n  useTableContext,\n  useTableSectionContext,\n} from './TableContext'\n\ntype WithInternalProps = {\n  _responsiveHeading?: string\n}\n\ntype TableRowProps = HTMLProps<HTMLTableRowElement>\n\ntype TableCellProps = {\n  isNumeric?: boolean\n} & WithInternalProps &\n  HTMLProps<HTMLTableCellElement>\n\ntype TableProps = {\n  isResponsive?: boolean\n  caption?: string\n} & HTMLProps<HTMLTableElement>\n\ntype Table = {\n  Row: typeof TableRow\n  Cell: typeof TableCell\n  Head: typeof TableHead\n  Body: typeof TableBody\n} & React.FC<TableProps>\n\nconst TableHead: React.FC<HTMLProps<HTMLTableSectionElement>> = ({\n  children,\n  className,\n  role = 'rowgroup',\n  ...rest\n}): JSX.Element => {\n  return (\n    <thead\n      className={clsx('nhsuk-table__head', className)}\n      role={role}\n      {...rest}\n    >\n      <TableSectionContext.Provider value=\"header\">\n        {children}\n      </TableSectionContext.Provider>\n    </thead>\n  )\n}\n\nconst TableBody: React.FC<HTMLProps<HTMLTableSectionElement>> = ({\n  children,\n  className,\n  ...rest\n}): JSX.Element => {\n  return (\n    <tbody className={clsx('nhsuk-table__body', className)} {...rest}>\n      <TableSectionContext.Provider value=\"body\">\n        {children}\n      </TableSectionContext.Provider>\n    </tbody>\n  )\n}\n\nconst TableRow: React.FC<TableRowProps> = ({\n  children,\n  className,\n  role = 'row',\n  ...rest\n}): JSX.Element => {\n  const section = useTableSectionContext()\n  const { isResponsive, headings, setHeadings } = useTableContext()\n\n  useEffect(() => {\n    if (isResponsive && section === 'header') {\n      const _headings: string[] = []\n\n      React.Children.forEach(children, (child) => {\n        if (React.isValidElement(child) && child.type === TableCell) {\n          _headings.push(\n            (\n              child as ReactElement<PropsWithChildren>\n            ).props.children?.toString() ?? '',\n          )\n        }\n      })\n\n      setHeadings(_headings)\n    }\n  }, [children, isResponsive, section, setHeadings])\n\n  let _children = children\n\n  if (section === 'body' && isResponsive) {\n    _children = React.Children.map(children, (child, index) => {\n      if (React.isValidElement(child) && child.type === TableCell) {\n        return React.cloneElement(child as ReactElement<TableCellProps>, {\n          _responsiveHeading: headings[index] ?? '',\n        })\n      }\n      return child\n    })\n  }\n\n  return (\n    <tr\n      className={clsx({ 'nhsuk-table__row': section === 'body' }, className)}\n      role={role}\n      {...rest}\n    >\n      {_children}\n    </tr>\n  )\n}\n\nconst TableCell: React.FC<TableCellProps> = ({\n  children,\n  className,\n  role = 'cell',\n  isNumeric = false,\n  _responsiveHeading,\n  ...rest\n}): JSX.Element => {\n  const section = useTableSectionContext()\n  const { isResponsive } = useTableContext()\n\n  if (section === 'header') {\n    role = 'columnheader'\n    return (\n      <th\n        className={clsx(\n          'nhsuk-table__header',\n          { 'nhsuk-table__header--numeric': isNumeric },\n          className,\n        )}\n        role={role}\n        {...rest}\n      >\n        {children}\n      </th>\n    )\n  }\n\n  return (\n    <td\n      className={clsx(\n        'nhsuk-table__cell',\n        { 'nhsuk-table__cell--numeric': isNumeric },\n        className,\n      )}\n      role={role}\n      {...rest}\n    >\n      {isResponsive && _responsiveHeading && (\n        <span className=\"nhsuk-table-responsive__heading\">\n          {_responsiveHeading}\n        </span>\n      )}\n      {children}\n    </td>\n  )\n}\n\n/**\n * Use a table to make it easier for users to compare and scan information.\n *\n * For more information on when to use this component, got to the [NHS Service Manual website](https://service-manual.nhs.uk/design-system/components/table).\n *\n * @link https://service-manual.nhs.uk/design-system/components/table\n *\n * @example\n * ```tsx\n * <Table caption=\"Ibuprofen tablet dosages for children\">\n *  <Table.Head>\n *   <Table.Row>\n *    <Table.Cell>Age</Table.Cell>\n *    <Table.Cell>How much</Table.Cell>\n *    <Table.Cell>How often</Table.Cell>\n *   </Table.Row>\n *  </Table.Head>\n *  <Table.Body>\n *   <Table.Row>\n *    <Table.Cell>1 to 2 months</Table.Cell>\n *    <Table.Cell>2.5ml</Table.Cell>\n *    <Table.Cell>Up to 4 times in 24 hours</Table.Cell>\n *   </Table.Row>\n *  </Table.Body>\n * </Table>\n * ```\n */\nconst Table: Table = ({\n  children,\n  isResponsive = false,\n  caption,\n  className,\n  ...rest\n}): JSX.Element => {\n  const [headings, setHeadings] = useState<string[]>([])\n\n  return (\n    <TableContext.Provider value={{ isResponsive, headings, setHeadings }}>\n      <table\n        className={clsx(\n          {\n            'nhsuk-table': !isResponsive,\n            'nhsuk-table-responsive': isResponsive,\n          },\n          className,\n        )}\n        {...rest}\n      >\n        {caption && (\n          <caption className=\"nhsuk-table__caption\">{caption}</caption>\n        )}\n        {children}\n      </table>\n    </TableContext.Provider>\n  )\n}\n\nTableHead.displayName = 'Table.Head'\nTableBody.displayName = 'Table.Body'\nTableRow.displayName = 'Table.Row'\nTableCell.displayName = 'Table.Cell'\nTable.displayName = 'Table'\n\nTable.Row = TableRow\nTable.Cell = TableCell\nTable.Head = TableHead\nTable.Body = TableBody\n\nexport default Table\n"],"names":["TableContext","createContext","useTableContext","useContext","TableSectionContext","useTableSectionContext","TableHead","children","className","role","rest","jsx","clsx","TableBody","TableRow","section","isResponsive","headings","setHeadings","useEffect","_headings","React","child","TableCell","_a","_children","index","isNumeric","_responsiveHeading","jsxs","Table","caption","useState"],"mappings":"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"}