{"version":3,"file":"Row-3ef797e0.js","sources":["../../src/components/navigation/header/HeaderContext.ts","../../src/assets/nhs-logo.tsx","../../src/components/navigation/header/Header.tsx","../../src/hooks/use-id-with-prefix.ts","../../src/components/core/form-group/FormGroup.tsx","../../src/components/form-elements/checkboxes/CheckboxesContext.ts","../../src/utils/random.ts","../../src/components/form-elements/checkboxes/Checkboxes.tsx","../../src/components/form-elements/input/Input.tsx","../../src/components/form-elements/radios/RadiosContext.ts","../../src/components/form-elements/radios/Radios.tsx","../../src/components/form-elements/select/Select.tsx","../../src/components/form-elements/textarea/Textarea.tsx","../../src/components/core/grid/column/Column.tsx","../../src/components/core/main/Main.tsx","../../src/components/core/grid/row/Row.tsx"],"sourcesContent":["import { createContext, useContext } from 'react'\n\nexport type HeaderContextValue = {\n  orgName?: string\n  orgSplit?: string\n  orgDescriptor?: string\n  serviceName?: string\n  setHasSearch: (toggle: boolean) => void\n  setHasMenuToggle: (toggle: boolean) => void\n  toggleMenu: () => void\n  toggleSearch: () => void\n  hasSearch: boolean\n  hasMenuToggle: boolean\n  menuOpen: boolean\n  searchOpen: boolean\n  transactional: boolean\n}\n\nconst HeaderContext = createContext<HeaderContextValue>({\n  setHasSearch: /* istanbul ignore next */ () => {},\n  setHasMenuToggle: /* istanbul ignore next */ () => {},\n  toggleMenu: /* istanbul ignore next */ () => {},\n  toggleSearch: /* istanbul ignore next */ () => {},\n  hasSearch: false,\n  hasMenuToggle: false,\n  menuOpen: false,\n  searchOpen: false,\n  transactional: false,\n})\n\nexport default HeaderContext\n\nexport const useHeaderContext = () => useContext(HeaderContext)\n","import clsx from 'clsx'\nimport { SVGProps } from 'react'\n\nexport const NhsLogo: React.FC<SVGProps<SVGSVGElement>> = ({\n  className,\n  height = '40',\n  width = '100',\n  ...rest\n}): JSX.Element => {\n  return (\n    <svg\n      className={clsx('nhsuk-logo', className)}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 40 16\"\n      height={height}\n      width={width}\n      {...rest}\n    >\n      <path\n        className=\"nhsuk-logo__background\"\n        fill=\"#005eb8\"\n        d=\"M0 0h40v16H0z\"\n      ></path>\n      <path\n        className=\"nhsuk-logo__text\"\n        fill=\"#fff\"\n        d=\"M3.9 1.5h4.4l2.6 9h.1l1.8-9h3.3l-2.8 13H9l-2.7-9h-.1l-1.8 9H1.1M17.3 1.5h3.6l-1 4.9h4L25 1.5h3.5l-2.7 13h-3.5l1.1-5.6h-4.1l-1.2 5.6h-3.4M37.7 4.4c-.7-.3-1.6-.6-2.9-.6-1.4 0-2.5.2-2.5 1.3 0 1.8 5.1 1.2 5.1 5.1 0 3.6-3.3 4.5-6.4 4.5-1.3 0-2.9-.3-4-.7l.8-2.7c.7.4 2.1.7 3.2.7s2.8-.2 2.8-1.5c0-2.1-5.1-1.3-5.1-5 0-3.4 2.9-4.4 5.8-4.4 1.6 0 3.1.2 4 .6\"\n      ></path>\n    </svg>\n  )\n}\n","import { Container } from '@/index'\nimport clsx from 'clsx'\nimport React, {\n  ComponentProps,\n  HTMLProps,\n  MouseEventHandler,\n  PropsWithChildren,\n  useEffect,\n  useState,\n} from 'react'\nimport HeaderContext, {\n  HeaderContextValue,\n  useHeaderContext,\n} from './HeaderContext'\nimport { AsElementLink } from '@/types/link-like'\nimport { NhsLogo } from '@/assets/nhs-logo'\nimport { ChevronRightIcon, CloseIcon, SearchIcon } from '@/icons'\n\ntype Header = {\n  Logo: typeof Logo\n  TransactionalLink: typeof TransactionalServiceName\n  Container: typeof HeaderContainer\n  MenuToggle: typeof MenuToggle\n  Content: typeof HeaderContent\n  Nav: typeof HeaderNav\n  NavItem: typeof NavItem\n  Search: typeof Search\n} & React.FC<HeaderProps>\n\ntype HeaderProps = Partial<{\n  transactional: boolean\n  orgName: string\n  orgSplit: string\n  orgDescriptor: string\n  serviceName: string\n  white: boolean\n}> &\n  HTMLProps<HTMLDivElement> &\n  PropsWithChildren\n\ntype MenuToggleProps = {\n  type?: 'button' | 'submit' | 'reset'\n} & Omit<HTMLProps<HTMLButtonElement>, 'children'>\n\ntype LogoProps = Omit<AsElementLink<HTMLAnchorElement>, 'children'>\n\ntype HeaderNavProps = {\n  containerProps?: ComponentProps<typeof Container>\n} & HTMLProps<HTMLDivElement> &\n  PropsWithChildren\n\ntype NavItemProps = {\n  mobileOnly?: boolean\n} & AsElementLink<HTMLAnchorElement> &\n  PropsWithChildren\n\ntype HeaderContentProps = HTMLProps<HTMLDivElement> & PropsWithChildren\n\ntype ButtonToggleProps = {\n  'data-testid'?: string\n} & Omit<\n  HTMLProps<HTMLButtonElement>,\n  'children' | 'type' | 'onClick' | 'className'\n>\n\ntype SearchProps = {\n  visuallyHiddenText?: string\n  toggleProps?: ButtonToggleProps\n  submitProps?: ButtonToggleProps\n  closeProps?: ButtonToggleProps\n} & Omit<HTMLProps<HTMLInputElement>, 'children'>\n\nconst Logo: React.FC<LogoProps> = ({\n  className,\n  asElement: Component = 'a',\n  ...rest\n}): JSX.Element => {\n  const {\n    orgName,\n    orgDescriptor,\n    orgSplit,\n    serviceName,\n    transactional,\n    hasMenuToggle,\n    hasSearch,\n  } = useHeaderContext()\n\n  const label = orgName\n    ? `${orgName} ${orgSplit} ${orgDescriptor} homepage`\n    : 'NHS homepage'\n\n  return (\n    <div\n      className={clsx('nhsuk-header__logo', {\n        'nhsuk-header__logo--only': !hasMenuToggle && !hasSearch,\n      })}\n    >\n      <Component\n        className={clsx(\n          'nhsuk-header__link',\n          {\n            'nhsuk-header__link--service': !orgName && serviceName,\n          },\n          className,\n        )}\n        aria-label={label}\n        {...rest}\n      >\n        <NhsLogo />\n        {orgName && (\n          <>\n            <span className=\"nhsuk-organisation-name\">\n              {orgName}\n              {orgSplit && (\n                <span className=\"nhsuk-organisation-name-split\">\n                  {orgSplit}\n                </span>\n              )}\n            </span>\n            {orgDescriptor && (\n              <span className=\"nhsuk-organisation-descriptor\">\n                {orgDescriptor}\n              </span>\n            )}\n          </>\n        )}\n\n        {!orgName && !transactional && serviceName && (\n          <span className=\"nhsuk-header__service-name\">{serviceName}</span>\n        )}\n      </Component>\n    </div>\n  )\n}\n\nconst TransactionalServiceName: React.FC<\n  Omit<AsElementLink<HTMLAnchorElement>, 'children'>\n> = ({ className, asElement: Component = 'a', ...rest }): JSX.Element => {\n  const { serviceName } = useHeaderContext()\n\n  return (\n    <div className=\"nhsuk-header__transactional-service-name\">\n      <Component\n        className={clsx(\n          'nhsuk-header__transactional-service-name--link',\n          className,\n        )}\n        {...rest}\n      >\n        {serviceName}\n      </Component>\n    </div>\n  )\n}\n\nconst MenuToggle: React.FC<MenuToggleProps> = ({\n  className,\n  onClick,\n  ...rest\n}): JSX.Element => {\n  const { toggleMenu, setHasMenuToggle, menuOpen } = useHeaderContext()\n\n  const onToggleClick: MouseEventHandler<HTMLButtonElement> = (e) => {\n    toggleMenu()\n    onClick?.(e)\n  }\n\n  useEffect(() => {\n    setHasMenuToggle(true)\n    return () => setHasMenuToggle(false)\n  }, [])\n\n  return (\n    <div className=\"nhsuk-header__menu\">\n      <button\n        className={clsx('nhsuk-header__menu-toggle', className)}\n        aria-label=\"Open menu\"\n        aria-expanded={menuOpen ? 'true' : 'false'}\n        onClick={onToggleClick}\n        {...rest}\n      >\n        Menu\n      </button>\n    </div>\n  )\n}\n\nconst HeaderContainer: React.FC<ComponentProps<typeof Container>> = ({\n  children,\n  className,\n  ...rest\n}): JSX.Element => {\n  return (\n    <Container className={clsx('nhsuk-header__container', className)} {...rest}>\n      {children}\n    </Container>\n  )\n}\n\nconst HeaderContent: React.FC<HeaderContentProps> = ({\n  children,\n  className,\n  id = 'content-header',\n  ...rest\n}): JSX.Element => {\n  const { searchOpen } = useHeaderContext()\n  return (\n    <div\n      className={clsx(\n        'nhsuk-header__content',\n        { 'js-show': searchOpen },\n        className,\n      )}\n      id={id}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n\nconst HeaderNav: React.FC<HeaderNavProps> = ({\n  children,\n  className,\n  open,\n  role = 'navigation',\n  containerProps = {},\n  ...rest\n}): JSX.Element => {\n  const { menuOpen, toggleMenu } = useHeaderContext()\n\n  return (\n    <nav\n      className={clsx(\n        'nhsuk-header__navigation',\n        {\n          'js-show': open ?? menuOpen,\n        },\n        className,\n      )}\n      aria-label=\"Primary navigation\"\n      aria-labelledby=\"label-navigation\"\n      role={role}\n      {...rest}\n    >\n      <Container {...containerProps}>\n        <p className=\"nhsuk-header__navigation-title\">\n          <span id=\"label-navigation\">Menu</span>\n          <button\n            className=\"nhsuk-header__navigation-close\"\n            id=\"close-menu\"\n            onClick={toggleMenu}\n          >\n            <CloseIcon />\n            <span className=\"nhsuk-u-visually-hidden\">Close menu</span>\n          </button>\n        </p>\n        <ul className=\"nhsuk-header__navigation-list\">{children}</ul>\n      </Container>\n    </nav>\n  )\n}\n\nconst NavItem: React.FC<NavItemProps> = ({\n  children,\n  className,\n  mobileOnly,\n  asElement: Component = 'a',\n  ...rest\n}): JSX.Element => {\n  return (\n    <li\n      className={clsx(\n        'nhsuk-header__navigation-item',\n        { 'nhsuk-header__navigation-item--for-mobile': mobileOnly },\n        className,\n      )}\n    >\n      <Component className=\"nhsuk-header__navigation-link\" {...rest}>\n        {children}\n        <ChevronRightIcon />\n      </Component>\n    </li>\n  )\n}\n\nconst Search: React.FC<SearchProps> = ({\n  className,\n  action = '/search',\n  method = 'get',\n  id = 'search-field',\n  type = 'search',\n  autoComplete = 'off',\n  placeholder = 'Search',\n  role = 'search',\n  visuallyHiddenText = 'Search',\n  toggleProps = {},\n  submitProps = {},\n  closeProps = {},\n  ...rest\n}): JSX.Element => {\n  const { toggleSearch, setHasSearch, searchOpen } = useHeaderContext()\n\n  useEffect(() => {\n    setHasSearch(true)\n\n    return () => setHasSearch(false)\n  }, [])\n\n  return (\n    <div className={clsx('nhsuk-header__search', className)}>\n      <button\n        className={clsx('nhsuk-header__search-toggle', {\n          'is-active': searchOpen,\n        })}\n        onClick={toggleSearch}\n        {...toggleProps}\n      >\n        <span className=\"nhsuk-u-visually-hidden\">{visuallyHiddenText}</span>\n        <SearchIcon />\n      </button>\n      <div\n        className={clsx('nhsuk-header__search-wrap', {\n          'js-show': searchOpen,\n        })}\n      >\n        <form\n          className=\"nhsuk-header__search-form\"\n          action={action}\n          method={method}\n          role={role}\n        >\n          <label className=\"nhsuk-u-visually-hidden\" htmlFor={id}>\n            {visuallyHiddenText}\n          </label>\n          <input\n            className=\"nhsuk-search__input\"\n            id={id}\n            type={type}\n            placeholder={placeholder}\n            autoComplete={autoComplete}\n            {...rest}\n          />\n          <button\n            className=\"nhsuk-search__submit\"\n            type=\"submit\"\n            aria-label=\"Submit search\"\n            {...submitProps}\n          >\n            <SearchIcon />\n          </button>\n          <button\n            className=\"nhsuk-search__close\"\n            type=\"button\"\n            onClick={toggleSearch}\n            {...closeProps}\n          >\n            <CloseIcon />\n            <span className=\"nhsuk-u-visually-hidden\">Close search</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Use the header to show users they are on an NHS service and help them get started in finding what they need.\n *\n * For more information on when to use this component, go to the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/header).\n *\n * @link https://service-manual.nhs.uk/design-system/components/header\n *\n * @example\n * ```tsx\n * <Header orgName=\"Anytown Anyplace\" orgSplit=\"Anywhere\" orgDescriptor=\"NHS Foundation Trust\">\n *  <Header.Container>\n *   <Header.Logo href=\"/\" />\n *   <Header.Content>\n *    <Header.MenuToggle />\n *   </Header.Content>\n *  </Header.Container>\n *  <Header.Nav>\n *   <Header.NavItem mobileOnly href=\"/\">Home</Header.NavItem>\n *   <Header.NavItem href=\"/service-one\">Service one</Header.NavItem>\n *   <Header.NavItem href=\"/service-two\">Service two</Header.NavItem>\n *  </Header.Nav>\n * </Header>\n * ```\n */\nconst Header: Header = ({\n  children,\n  className,\n  role = 'banner',\n  transactional,\n  orgName,\n  orgSplit,\n  orgDescriptor,\n  serviceName,\n  white,\n  ...rest\n}): JSX.Element => {\n  const [hasMenuToggle, setMenuToggle] = useState<boolean>(false)\n  const [menuOpen, toggleMenu] = useState<boolean>(false)\n  const [searchOpen, toggleSearch] = useState<boolean>(false)\n  const [hasSearch, setSearch] = useState<boolean>(false)\n\n  const value: HeaderContextValue = {\n    orgName,\n    orgSplit,\n    orgDescriptor,\n    serviceName,\n    transactional: transactional ?? false,\n    hasSearch,\n    searchOpen,\n    menuOpen,\n    hasMenuToggle,\n    setHasMenuToggle: setMenuToggle,\n    toggleMenu: () => toggleMenu(!menuOpen),\n    setHasSearch: setSearch,\n    toggleSearch: () => toggleSearch(!searchOpen),\n  }\n\n  return (\n    <header\n      className={clsx(\n        'nhsuk-header',\n        {\n          'nhsuk-header--transactional': transactional,\n          'nhsuk-header--organisation': orgName,\n          'nhsuk-header--white': white,\n        },\n        className,\n      )}\n      role={role}\n      {...rest}\n    >\n      <HeaderContext.Provider value={value}>{children}</HeaderContext.Provider>\n    </header>\n  )\n}\n\nHeader.Container = HeaderContainer\nHeader.Logo = Logo\nHeader.TransactionalLink = TransactionalServiceName\nHeader.MenuToggle = MenuToggle\nHeader.Content = HeaderContent\nHeader.Nav = HeaderNav\nHeader.NavItem = NavItem\nHeader.Search = Search\n\nHeader.displayName = 'Header'\nHeaderContainer.displayName = 'Header.Container'\nLogo.displayName = 'Header.Logo'\nTransactionalServiceName.displayName = 'Header.TransactionalLink'\nMenuToggle.displayName = 'Header.MenuToggle'\nHeaderContent.displayName = 'Header.Content'\nHeaderNav.displayName = 'Header.Nav'\nNavItem.displayName = 'Header.NavItem'\nSearch.displayName = 'Header.Search'\n\nexport default Header\n","import { useId } from 'react'\n\n/**\n * Generate a unique string with a prefix.\n *\n * @param prefix {string} - The prefix to use\n * @returns A unique string with the provided prefix\n *\n * @example\n * ```tsx\n * const id = useIdWithPrefix('my-id')\n * ```\n */\nconst useIdWithPrefix = (prefix: string) => `${prefix}_${useId()}`\n\nexport default useIdWithPrefix\n","import { HTMLProps, ReactNode, useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport useIdWithPrefix from '@/hooks/use-id-with-prefix'\nimport Label from '@/components/core/label/Label'\nimport ErrorMessage from '@/components/form-elements/error-message/ErrorMessage'\nimport Hint from '@/components/form-elements/hint/Hint'\nimport { useFieldsetContext } from '@/index'\nimport { FormElementProps } from '@/types/form-element-types'\n\ntype ExcludedProps =\n  | 'hint'\n  | 'label'\n  | 'labelProps'\n  | 'hintProps'\n  | 'errorProps'\n  | 'inputType'\n  | 'disableErrorLine'\n\ntype BaseFormElementRenderProps = {\n  error?: string | boolean\n} & HTMLProps<\n  HTMLInputElement | HTMLDivElement | HTMLSelectElement | HTMLTextAreaElement\n>\n\ntype FormElementRenderProps<T> = Omit<T, ExcludedProps> & {\n  id: string\n  name: string\n}\n\ntype FormGroupProps<T> = FormElementProps & {\n  render: (props: FormElementRenderProps<T>) => ReactNode\n  inputType:\n    | 'input'\n    | 'radios'\n    | 'select'\n    | 'checkboxes'\n    | 'dateinput'\n    | 'textarea'\n}\n\nconst FormGroup = <T extends BaseFormElementRenderProps>(\n  props: FormGroupProps<T>,\n): JSX.Element => {\n  const {\n    render,\n    hint,\n    label,\n    id,\n    labelProps,\n    error,\n    hintProps,\n    errorProps,\n    formGroupProps,\n    inputType,\n    disableErrorLine,\n    name,\n    ...rest\n  } = props\n\n  const [generatedId] = useState(useIdWithPrefix(inputType))\n  const { isFieldset, dispatch: dispatchFieldsetAction } = useFieldsetContext()\n\n  const elementId = id || generatedId\n  const labelId = `${elementId}--label`\n  const hintId = `${elementId}--hint`\n  const errorId = `${elementId}--error-message`\n\n  const renderProps = {\n    'aria-describedby': hint ? hintId : undefined,\n    'aria-labelledby': label ? labelId : undefined,\n    error,\n    name: name || elementId,\n    id: elementId,\n    ...rest,\n  } as FormElementRenderProps<T>\n\n  useEffect(() => {\n    if (!isFieldset) {\n      return\n    }\n\n    dispatchFieldsetAction({\n      type: 'set_error',\n      data: { id: elementId, error: Boolean(error) },\n    })\n\n    return () =>\n      dispatchFieldsetAction({\n        type: 'set_error',\n        data: { id: elementId, error: false },\n      })\n  }, [elementId, error, isFieldset])\n\n  useEffect(() => {\n    dispatchFieldsetAction({\n      type: 'register_component',\n      data: { id: elementId, unregister: false },\n    })\n    return () =>\n      dispatchFieldsetAction({\n        type: 'register_component',\n        data: { id: elementId, unregister: true },\n      })\n  }, [])\n\n  const { className: formGroupClass, ...formGroupRest } = formGroupProps || {}\n\n  return (\n    <div\n      className={clsx(\n        'nhsuk-form-group',\n        {\n          'nhsuk-form-group--error': !disableErrorLine && error,\n        },\n        formGroupClass,\n      )}\n      {...formGroupRest}\n    >\n      {label && (\n        <Label id={labelId} htmlFor={elementId} {...labelProps}>\n          {label}\n        </Label>\n      )}\n\n      {hint && (\n        <Hint id={hintId} htmlFor={elementId} {...hintProps}>\n          {hint}\n        </Hint>\n      )}\n\n      {error && typeof error === 'string' && (\n        <ErrorMessage id={errorId} htmlFor={elementId} {...errorProps}>\n          {error}\n        </ErrorMessage>\n      )}\n\n      {render(renderProps)}\n    </div>\n  )\n}\n\nFormGroup.displayName = 'FormGroup'\n\nexport default FormGroup\n","import { ActionBase } from '@/utils/reducer'\nimport { createContext, useContext } from 'react'\n\nexport type CheckboxesState = {\n  conditional: string[]\n}\n\nexport type SetConditionalAction = ActionBase<\n  'set_conditional',\n  { refId: string; hasConditional: boolean }\n>\n\nexport type CheckboxesReducer = (\n  state: CheckboxesState,\n  action: SetConditionalAction,\n) => CheckboxesState\n\nexport const reducer: CheckboxesReducer = (state, { type, data }) => {\n  switch (type) {\n    case 'set_conditional':\n      return {\n        ...state,\n        conditional: data.hasConditional\n          ? state.conditional\n              .filter(/* istanbul ignore next */ (id) => id !== data.refId)\n              .concat(data.refId)\n          : state.conditional.filter((id) => id !== data.refId),\n      }\n  }\n}\n\nexport type CheckboxesContextValue = {\n  name: string\n  dispatch: React.Dispatch<SetConditionalAction>\n  getCheckboxId: (reference: string) => string\n  leaseReference: () => string\n  releaseReference: (reference: string) => void\n}\n\nconst CheckboxesContext = createContext<CheckboxesContextValue>({\n  name: '',\n  dispatch: /* istanbul ignore next */ () => {},\n  getCheckboxId: /* istanbul ignore next */ () => '',\n  leaseReference: /* istanbul ignore next */ () => '',\n  releaseReference: /* istanbul ignore next */ () => {},\n})\n\nCheckboxesContext.displayName = 'CheckboxesContext'\n\nexport const useCheckboxesContext = () =>\n  useContext<CheckboxesContextValue>(CheckboxesContext)\n\nexport default CheckboxesContext\n","export const generateRandomString = (length: number = 8): string => {\n  return [...Array<string>(length)]\n    .map(() => Math.random().toString(36)[2])\n    .join('')\n}\n","import FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLProps,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useReducer,\n  useState,\n} from 'react'\nimport CheckboxesContext, {\n  CheckboxesContextValue,\n  reducer,\n  useCheckboxesContext,\n} from './CheckboxesContext'\nimport { generateRandomString } from '@/utils/random'\nimport Hint from '@/components/form-elements/hint'\nimport Label from '@/components/core/label/Label'\n\ntype Checkboxes = {\n  Box: typeof BoxForwardRef\n} & React.FC<CheckboxContainerProps>\n\ntype CheckboxContainerProps = {\n  idPrefix?: string\n} & HTMLProps<HTMLDivElement> &\n  FormElementProps\n\ntype CheckboxProps = {\n  conditional?: ReactNode\n  forceShowConditional?: boolean\n  conditionalWrapperProps?: HTMLProps<HTMLDivElement>\n} & Omit<HTMLProps<HTMLInputElement>, 'label'> &\n  Omit<\n    FormElementProps,\n    'error' | 'errorProps' | 'formGroupProps' | 'disableErrorLine'\n  >\n\nconst Box: ForwardRefRenderFunction<HTMLInputElement, CheckboxProps> = (\n  {\n    children,\n    className,\n    id,\n    hint,\n    hintProps,\n    labelProps,\n    conditional,\n    forceShowConditional,\n    conditionalWrapperProps,\n    checked,\n    defaultChecked,\n    onChange,\n    type = 'checkbox',\n    ...rest\n  },\n  ref,\n): JSX.Element => {\n  const { name, getCheckboxId, leaseReference, releaseReference, dispatch } =\n    useCheckboxesContext()\n\n  const [checkboxReference] = useState(leaseReference())\n  const [showConditional, setShowConditional] = useState<boolean>(\n    !!(checked || defaultChecked),\n  )\n  const inputId = id || getCheckboxId(checkboxReference)\n\n  const { className: labelClassName, ...labelRest } = labelProps || {}\n  const { className: hintClassName, ...hintRest } = hintProps || {}\n  const { className: conditionalClassName, ...conditionalRest } =\n    conditionalWrapperProps || {}\n\n  useEffect(() => {\n    return () => releaseReference(checkboxReference)\n  }, [])\n\n  useEffect(() => {\n    if (checked !== undefined) {\n      setShowConditional(checked)\n    }\n  }, [checked])\n\n  useEffect(() => {\n    dispatch({\n      type: 'set_conditional',\n      data: { refId: checkboxReference, hasConditional: Boolean(conditional) },\n    })\n\n    return () =>\n      dispatch({\n        type: 'set_conditional',\n        data: { refId: checkboxReference, hasConditional: false },\n      })\n  }, [conditional])\n\n  return (\n    <>\n      <div className={clsx('nhsuk-checkboxes__item', className)}>\n        <input\n          className=\"nhsuk-checkboxes__input\"\n          id={inputId}\n          name={name}\n          type={type}\n          checked={checked}\n          defaultChecked={defaultChecked}\n          ref={ref}\n          onChange={(ev) => {\n            if (checked === undefined) {\n              setShowConditional(ev.target.checked)\n            }\n\n            onChange?.(ev)\n          }}\n          {...rest}\n        />\n        {children && (\n          <Label\n            className={clsx('nhsuk-checkboxes__label', labelClassName)}\n            id={`${inputId}--label`}\n            htmlFor={inputId}\n            {...labelRest}\n          >\n            {children}\n          </Label>\n        )}\n        {hint && (\n          <Hint\n            className={clsx('nhsuk-checkboxes__hint', hintClassName)}\n            {...hintRest}\n          >\n            {hint}\n          </Hint>\n        )}\n      </div>\n      {conditional && (showConditional || forceShowConditional) && (\n        <div\n          className={clsx(\n            'nhsuk-checkboxes__conditional',\n            conditionalClassName,\n          )}\n          {...conditionalRest}\n        >\n          {conditional}\n        </div>\n      )}\n    </>\n  )\n}\n\n/**\n * A checkbox component that can be used within a `Checkboxes` component.\n *\n * @example\n * ```tsx\n * <Checkboxes.Box value=\"GP Practice\">GP Practice</Checkboxes.Box>\n * ```\n */\nconst BoxForwardRef = forwardRef(Box)\n\n/**\n * Use checkboxes to let users select 1 or more options on a form.\n *\n * For more information on when to use this component, got to the [NHS Digital service manual](https://beta.nhs.uk/service-manual/styles-components-patterns/checkboxes).\n *\n * @example\n * ```tsx\n * <Checkboxes label=\"Which services?\" name=\"fruit\">\n *  <Checkboxes.Box value=\"GP Practice\">GP Practice</Checkboxes.Box>\n *  <Checkboxes.Box value=\"Dentist\">Dentist</Checkboxes.Box>\n * </Checkboxes>\n * ```\n */\nconst Checkboxes: Checkboxes = ({\n  children,\n  idPrefix,\n  ...rest\n}): JSX.Element => {\n  let checkboxIds: Record<string, string> = {}\n  let checkboxReferences: string[] = []\n  let checkboxCount = 0\n\n  const [state, dispatch] = useReducer(reducer, { conditional: [] })\n\n  const getCheckboxId = useCallback((id: string, reference: string) => {\n    if (reference in checkboxIds) {\n      return checkboxIds[reference]\n    }\n\n    checkboxCount += 1\n    checkboxIds[reference] = `${idPrefix || id}-${checkboxCount}`\n    return checkboxIds[reference]\n  }, [])\n\n  const leaseReference = (): string => {\n    const reference = generateRandomString()\n\n    if (checkboxReferences.includes(reference)) {\n      return leaseReference()\n    }\n\n    checkboxReferences.push(reference)\n    return reference\n  }\n\n  const releaseReference = (reference: string): void => {\n    checkboxReferences = checkboxReferences.filter((ref) => ref !== reference)\n  }\n\n  const resetCheckboxes = (): void => {\n    checkboxIds = {}\n    checkboxCount = 0\n  }\n\n  return (\n    <FormGroup<CheckboxContainerProps>\n      {...rest}\n      inputType=\"checkboxes\"\n      render={({ id, name, className, ...renderProps }) => {\n        resetCheckboxes()\n        const contextValues: CheckboxesContextValue = {\n          name,\n          getCheckboxId: (reference) => getCheckboxId(id, reference),\n          leaseReference,\n          releaseReference,\n          dispatch,\n        }\n\n        return (\n          <div\n            className={clsx(\n              'nhsuk-checkboxes',\n              {\n                'nhsuk-checkboxes--conditional': state.conditional.length > 0,\n              },\n              className,\n            )}\n            id={id}\n            {...renderProps}\n          >\n            <CheckboxesContext.Provider value={contextValues}>\n              {children}\n            </CheckboxesContext.Provider>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nBoxForwardRef.displayName = 'Checkboxes.Box'\nCheckboxes.displayName = 'Checkboxes'\n\nCheckboxes.Box = BoxForwardRef\n\nexport default Checkboxes\n","import FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport { InputWidth } from '@/types/nhsuk-sizes'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLInputTypeAttribute,\n  HTMLProps,\n  forwardRef,\n} from 'react'\n\ntype InputProps = {\n  width?: InputWidth\n  type?: HTMLInputTypeAttribute\n} & Omit<HTMLProps<HTMLInputElement>, 'type'> &\n  FormElementProps\n\n/**\n * Use text input to let users enter a single line of text.\n *\n * For more information on when to use this component, go to the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/text-input).\n *\n * @example\n * ```tsx\n * <Input id=\"example\" label=\"Example\" />\n * ```\n */\nconst Input: ForwardRefRenderFunction<HTMLInputElement, InputProps> = (\n  props,\n  ref,\n): JSX.Element => {\n  return (\n    <FormGroup<InputProps>\n      {...props}\n      inputType=\"input\"\n      render={({\n        id,\n        name,\n        className,\n        error,\n        width,\n        type = 'text',\n        ...rest\n      }) => (\n        <input\n          id={id}\n          name={name}\n          className={clsx(\n            'nhsuk-input',\n            {\n              [`nhsuk-input--width-${width}`]: width,\n              'nhsuk-input--error': error,\n            },\n            className,\n          )}\n          type={type}\n          ref={ref}\n          {...rest}\n        />\n      )}\n    />\n  )\n}\n\nconst InputForwardRef = forwardRef(Input)\n\nInputForwardRef.displayName = 'Input'\n\nexport default InputForwardRef\n","import { ActionBase } from '@/utils/reducer'\nimport { createContext, useContext } from 'react'\n\nexport type RadiosState = {\n  selected: string\n  conditional: string[]\n}\n\nexport type SetConditionalAction = ActionBase<\n  'set_conditional',\n  { refId: string; hasConditional: boolean }\n>\nexport type SetSelectedAction = ActionBase<'set_selected', { refId: string }>\nexport type RadiosReducer = (\n  state: RadiosState,\n  action: SetConditionalAction | SetSelectedAction,\n) => RadiosState\n\nexport const reducer: RadiosReducer = (state, { type, data }) => {\n  switch (type) {\n    case 'set_conditional':\n      return {\n        ...state,\n        conditional: data.hasConditional\n          ? state.conditional\n              .filter(/* istanbul ignore next */ (id) => id !== data.refId)\n              .concat(data.refId)\n          : state.conditional.concat(data.refId),\n      }\n    case 'set_selected':\n      return {\n        ...state,\n        selected: data.refId,\n      }\n  }\n}\n\nexport type RadiosContextValue = {\n  name: string\n  selectedRadio: string\n  dispatch: React.Dispatch<SetConditionalAction | SetSelectedAction>\n  getRadioId: (reference: string) => string\n  leaseReference: () => string\n  releaseReference: (reference: string) => void\n}\n\nconst RadiosContext = createContext<RadiosContextValue>({\n  name: '',\n  selectedRadio: '',\n  dispatch: /* istanbul ignore next */ () => {},\n  getRadioId: /* istanbul ignore next */ () => '',\n  leaseReference: /* istanbul ignore next */ () => '',\n  releaseReference: /* istanbul ignore next */ () => {},\n})\n\nRadiosContext.displayName = 'RadiosContext'\n\nexport const useRadiosContext = () =>\n  useContext<RadiosContextValue>(RadiosContext)\n\nexport default RadiosContext\n","import Label from '@/components/core/label/Label'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLProps,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useReducer,\n  useState,\n} from 'react'\nimport RadiosContext, {\n  RadiosContextValue,\n  reducer,\n  useRadiosContext,\n} from './RadiosContext'\nimport Hint from '@/components/form-elements/hint'\nimport FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport { generateRandomString } from '@/utils/random'\n\ntype Radios = {\n  Divider: typeof Divider\n  Radio: typeof RadioForwardRef\n} & React.FC<RadioContainerProps>\n\ntype RadioProps = {\n  conditional?: ReactNode\n  forceShowConditional?: boolean\n  conditionalWrapperProps?: HTMLProps<HTMLDivElement>\n} & HTMLProps<HTMLInputElement> &\n  Omit<\n    FormElementProps,\n    'error' | 'errorProps' | 'formGroupProps' | 'disableErrorLine'\n  >\n\ntype RadioContainerProps = {\n  inline?: boolean\n  idPrefix?: string\n} & HTMLProps<HTMLDivElement> &\n  FormElementProps\n\nconst Divider: React.FC<HTMLProps<HTMLDivElement>> = ({\n  children,\n  className,\n  ...rest\n}): JSX.Element => {\n  return (\n    <div className={clsx('nhsuk-radios__divider', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n\nconst Radio: ForwardRefRenderFunction<HTMLInputElement, RadioProps> = (\n  {\n    children,\n    className,\n    id,\n    hint,\n    hintProps,\n    labelProps,\n    conditional,\n    forceShowConditional,\n    conditionalWrapperProps,\n    checked,\n    defaultChecked,\n    onChange,\n    type = 'radio',\n    ...rest\n  },\n  ref,\n): JSX.Element => {\n  const {\n    name,\n    getRadioId,\n    leaseReference,\n    releaseReference,\n    selectedRadio,\n    dispatch,\n  } = useRadiosContext()\n  const [radioReference] = useState<string>(leaseReference())\n  const inputId = id || getRadioId(radioReference)\n  const shouldShowConditional =\n    selectedRadio === radioReference && checked !== false\n\n  const { className: labelClassName, ...labelRest } = labelProps || {}\n  const { className: hintClassName, ...hintRest } = hintProps || {}\n  const { className: conditionalClassName, ...conditionalRest } =\n    conditionalWrapperProps || {}\n\n  const setSelected = (reference: string): void => {\n    dispatch({ type: 'set_selected', data: { refId: reference } })\n  }\n\n  useEffect(() => {\n    if (defaultChecked) {\n      setSelected(radioReference)\n    }\n\n    return () => releaseReference(radioReference)\n  }, [])\n\n  useEffect(() => {\n    if (checked) {\n      setSelected(radioReference)\n    }\n  }, [checked])\n\n  useEffect(() => {\n    dispatch({\n      type: 'set_conditional',\n      data: { refId: radioReference, hasConditional: Boolean(conditional) },\n    })\n\n    return () =>\n      dispatch({\n        type: 'set_conditional',\n        data: { refId: radioReference, hasConditional: false },\n      })\n  }, [conditional])\n\n  return (\n    <>\n      <div className={clsx('nhsuk-radios__item', className)}>\n        <input\n          className=\"nhsuk-radios__input\"\n          id={inputId}\n          name={name}\n          type={type}\n          checked={checked}\n          defaultChecked={defaultChecked}\n          ref={ref}\n          onChange={(ev) => {\n            setSelected(radioReference)\n            onChange?.(ev)\n          }}\n          {...rest}\n        />\n        {children && (\n          <Label\n            className={clsx('nhsuk-radios__label', labelClassName)}\n            id={`${inputId}--label`}\n            htmlFor={inputId}\n            {...labelRest}\n          >\n            {children}\n          </Label>\n        )}\n        {hint && (\n          <Hint\n            className={clsx('nhsuk-radios__hint', hintClassName)}\n            id={`${inputId}--hint`}\n            {...hintRest}\n          >\n            {hint}\n          </Hint>\n        )}\n      </div>\n      {conditional && (shouldShowConditional || forceShowConditional) && (\n        <div\n          className={clsx('nhsuk-radios__conditional', conditionalClassName)}\n          id={`${inputId}--conditional`}\n          {...conditionalRest}\n        >\n          {conditional}\n        </div>\n      )}\n    </>\n  )\n}\n\n/**\n * Radio component that renders a single radio input.\n *\n * @param {RadioProps} props - The props to be passed to the radio input.\n * @param {React.ForwardedRef<HTMLInputElement>} ref - Optional ref to be passed to the radio input.\n *\n * @example\n * ```tsx\n * <Radios.Radio value=\"yes\" hint=\"some hint\">\n *  Yes\n * </Radios.Radio>\n * ```\n */\nconst RadioForwardRef = forwardRef(Radio)\n\n/**\n * Use radios when you want users to select only 1 option from a list.\n *\n * For more information on when to use this component, go to the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/radios).\n *\n * @example\n * ```tsx\n * <Radios label=\"Do you have any allergies?\">\n *  <Radios.Radio value=\"yes\" hint=\"some hint\">\n *   Yes\n *  </Radios.Radio>\n *  <Radios.Radio value=\"no\">No</Radios.Radio>\n * </Radios>\n * ```\n */\nconst Radios: Radios = ({ children, ...rest }): JSX.Element => {\n  let radioIds: Record<string, string> = {}\n  let radioReferences: string[] = []\n  let radioCount = 0\n\n  const [state, dispatch] = useReducer(reducer, {\n    selected: '',\n    conditional: [],\n  })\n\n  const getRadioId = useCallback((id: string, reference: string) => {\n    if (reference in radioIds) {\n      return radioIds[reference]\n    }\n\n    radioCount += 1\n    radioIds[reference] = `${rest.idPrefix || id}-${radioCount}`\n    return radioIds[reference]\n  }, [])\n\n  const leaseReference = (): string => {\n    const reference = generateRandomString()\n\n    if (radioReferences.includes(reference)) {\n      return leaseReference()\n    }\n\n    radioReferences.push(reference)\n    return reference\n  }\n\n  const releaseReference = (reference: string): void => {\n    radioReferences = radioReferences.filter((ref) => ref !== reference)\n  }\n\n  const resetRadios = (): void => {\n    radioIds = {}\n    radioCount = 0\n  }\n\n  return (\n    <FormGroup<RadioContainerProps>\n      {...rest}\n      inputType=\"radios\"\n      render={({ id, name, inline, className, ...renderRest }) => {\n        resetRadios()\n\n        const radiosContextValue: RadiosContextValue = {\n          name,\n          getRadioId: (reference) => getRadioId(id, reference),\n          selectedRadio: state.selected,\n          leaseReference,\n          releaseReference,\n          dispatch,\n        }\n\n        return (\n          <div\n            className={clsx(\n              'nhsuk-radios',\n              { 'nhsuk-radios--inline': inline },\n              className,\n            )}\n            id={id}\n            {...renderRest}\n          >\n            <RadiosContext.Provider value={radiosContextValue}>\n              {children}\n            </RadiosContext.Provider>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nDivider.displayName = 'Radios.Divider'\nRadioForwardRef.displayName = 'Radios.Radio'\nRadios.displayName = 'Radios'\n\nRadios.Divider = Divider\nRadios.Radio = RadioForwardRef\n\nexport default Radios\n","import FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport {\n  ForwardRefExoticComponent,\n  ForwardRefRenderFunction,\n  HTMLProps,\n  RefAttributes,\n  forwardRef,\n} from 'react'\nimport clsx from 'clsx'\n\ntype Select = {\n  Option: React.FC<OptionProps>\n} & ForwardRefExoticComponent<Omit<SelectProps, 'ref'>> &\n  RefAttributes<HTMLSelectElement>\n\ntype SelectProps = HTMLProps<HTMLSelectElement> & FormElementProps\ntype OptionProps = HTMLProps<HTMLOptionElement>\n\n/**\n * To be used as a child of the Select component.\n */\nconst Option: React.FC<OptionProps> = ({ children, ...rest }): JSX.Element => {\n  return <option {...rest}>{children}</option>\n}\n\nconst Select: ForwardRefRenderFunction<HTMLSelectElement, SelectProps> = (\n  { children, ...rest },\n  ref,\n): JSX.Element => {\n  return (\n    <FormGroup<SelectProps>\n      {...rest}\n      inputType=\"select\"\n      render={({ id, name, className, error, ...renderRest }) => (\n        <select\n          id={id}\n          name={name}\n          className={clsx(\n            'nhsuk-select',\n            { 'nhsuk-select--error': error },\n            className,\n          )}\n          ref={ref}\n          {...renderRest}\n        >\n          {children}\n        </select>\n      )}\n    />\n  )\n}\n\n/**\n * Use select to let users choose an option from a long list but only use it as a last resort.\n *\n * For more information on when to use this component, go to the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/select).\n *\n * @link https://service-manual.nhs.uk/design-system/components/select\n *\n * @example\n * ```tsx\n * <Select label=\"Choose a country\">\n *  <Select.Option value=\"england\">England</Select.Option>\n *  <Select.Option value=\"northern-ireland\">Northern Ireland</Select.Option>\n *  <Select.Option value=\"scotland\">Scotland</Select.Option>\n *  <Select.Option value=\"wales\">Wales</Select.Option>\n *  <Select.Option value=\"channel-islands\">Channel Islands</Select.Option>\n *  <Select.Option value=\"isle-of-man\">Isle of Man</Select.Option>\n * </Select>\n * ```\n */\nconst SelectForwardRef = forwardRef(Select) as Select\n\nSelectForwardRef.displayName = 'Select'\nOption.displayName = 'Select.Option'\n\nSelectForwardRef.Option = Option\n\nexport default SelectForwardRef\n","import FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport clsx from 'clsx'\nimport { ForwardRefRenderFunction, HTMLProps, forwardRef } from 'react'\n\ntype TextareaProps = Omit<HTMLProps<HTMLTextAreaElement>, 'width'> &\n  FormElementProps\n\nconst Textarea: ForwardRefRenderFunction<HTMLTextAreaElement, TextareaProps> = (\n  props,\n  ref,\n): JSX.Element => {\n  return (\n    <FormGroup<TextareaProps>\n      {...props}\n      inputType=\"textarea\"\n      render={({ id, name, error, className, rows, ...rest }) => (\n        <textarea\n          id={id}\n          name={name}\n          className={clsx(\n            'nhsuk-textarea',\n            {\n              'nhsuk-textarea--error': error,\n            },\n            className,\n          )}\n          ref={ref}\n          rows={rows}\n          {...rest}\n        />\n      )}\n    />\n  )\n}\n\n/**\n * Use textarea to let users enter more than 1 line of text.\n *\n * For more information on when to use this component, go to the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/textarea).\n *\n * @param {TextareaProps} props - The props of the component.\n * @param {React.ForwardedRef<HTMLTextAreaElement>} ref - Optional ref to be passed to the textarea.\n *\n * @example\n * ```tsx\n * <Textarea id=\"example\" label=\"Example\" />\n * ```\n */\nconst TextareaForwardRef = forwardRef(Textarea)\n\nTextareaForwardRef.displayName = 'Textarea'\n\nexport default TextareaForwardRef\n","import clxs from 'clsx'\nimport { HTMLProps } from 'react'\n\nexport type ColumnWidth =\n  | 'full'\n  | 'one-half'\n  | 'one-third'\n  | 'two-thirds'\n  | 'one-quarter'\n  | 'three-quarters'\n\ntype ColumnProps = {\n  width?: ColumnWidth\n} & HTMLProps<HTMLDivElement>\n\nconst Column: React.FC<ColumnProps> = ({\n  children,\n  className,\n  width = 'full',\n  ...rest\n}) => {\n  return (\n    <div className={clxs(`nhsuk-grid-column-${width}`, className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n\nColumn.displayName = 'Column'\n\nexport default Column\n","import clsx from 'clsx'\n\ntype MainProps = {\n  size?: 's' | 'l'\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst Main: React.FC<MainProps> = ({\n  children,\n  className,\n  size,\n  role = 'main',\n  ...rest\n}) => {\n  return (\n    <main\n      className={clsx(\n        'nhsuk-main-wrapper',\n        { [`nhsuk-main-wrapper--${size}`]: size },\n        className,\n      )}\n      role={role}\n      {...rest}\n    >\n      {children}\n    </main>\n  )\n}\n\nMain.displayName = 'Main'\n\nexport default Main\n","import clsx from 'clsx'\nimport { HTMLProps } from 'react'\n\ntype RowProps = HTMLProps<HTMLDivElement>\n\nconst Row: React.FC<RowProps> = ({ children, className, ...rest }) => {\n  return (\n    <div className={clsx('nhsuk-grid-row', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n\nRow.displayName = 'Row'\n\nexport default Row\n"],"names":["HeaderContext","createContext","useHeaderContext","useContext","NhsLogo","className","height","width","rest","jsxs","clsx","jsx","Logo","Component","orgName","orgDescriptor","orgSplit","serviceName","transactional","hasMenuToggle","hasSearch","label","Fragment","TransactionalServiceName","MenuToggle","onClick","toggleMenu","setHasMenuToggle","menuOpen","onToggleClick","e","useEffect","HeaderContainer","children","Container","HeaderContent","id","searchOpen","HeaderNav","open","role","containerProps","CloseIcon","NavItem","mobileOnly","ChevronRightIcon","Search","action","method","type","autoComplete","placeholder","visuallyHiddenText","toggleProps","submitProps","closeProps","toggleSearch","setHasSearch","SearchIcon","Header","white","setMenuToggle","useState","setSearch","value","useIdWithPrefix","prefix","useId","FormGroup","props","render","hint","labelProps","error","hintProps","errorProps","formGroupProps","inputType","disableErrorLine","name","generatedId","isFieldset","dispatchFieldsetAction","useFieldsetContext","elementId","labelId","hintId","errorId","renderProps","formGroupClass","formGroupRest","Label","Hint","ErrorMessage","reducer","state","data","CheckboxesContext","useCheckboxesContext","generateRandomString","length","Box","conditional","forceShowConditional","conditionalWrapperProps","checked","defaultChecked","onChange","ref","getCheckboxId","leaseReference","releaseReference","dispatch","checkboxReference","showConditional","setShowConditional","inputId","labelClassName","labelRest","hintClassName","hintRest","conditionalClassName","conditionalRest","ev","BoxForwardRef","forwardRef","Checkboxes","idPrefix","checkboxIds","checkboxReferences","checkboxCount","useReducer","useCallback","reference","resetCheckboxes","contextValues","Input","InputForwardRef","RadiosContext","useRadiosContext","Divider","Radio","getRadioId","selectedRadio","radioReference","shouldShowConditional","setSelected","RadioForwardRef","Radios","radioIds","radioReferences","radioCount","resetRadios","inline","renderRest","radiosContextValue","Option","Select","SelectForwardRef","Textarea","rows","TextareaForwardRef","Column","clxs","Main","size","Row"],"mappings":"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"}