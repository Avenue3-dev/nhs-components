{"version":3,"file":"Textarea-fb09354c.js","sources":["../../src/hooks/use-id-with-prefix.ts","../../src/components/form-elements/input/Input.tsx","../../src/components/form-elements/radios/RadiosContext.ts","../../src/utils/random.ts","../../src/components/form-elements/radios/Radios.tsx","../../src/components/miscellaneous/form-group/FormGroup.tsx","../../src/components/form-elements/textarea/Textarea.tsx"],"sourcesContent":["import { useId } from 'react'\n\n/**\n * Generate a unique string with a prefix.\n *\n * @param prefix {string} - The prefix to use\n * @returns A unique string with the provided prefix\n *\n * @example\n * ```tsx\n * const id = useIdWithPrefix('my-id')\n * ```\n */\nconst useIdWithPrefix = (prefix: string) => `${prefix}_${useId()}`\n\nexport default useIdWithPrefix\n","import FormGroup from '@/components/miscellaneous/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport { InputWidth } from '@/types/nhsuk-sizes'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLInputTypeAttribute,\n  HTMLProps,\n  forwardRef,\n} from 'react'\n\ntype InputProps = {\n  width?: InputWidth\n  type?: HTMLInputTypeAttribute\n} & Omit<HTMLProps<HTMLInputElement>, 'type'> &\n  FormElementProps\n\n/**\n * Use text input to let users enter a single line of text.\n *\n * For more information on when to use this component, go the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/text-input).\n *\n * @example\n * ```tsx\n * <Input id=\"example\" label=\"Example\" />\n * ```\n */\nconst Input: ForwardRefRenderFunction<HTMLInputElement, InputProps> = (\n  props,\n  ref,\n): JSX.Element => {\n  return (\n    <FormGroup<InputProps>\n      {...props}\n      inputType=\"input\"\n      render={({\n        id,\n        name,\n        className,\n        error,\n        width,\n        type = 'text',\n        ...rest\n      }) => (\n        <input\n          id={id}\n          name={name}\n          className={clsx(\n            'nhsuk-input',\n            {\n              [`nhsuk-input--width-${width}`]: width,\n              'nhsuk-input--error': error,\n            },\n            className,\n          )}\n          type={type}\n          ref={ref}\n          {...rest}\n        />\n      )}\n    />\n  )\n}\n\nconst InputForwardRef = forwardRef(Input)\n\nInputForwardRef.displayName = 'Input'\n\nexport default InputForwardRef\n","import { ActionBase } from '@/utils/reducer'\nimport { createContext, useContext } from 'react'\n\nexport type RadiosState = {\n  selected: string\n  conditional: string[]\n}\n\nexport type SetConditionalAction = ActionBase<\n  'set_conditional',\n  { refId: string; hasConditional: boolean }\n>\nexport type SetSelectedAction = ActionBase<'set_selected', { refId: string }>\nexport type RadiosReducer = (\n  state: RadiosState,\n  action: SetConditionalAction | SetSelectedAction,\n) => RadiosState\n\nexport const reducer: RadiosReducer = (state, { type, data }) => {\n  switch (type) {\n    case 'set_conditional':\n      return {\n        ...state,\n        conditional: data.hasConditional\n          ? state.conditional\n              .filter((id) => id !== data.refId)\n              .concat(data.refId)\n          : state.conditional.concat(data.refId),\n      }\n    case 'set_selected':\n      return {\n        ...state,\n        selected: data.refId,\n      }\n  }\n}\n\nexport type RadiosContextValue = {\n  name: string\n  selectedRadio: string\n  dispatch: React.Dispatch<SetConditionalAction | SetSelectedAction>\n  getRadioId: (reference: string) => string\n  leaseReference: () => string\n  releaseReference: (reference: string) => void\n}\n\nconst RadiosContext = createContext<RadiosContextValue>({\n  name: '',\n  selectedRadio: '',\n  dispatch: () => {},\n  getRadioId: () => '',\n  leaseReference: () => '',\n  releaseReference: () => {},\n})\n\nRadiosContext.displayName = 'RadiosContext'\n\nexport const useRadiosContext = () =>\n  useContext<RadiosContextValue>(RadiosContext)\n\nexport default RadiosContext\n","export const generateRandomString = (length: number = 8): string => {\n  return [...Array<string>(length)]\n    .map(() => Math.random().toString(36)[2])\n    .join('')\n}\n","import Label from '@/components/miscellaneous/label/Label'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLProps,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useReducer,\n  useState,\n} from 'react'\nimport RadiosContext, {\n  RadiosContextValue,\n  reducer,\n  useRadiosContext,\n} from './RadiosContext'\nimport Hint from '@/components/form-elements/hint'\nimport FormGroup from '@/components/miscellaneous/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport { generateRandomString } from '@/utils/random'\n\ntype Radios = {\n  Divider: typeof Divider\n  Radio: typeof RadioForwardRef\n} & React.FC<RadioContainerProps>\n\ntype RadioProps = {\n  conditional?: ReactNode\n  forceShowConditional?: boolean\n  conditionalWrapperProps?: HTMLProps<HTMLDivElement>\n} & HTMLProps<HTMLInputElement> &\n  Omit<\n    FormElementProps,\n    'error' | 'errorProps' | 'formGroupProps' | 'disableErrorLine'\n  >\n\ntype RadioContainerProps = {\n  inline?: boolean\n  idPrefix?: string\n} & HTMLProps<HTMLDivElement> &\n  FormElementProps\n\nconst Divider: React.FC<HTMLProps<HTMLDivElement>> = ({\n  children,\n  className,\n  ...rest\n}): JSX.Element => {\n  return (\n    <div className={clsx('nhsuk-radios__divider', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n\n/**\n * Radio component that renders a single radio input.\n *\n * @param {RadioProps} props - The props to be passed to the radio input.\n * @param {React.ForwardedRef<HTMLInputElement>} ref - Optional ref to be passed to the radio input.\n *\n * @example\n * ```tsx\n * <Radios.Radio value=\"yes\" hint=\"some hint\">\n *  Yes\n * </Radios.Radio>\n * ```\n */\nconst Radio: ForwardRefRenderFunction<HTMLInputElement, RadioProps> = (\n  {\n    children,\n    className,\n    id,\n    hint,\n    hintProps,\n    labelProps,\n    conditional,\n    forceShowConditional,\n    conditionalWrapperProps,\n    checked,\n    defaultChecked,\n    type = 'radio',\n    ...rest\n  },\n  ref,\n): JSX.Element => {\n  const {\n    name,\n    getRadioId,\n    leaseReference,\n    releaseReference,\n    selectedRadio,\n    dispatch,\n  } = useRadiosContext()\n  const [radioReference] = useState<string>(leaseReference())\n  const inputId = id || getRadioId(radioReference)\n  const shouldShowConditional =\n    selectedRadio === radioReference && checked !== false\n\n  const setSelected = (reference: string): void => {\n    dispatch({ type: 'set_selected', data: { refId: reference } })\n  }\n\n  useEffect(() => {\n    if (defaultChecked) {\n      setSelected(radioReference)\n    }\n\n    return () => releaseReference(radioReference)\n  }, [])\n\n  useEffect(() => {\n    if (checked) {\n      setSelected(radioReference)\n    }\n  }, [checked])\n\n  useEffect(() => {\n    dispatch({\n      type: 'set_conditional',\n      data: { refId: radioReference, hasConditional: Boolean(conditional) },\n    })\n    return () =>\n      dispatch({\n        type: 'set_conditional',\n        data: { refId: radioReference, hasConditional: false },\n      })\n  }, [conditional])\n\n  return (\n    <>\n      <div className={clsx('nhsuk-radios__item', className)}>\n        <input\n          className=\"nhsuk-radios__input\"\n          id={inputId}\n          name={name}\n          type={type}\n          checked={checked}\n          ref={ref}\n          onChange={() => {\n            setSelected(radioReference)\n          }}\n          {...rest}\n        />\n        {children && (\n          <Label\n            className=\"nhsuk-radios__label\"\n            id={`${inputId}--label`}\n            htmlFor={inputId}\n            {...labelProps}\n          >\n            {children}\n          </Label>\n        )}\n        {hint && (\n          <Hint\n            className=\"nhsuk-radios__hint\"\n            id={`${inputId}--hint`}\n            {...hintProps}\n          >\n            {hint}\n          </Hint>\n        )}\n      </div>\n      {conditional && (shouldShowConditional || forceShowConditional) && (\n        <div\n          className=\"nhsuk-radios__conditional\"\n          id={`${inputId}--conditional`}\n          {...conditionalWrapperProps}\n        >\n          {conditional}\n        </div>\n      )}\n    </>\n  )\n}\n\nconst RadioForwardRef = forwardRef(Radio)\n\n/**\n * Use radios when you want users to select only 1 option from a list.\n *\n * For more information on when to use this component, go the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/radios).\n *\n * @example\n * ```tsx\n * <Radios label=\"Do you have any allergies?\">\n *  <Radios.Radio value=\"yes\" hint=\"some hint\">\n *   Yes\n *  </Radios.Radio>\n *  <Radios.Radio value=\"no\">No</Radios.Radio>\n * </Radios>\n * ```\n */\nconst Radios: Radios = ({ children, ...rest }): JSX.Element => {\n  let radioIds: Record<string, string> = {}\n  let radioReferences: string[] = []\n  let radioCount = 0\n\n  const [state, dispatch] = useReducer(reducer, {\n    selected: '',\n    conditional: [],\n  })\n\n  const getRadioId = useCallback((id: string, reference: string) => {\n    if (reference in radioIds) {\n      return radioIds[reference]\n    }\n\n    radioCount += 1\n    radioIds[reference] = `${rest.idPrefix || id}-${radioCount}`\n    return radioIds[reference]\n  }, [])\n\n  const leaseReference = (): string => {\n    const reference = generateRandomString()\n\n    if (radioReferences.includes(reference)) {\n      return leaseReference()\n    }\n\n    radioReferences.push(reference)\n    return reference\n  }\n\n  const releaseReference = (reference: string): void => {\n    radioReferences = radioReferences.filter((ref) => ref !== reference)\n  }\n\n  const resetRadios = (): void => {\n    radioIds = {}\n    radioCount = 0\n  }\n\n  return (\n    <FormGroup<RadioContainerProps>\n      {...rest}\n      inputType=\"radios\"\n      render={({ id, name, inline, className, ...renderRest }) => {\n        resetRadios()\n\n        const radiosContextValue: RadiosContextValue = {\n          name,\n          getRadioId: (reference) => getRadioId(id, reference),\n          selectedRadio: state.selected,\n          leaseReference,\n          releaseReference,\n          dispatch,\n        }\n\n        return (\n          <div\n            className={clsx(\n              'nhsuk-radios',\n              { 'nhsuk-radios--inline': inline },\n              className,\n            )}\n            id={id}\n            {...renderRest}\n          >\n            <RadiosContext.Provider value={radiosContextValue}>\n              {children}\n            </RadiosContext.Provider>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nDivider.displayName = 'Radios.Divider'\nRadioForwardRef.displayName = 'Radios.Radio'\nRadios.displayName = 'Radios'\n\nRadios.Divider = Divider\nRadios.Radio = RadioForwardRef\n\nexport default Radios\n","import { HTMLProps, ReactNode, useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport useIdWithPrefix from '@/hooks/use-id-with-prefix'\nimport Label from '@/components/miscellaneous/label/Label'\nimport ErrorMessage from '@/components/form-elements/error-message/ErrorMessage'\nimport Hint from '@/components/form-elements/hint/Hint'\nimport { useFieldsetContext } from '@/index'\nimport { FormElementProps } from '@/types/form-element-types'\n\ntype ExcludedProps =\n  | 'hint'\n  | 'label'\n  | 'labelProps'\n  | 'hintProps'\n  | 'errorProps'\n  | 'inputType'\n  | 'disableErrorLine'\n\ntype BaseFormElementRenderProps = {\n  error?: string | boolean\n} & HTMLProps<\n  HTMLInputElement | HTMLDivElement | HTMLSelectElement | HTMLTextAreaElement\n>\n\ntype FormElementRenderProps<T> = Omit<T, ExcludedProps> & {\n  id: string\n  name: string\n}\n\ntype FormGroupProps<T> = FormElementProps & {\n  render: (props: FormElementRenderProps<T>) => ReactNode\n  inputType:\n    | 'input'\n    | 'radios'\n    | 'select'\n    | 'checkboxes'\n    | 'dateinput'\n    | 'textarea'\n}\n\nconst FormGroup = <T extends BaseFormElementRenderProps>(\n  props: FormGroupProps<T>,\n): JSX.Element => {\n  const {\n    render,\n    hint,\n    label,\n    id,\n    labelProps,\n    error,\n    hintProps,\n    errorProps,\n    formGroupProps,\n    inputType,\n    disableErrorLine,\n    name,\n    ...rest\n  } = props\n\n  const [generatedId] = useState(useIdWithPrefix(inputType))\n  const { isFieldset, dispatch: dispatchFieldsetAction } = useFieldsetContext()\n\n  const elementId = id || generatedId\n  const labelId = `${elementId}--label`\n  const hintId = `${elementId}--hint`\n  const errorId = `${elementId}--error-message`\n\n  const renderProps = {\n    'aria-describedby': hint ? hintId : undefined,\n    'aria-labelledby': label ? labelId : undefined,\n    error,\n    name: name || elementId,\n    id: elementId,\n    ...rest,\n  } as FormElementRenderProps<T>\n\n  useEffect(() => {\n    if (!isFieldset) {\n      return\n    }\n\n    dispatchFieldsetAction({\n      type: 'set_error',\n      data: { id: elementId, error: Boolean(error) },\n    })\n\n    return () =>\n      dispatchFieldsetAction({\n        type: 'set_error',\n        data: { id: elementId, error: false },\n      })\n  }, [elementId, error, isFieldset])\n\n  useEffect(() => {\n    dispatchFieldsetAction({\n      type: 'register_component',\n      data: { id: elementId, unregister: false },\n    })\n    return () =>\n      dispatchFieldsetAction({\n        type: 'register_component',\n        data: { id: elementId, unregister: true },\n      })\n  }, [])\n\n  const { className: formGroupClass, ...formGroupRest } = formGroupProps || {}\n\n  return (\n    <div\n      className={clsx(\n        'nhsuk-form-group',\n        {\n          'nhsuk-form-group--error': !disableErrorLine && error,\n        },\n        formGroupClass,\n      )}\n      {...formGroupRest}\n    >\n      {label && (\n        <Label id={labelId} htmlFor={elementId} {...labelProps}>\n          {label}\n        </Label>\n      )}\n\n      {hint && (\n        <Hint id={hintId} htmlFor={elementId} {...hintProps}>\n          {hint}\n        </Hint>\n      )}\n\n      {error && typeof error === 'string' && (\n        <ErrorMessage id={errorId} htmlFor={elementId} {...errorProps}>\n          {error}\n        </ErrorMessage>\n      )}\n\n      {render(renderProps)}\n    </div>\n  )\n}\n\nFormGroup.displayName = 'FormGroup'\n\nexport default FormGroup\n","import FormGroup from '@/components/miscellaneous/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport clsx from 'clsx'\nimport { ForwardRefRenderFunction, HTMLProps, forwardRef } from 'react'\n\ntype TextareaProps = Omit<HTMLProps<HTMLTextAreaElement>, 'width'> &\n  FormElementProps\n\nconst Textarea: ForwardRefRenderFunction<HTMLTextAreaElement, TextareaProps> = (\n  props,\n  ref,\n): JSX.Element => {\n  return (\n    <FormGroup<TextareaProps>\n      {...props}\n      inputType=\"textarea\"\n      render={({ id, name, error, className, rows, ...rest }) => (\n        <textarea\n          id={id}\n          name={name}\n          className={clsx(\n            'nhsuk-textarea',\n            {\n              'nhsuk-textarea--error': error,\n            },\n            className,\n          )}\n          ref={ref}\n          rows={rows}\n          {...rest}\n        />\n      )}\n    />\n  )\n}\n\n/**\n * Use textarea to let users enter more than 1 line of text.\n *\n * For more information on when to use this component, go the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/textarea).\n *\n * @param {TextareaProps} props - The props of the component.\n * @param {React.ForwardedRef<HTMLTextAreaElement>} ref - Optional ref to be passed to the textarea.\n *\n * @example\n * ```tsx\n * <Textarea id=\"example\" label=\"Example\" />\n * ```\n */\nconst TextareaForwardRef = forwardRef(Textarea)\n\nTextareaForwardRef.displayName = 'Textarea'\n\nexport default TextareaForwardRef\n"],"names":["useIdWithPrefix","prefix","useId","Input","props","ref","jsx","FormGroup","id","name","className","error","width","type","rest","clsx","InputForwardRef","forwardRef","reducer","state","data","RadiosContext","createContext","useRadiosContext","useContext","generateRandomString","length","Divider","children","Radio","hint","hintProps","labelProps","conditional","forceShowConditional","conditionalWrapperProps","checked","defaultChecked","getRadioId","leaseReference","releaseReference","selectedRadio","dispatch","radioReference","useState","inputId","shouldShowConditional","setSelected","reference","useEffect","jsxs","Fragment","Label","Hint","RadioForwardRef","Radios","radioIds","radioReferences","radioCount","useReducer","useCallback","resetRadios","inline","renderRest","radiosContextValue","render","label","errorProps","formGroupProps","inputType","disableErrorLine","generatedId","isFieldset","dispatchFieldsetAction","useFieldsetContext","elementId","labelId","hintId","errorId","renderProps","formGroupClass","formGroupRest","ErrorMessage","Textarea","rows","TextareaForwardRef"],"mappings":"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"}