{"version":3,"file":"DateInput-757fdbe9.js","sources":["../../../../packages/nhsuk-frontend-react/src/lib/components/form-elements/date-input/DateInputContext.ts","../../../../packages/nhsuk-frontend-react/src/lib/components/form-elements/date-input/DateInput.tsx"],"sourcesContent":["import { ChangeEvent, createContext, useContext } from 'react'\nimport { DateInputValue, DateInputPart } from './DateInput'\n\nexport type DateInputContextValue = {\n  id: string\n  name: string\n  error?: string | boolean\n  value?: Partial<DateInputValue>\n  defaultValue?: Partial<DateInputValue>\n  handleChange: (\n    field: DateInputPart,\n    event: ChangeEvent<HTMLInputElement>,\n  ) => void\n  registerInput: (field: DateInputPart, input: HTMLInputElement | null) => void\n}\n\nexport const DateInputContext = createContext<DateInputContextValue>({\n  id: '',\n  name: '',\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  handleChange: /* istanbul ignore next */ () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  registerInput: /* istanbul ignore next */ () => {},\n})\n\nDateInputContext.displayName = 'DateInputContext'\n\nexport const useDateInputContext = () => useContext(DateInputContext)\n","import FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport clsx from 'clsx'\nimport {\n  ChangeEvent,\n  ForwardRefRenderFunction,\n  HTMLProps,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport {\n  DateInputContext,\n  DateInputContextValue,\n  useDateInputContext,\n} from './DateInputContext'\nimport Label, { LabelProps } from '@/components/core/label/Label'\n\nexport type DateInputPart = 'day' | 'month' | 'year'\n\nexport type DateInputValue = {\n  day: string\n  month: string\n  year: string\n}\n\nexport type DateInputChangeEvent = ChangeEvent<HTMLInputElement> & {\n  target: HTMLInputElement & { value: DateInputValue }\n  currentTarget: HTMLInputElement & { value: DateInputValue }\n}\n\ntype DateInputProps = {\n  autoSelectNext?: boolean\n  value?: Partial<DateInputValue>\n  defaultValue?: Partial<DateInputValue>\n  onChange?: (event: DateInputChangeEvent) => void\n} & Omit<HTMLProps<HTMLDivElement>, 'value' | 'defaultValue' | 'ref'> &\n  FormElementProps\n\nconst dayPartLabels: Record<DateInputPart, string> = {\n  day: 'Day',\n  month: 'Month',\n  year: 'Year',\n}\n\ntype DatePartProps = {\n  labelProps?: LabelProps\n  part: DateInputPart\n  error?: boolean\n} & Omit<HTMLProps<HTMLDivElement>, 'type'>\n\ntype DateInput = {\n  Day: typeof Day\n  Month: typeof Month\n  Year: typeof Year\n} & React.FC<DateInputProps>\n\nconst DatePart: ForwardRefRenderFunction<\n  HTMLInputElement,\n  Omit<DatePartProps, 'ref'>\n> = (\n  {\n    id,\n    className,\n    name,\n    onChange,\n    labelProps = {},\n    label,\n    part,\n    error,\n    value,\n    defaultValue,\n    ...rest\n  },\n  ref,\n): JSX.Element => {\n  const {\n    id: ctxId,\n    name: ctxName,\n    value: ctxValue,\n    defaultValue: ctxDefaultValue,\n    registerInput,\n    handleChange: ctxHandleChange,\n  } = useDateInputContext()\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    event.persist()\n    onChange?.(event)\n    if (!event.isPropagationStopped()) {\n      ctxHandleChange(part, event)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const passedRef = ref as ((element: HTMLInputElement | null) => void) | null\n\n  const registerRef = (element: HTMLInputElement | null) => {\n    registerInput(part, element)\n    passedRef?.(element)\n  }\n\n  const inputValue = value ?? ctxValue?.[part]\n  const inputDefaultValue = defaultValue ?? ctxDefaultValue?.[part]\n\n  const inputId = id || `${ctxId}-${part}`\n  const inputName = name || `${ctxName}-${part}`\n  const labelId = `${inputId}--label`\n\n  const {\n    className: labelClassName,\n    id: labelIdProp,\n    ...restLabelProps\n  } = labelProps\n  return (\n    <div className=\"nhsuk-date-input__item\">\n      <div className=\"nhsuk-form-group\">\n        <Label\n          className={clsx('nhsuk-date-input__label', labelClassName)}\n          id={labelId}\n          htmlFor={inputId}\n          {...restLabelProps}\n        >\n          {label || dayPartLabels[part]}\n        </Label>\n        <input\n          className={clsx(\n            'nhsuk-input nhsuk-date-input__input',\n            {\n              'nhsuk-input--width-2': part !== 'year',\n              'nhsuk-input--width-4': part === 'year',\n              'nhsuk-input--error': error || false,\n            },\n            className,\n          )}\n          id={inputId}\n          value={inputValue}\n          defaultValue={inputDefaultValue}\n          aria-labelledby={labelIdProp || labelIdProp}\n          name={inputName}\n          onChange={handleChange}\n          ref={registerRef}\n          {...rest}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst ForwardRefDatePart = forwardRef(DatePart)\n\nconst Day = forwardRef<HTMLInputElement, Omit<DatePartProps, 'ref' | 'part'>>(\n  (props, ref) => <ForwardRefDatePart {...props} part=\"day\" ref={ref} />,\n)\n\nconst Month = forwardRef<HTMLInputElement, Omit<DatePartProps, 'ref' | 'part'>>(\n  (props, ref) => <ForwardRefDatePart {...props} part=\"month\" ref={ref} />,\n)\n\nconst Year = forwardRef<HTMLInputElement, Omit<DatePartProps, 'ref' | 'part'>>(\n  (props, ref) => <ForwardRefDatePart {...props} part=\"year\" ref={ref} />,\n)\n\n/**\n * Use date input to help users enter a memorable date, like their date of birth.\n *\n * For more information on when to use this component, go to the [HTN Digital service manual](https://service-manual.nhs.uk/design-system/components/date-input).\n *\n * @link https://service-manual.nhs.uk/design-system/components/date-input\n *\n * @example\n * ```tsx\n * <DateInput label=\"Date of birth\" />\n * ```\n */\nconst DateInput: DateInput = ({\n  children,\n  value,\n  defaultValue,\n  autoSelectNext,\n  onChange,\n  ...rest\n}): JSX.Element => {\n  const [, setInternalValue] = useState<{\n    values: DateInputValue\n  }>({\n    values: {\n      day: value?.day ?? '',\n      month: value?.month ?? '',\n      year: value?.year ?? '',\n    },\n  })\n\n  useEffect(() => {\n    setInternalValue((old) => {\n      if (\n        !value ||\n        (old.values.day === value.day &&\n          old.values.month === value.month &&\n          old.values.year === value.year)\n      ) {\n        return old\n      }\n\n      const { day, month, year } = value\n\n      return {\n        values: {\n          day: day && old.values.day !== day ? day : old.values.day,\n          month: month && old.values.month !== month ? month : old.values.month,\n          year: year && old.values.year !== year ? year : old.values.year,\n        },\n      }\n    })\n  }, [value])\n\n  const monthRef = useRef<HTMLInputElement | null>(null)\n  const yearRef = useRef<HTMLInputElement | null>(null)\n\n  const handleSelectNext = (part: DateInputPart, value: string) => {\n    if (!autoSelectNext) {\n      return\n    }\n\n    if (part === 'day' && value.length === 2) {\n      monthRef?.current?.focus()\n    } else if (part === 'month' && value.length === 2) {\n      yearRef?.current?.focus()\n    }\n  }\n\n  const registerInput = (\n    part: DateInputPart,\n    input: HTMLInputElement | null,\n  ) => {\n    switch (part) {\n      case 'month':\n        monthRef.current = input\n        break\n      case 'year':\n        yearRef.current = input\n        break\n    }\n  }\n\n  const handleChange = (\n    part: DateInputPart,\n    event: ChangeEvent<HTMLInputElement>,\n  ) => {\n    handleSelectNext(part, event.target.value)\n    event.stopPropagation()\n    setInternalValue((old) => {\n      const newValue = {\n        ...old.values,\n        [part]: event.target.value,\n      }\n\n      if (onChange) {\n        const newEvent = {\n          ...event,\n          target: { ...event.target, value: newValue },\n          currentTarget: { ...event.currentTarget, value: newValue },\n        } as DateInputChangeEvent\n\n        onChange(newEvent)\n      }\n\n      return {\n        values: newValue,\n      }\n    })\n  }\n\n  return (\n    <FormGroup<Omit<DateInputProps, 'value' | 'defaultValue'>>\n      {...rest}\n      inputType=\"dateinput\"\n      render={({ id, name, className, error, ...restProps }) => {\n        const value: DateInputContextValue = {\n          id,\n          name,\n          error,\n          defaultValue,\n          handleChange: handleChange,\n          registerInput: registerInput,\n        }\n\n        return (\n          <div\n            className={clsx('nhsuk-date-input', className)}\n            id={id}\n            {...restProps}\n          >\n            <DateInputContext.Provider value={value}>\n              {children || (\n                <>\n                  <DateInput.Day />\n                  <DateInput.Month />\n                  <DateInput.Year />\n                </>\n              )}\n            </DateInputContext.Provider>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nDateInput.displayName = 'DateInput'\nDay.displayName = 'DateInput.Day'\nMonth.displayName = 'DateInput.Month'\nYear.displayName = 'DateInput.Year'\n\nDateInput.Day = Day\nDateInput.Month = Month\nDateInput.Year = Year\n\nexport default DateInput\n"],"names":["DateInputContext","createContext","useDateInputContext","useContext","dayPartLabels","DatePart","id","className","name","onChange","labelProps","label","part","error","value","defaultValue","rest","ref","ctxId","ctxName","ctxValue","ctxDefaultValue","registerInput","ctxHandleChange","handleChange","useCallback","event","passedRef","registerRef","element","inputValue","inputDefaultValue","inputId","inputName","labelId","labelClassName","labelIdProp","restLabelProps","jsx","jsxs","Label","clsx","ForwardRefDatePart","forwardRef","Day","props","Month","Year","DateInput","children","autoSelectNext","setInternalValue","useState","useEffect","old","day","month","year","monthRef","useRef","yearRef","handleSelectNext","value2","_a","_b","input","newValue","newEvent","FormGroup","restProps","Fragment"],"mappings":"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"}