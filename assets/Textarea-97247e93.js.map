{"version":3,"file":"Textarea-97247e93.js","sources":["../../src/hooks/use-id-with-prefix.ts","../../src/components/form-elements/checkboxes/CheckboxesContext.ts","../../src/utils/random.ts","../../src/components/form-elements/checkboxes/Checkboxes.tsx","../../src/components/form-elements/input/Input.tsx","../../src/components/form-elements/radios/RadiosContext.ts","../../src/components/form-elements/radios/Radios.tsx","../../src/components/miscellaneous/form-group/FormGroup.tsx","../../src/components/form-elements/textarea/Textarea.tsx"],"sourcesContent":["import { useId } from 'react'\n\n/**\n * Generate a unique string with a prefix.\n *\n * @param prefix {string} - The prefix to use\n * @returns A unique string with the provided prefix\n *\n * @example\n * ```tsx\n * const id = useIdWithPrefix('my-id')\n * ```\n */\nconst useIdWithPrefix = (prefix: string) => `${prefix}_${useId()}`\n\nexport default useIdWithPrefix\n","import { ActionBase } from '@/utils/reducer'\nimport { createContext, useContext } from 'react'\n\nexport type CheckboxesState = {\n  conditional: string[]\n}\n\nexport type SetConditionalAction = ActionBase<\n  'set_conditional',\n  { refId: string; hasConditional: boolean }\n>\n\nexport type CheckboxesReducer = (\n  state: CheckboxesState,\n  action: SetConditionalAction,\n) => CheckboxesState\n\nexport const reducer: CheckboxesReducer = (state, { type, data }) => {\n  switch (type) {\n    case 'set_conditional':\n      return {\n        ...state,\n        conditional: data.hasConditional\n          ? state.conditional\n              .filter((id) => id !== data.refId)\n              .concat(data.refId)\n          : state.conditional.filter((id) => id !== data.refId),\n      }\n  }\n}\n\nexport type CheckboxesContextValue = {\n  name: string\n  dispatch: React.Dispatch<SetConditionalAction>\n  getCheckboxId: (reference: string) => string\n  leaseReference: () => string\n  releaseReference: (reference: string) => void\n}\n\nconst CheckboxesContext = createContext<CheckboxesContextValue>({\n  name: '',\n  dispatch: () => {},\n  getCheckboxId: () => '',\n  leaseReference: () => '',\n  releaseReference: () => {},\n})\n\nCheckboxesContext.displayName = 'CheckboxesContext'\n\nexport const useCheckboxesContext = () =>\n  useContext<CheckboxesContextValue>(CheckboxesContext)\n\nexport default CheckboxesContext\n","export const generateRandomString = (length: number = 8): string => {\n  return [...Array<string>(length)]\n    .map(() => Math.random().toString(36)[2])\n    .join('')\n}\n","import FormGroup from '@/components/miscellaneous/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLProps,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useReducer,\n  useState,\n} from 'react'\nimport CheckboxesContext, {\n  CheckboxesContextValue,\n  reducer,\n  useCheckboxesContext,\n} from './CheckboxesContext'\nimport { generateRandomString } from '@/utils/random'\nimport Hint from '@/components/form-elements/hint'\nimport Label from '@/components/miscellaneous/label/Label'\n\ntype Checkboxes = {\n  Box: typeof BoxForwardRef\n} & React.FC<CheckboxContainerProps>\n\ntype CheckboxContainerProps = {\n  idPrefix?: string\n} & HTMLProps<HTMLDivElement> &\n  FormElementProps\n\ntype CheckboxProps = {\n  conditional?: ReactNode\n  forceShowConditional?: boolean\n  conditionalWrapperProps?: HTMLProps<HTMLDivElement>\n} & Omit<HTMLProps<HTMLInputElement>, 'label'> &\n  Omit<\n    FormElementProps,\n    'error' | 'errorProps' | 'formGroupProps' | 'disableErrorLine'\n  >\n\nconst Box: ForwardRefRenderFunction<HTMLInputElement, CheckboxProps> = (\n  {\n    children,\n    className,\n    id,\n    hint,\n    hintProps,\n    labelProps,\n    conditional,\n    forceShowConditional,\n    conditionalWrapperProps,\n    checked,\n    defaultChecked,\n    onChange,\n    type = 'checkbox',\n    ...rest\n  },\n  ref,\n): JSX.Element => {\n  const { name, getCheckboxId, leaseReference, releaseReference, dispatch } =\n    useCheckboxesContext()\n\n  const [checkboxReference] = useState(leaseReference())\n  const [showConditional, setShowConditional] = useState<boolean>(\n    !!(checked || defaultChecked),\n  )\n  const inputId = id || getCheckboxId(checkboxReference)\n\n  const { className: labelClassName, ...labelRest } = labelProps || {}\n  const { className: hintClassName, ...hintRest } = hintProps || {}\n  const { className: conditionalClassName, ...conditionalRest } =\n    conditionalWrapperProps || {}\n\n  useEffect(() => {\n    return () => releaseReference(checkboxReference)\n  }, [])\n\n  useEffect(() => {\n    if (checked !== undefined) {\n      setShowConditional(checked)\n    }\n  }, [checked])\n\n  useEffect(() => {\n    dispatch({\n      type: 'set_conditional',\n      data: { refId: checkboxReference, hasConditional: Boolean(conditional) },\n    })\n\n    return () =>\n      dispatch({\n        type: 'set_conditional',\n        data: { refId: checkboxReference, hasConditional: false },\n      })\n  }, [conditional])\n\n  return (\n    <>\n      <div className={clsx('nhsuk-checkboxes__item', className)}>\n        <input\n          className=\"nhsuk-checkboxes__input\"\n          id={inputId}\n          name={name}\n          type={type}\n          checked={checked}\n          defaultChecked={defaultChecked}\n          ref={ref}\n          onChange={(ev) => {\n            if (checked === undefined) {\n              setShowConditional(ev.target.checked)\n            }\n\n            onChange?.(ev)\n          }}\n          {...rest}\n        />\n        {children && (\n          <Label\n            className={clsx('nhsuk-checkboxes__label', labelClassName)}\n            id={`${inputId}--label`}\n            htmlFor={inputId}\n            {...labelRest}\n          >\n            {children}\n          </Label>\n        )}\n        {hint && (\n          <Hint\n            className={clsx('nhsuk-checkboxes__hint', hintClassName)}\n            {...hintRest}\n          >\n            {hint}\n          </Hint>\n        )}\n      </div>\n      {conditional && (showConditional || forceShowConditional) && (\n        <div\n          className={clsx(\n            'nhsuk-checkboxes__conditional',\n            conditionalClassName,\n          )}\n          {...conditionalRest}\n        >\n          {conditional}\n        </div>\n      )}\n    </>\n  )\n}\n\n/**\n * A checkbox component that can be used within a `Checkboxes` component.\n *\n * @example\n * ```tsx\n * <Checkboxes.Box value=\"GP Practice\">GP Practice</Checkboxes.Box>\n * ```\n */\nconst BoxForwardRef = forwardRef(Box)\n\n/**\n * Use checkboxes to let users select 1 or more options on a form.\n *\n * For more information on when to use this component, got to the [NHS Digital service manual](https://beta.nhs.uk/service-manual/styles-components-patterns/checkboxes).\n *\n * @example\n * ```tsx\n * <Checkboxes label=\"Which services?\" name=\"fruit\">\n *  <Checkboxes.Box value=\"GP Practice\">GP Practice</Checkboxes.Box>\n *  <Checkboxes.Box value=\"Dentist\">Dentist</Checkboxes.Box>\n * </Checkboxes>\n * ```\n */\nconst Checkboxes: Checkboxes = ({\n  children,\n  idPrefix,\n  ...rest\n}): JSX.Element => {\n  let checkboxIds: Record<string, string> = {}\n  let checkboxReferences: string[] = []\n  let checkboxCount = 0\n\n  const [state, dispatch] = useReducer(reducer, { conditional: [] })\n\n  const getCheckboxId = useCallback((id: string, reference: string) => {\n    if (reference in checkboxIds) {\n      return checkboxIds[reference]\n    }\n\n    checkboxCount += 1\n    checkboxIds[reference] = `${idPrefix || id}-${checkboxCount}`\n    return checkboxIds[reference]\n  }, [])\n\n  const leaseReference = (): string => {\n    const reference = generateRandomString()\n\n    if (checkboxReferences.includes(reference)) {\n      return leaseReference()\n    }\n\n    checkboxReferences.push(reference)\n    return reference\n  }\n\n  const releaseReference = (reference: string): void => {\n    checkboxReferences = checkboxReferences.filter((ref) => ref !== reference)\n  }\n\n  const resetCheckboxes = (): void => {\n    checkboxIds = {}\n    checkboxCount = 0\n  }\n\n  return (\n    <FormGroup<CheckboxContainerProps>\n      {...rest}\n      inputType=\"checkboxes\"\n      render={({ id, name, className, ...renderProps }) => {\n        resetCheckboxes()\n        const contextValues: CheckboxesContextValue = {\n          name,\n          getCheckboxId: (reference) => getCheckboxId(id, reference),\n          leaseReference,\n          releaseReference,\n          dispatch,\n        }\n\n        return (\n          <div\n            className={clsx(\n              'nhsuk-checkboxes',\n              {\n                'nhsuk-checkboxes--conditional': state.conditional.length > 0,\n              },\n              className,\n            )}\n            id={id}\n            {...renderProps}\n          >\n            <CheckboxesContext.Provider value={contextValues}>\n              {children}\n            </CheckboxesContext.Provider>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nBoxForwardRef.displayName = 'Checkboxes.Box'\nCheckboxes.displayName = 'Checkboxes'\n\nCheckboxes.Box = BoxForwardRef\n\nexport default Checkboxes\n","import FormGroup from '@/components/miscellaneous/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport { InputWidth } from '@/types/nhsuk-sizes'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLInputTypeAttribute,\n  HTMLProps,\n  forwardRef,\n} from 'react'\n\ntype InputProps = {\n  width?: InputWidth\n  type?: HTMLInputTypeAttribute\n} & Omit<HTMLProps<HTMLInputElement>, 'type'> &\n  FormElementProps\n\n/**\n * Use text input to let users enter a single line of text.\n *\n * For more information on when to use this component, go the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/text-input).\n *\n * @example\n * ```tsx\n * <Input id=\"example\" label=\"Example\" />\n * ```\n */\nconst Input: ForwardRefRenderFunction<HTMLInputElement, InputProps> = (\n  props,\n  ref,\n): JSX.Element => {\n  return (\n    <FormGroup<InputProps>\n      {...props}\n      inputType=\"input\"\n      render={({\n        id,\n        name,\n        className,\n        error,\n        width,\n        type = 'text',\n        ...rest\n      }) => (\n        <input\n          id={id}\n          name={name}\n          className={clsx(\n            'nhsuk-input',\n            {\n              [`nhsuk-input--width-${width}`]: width,\n              'nhsuk-input--error': error,\n            },\n            className,\n          )}\n          type={type}\n          ref={ref}\n          {...rest}\n        />\n      )}\n    />\n  )\n}\n\nconst InputForwardRef = forwardRef(Input)\n\nInputForwardRef.displayName = 'Input'\n\nexport default InputForwardRef\n","import { ActionBase } from '@/utils/reducer'\nimport { createContext, useContext } from 'react'\n\nexport type RadiosState = {\n  selected: string\n  conditional: string[]\n}\n\nexport type SetConditionalAction = ActionBase<\n  'set_conditional',\n  { refId: string; hasConditional: boolean }\n>\nexport type SetSelectedAction = ActionBase<'set_selected', { refId: string }>\nexport type RadiosReducer = (\n  state: RadiosState,\n  action: SetConditionalAction | SetSelectedAction,\n) => RadiosState\n\nexport const reducer: RadiosReducer = (state, { type, data }) => {\n  switch (type) {\n    case 'set_conditional':\n      return {\n        ...state,\n        conditional: data.hasConditional\n          ? state.conditional\n              .filter((id) => id !== data.refId)\n              .concat(data.refId)\n          : state.conditional.concat(data.refId),\n      }\n    case 'set_selected':\n      return {\n        ...state,\n        selected: data.refId,\n      }\n  }\n}\n\nexport type RadiosContextValue = {\n  name: string\n  selectedRadio: string\n  dispatch: React.Dispatch<SetConditionalAction | SetSelectedAction>\n  getRadioId: (reference: string) => string\n  leaseReference: () => string\n  releaseReference: (reference: string) => void\n}\n\nconst RadiosContext = createContext<RadiosContextValue>({\n  name: '',\n  selectedRadio: '',\n  dispatch: () => {},\n  getRadioId: () => '',\n  leaseReference: () => '',\n  releaseReference: () => {},\n})\n\nRadiosContext.displayName = 'RadiosContext'\n\nexport const useRadiosContext = () =>\n  useContext<RadiosContextValue>(RadiosContext)\n\nexport default RadiosContext\n","import Label from '@/components/miscellaneous/label/Label'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLProps,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useReducer,\n  useState,\n} from 'react'\nimport RadiosContext, {\n  RadiosContextValue,\n  reducer,\n  useRadiosContext,\n} from './RadiosContext'\nimport Hint from '@/components/form-elements/hint'\nimport FormGroup from '@/components/miscellaneous/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport { generateRandomString } from '@/utils/random'\n\ntype Radios = {\n  Divider: typeof Divider\n  Radio: typeof RadioForwardRef\n} & React.FC<RadioContainerProps>\n\ntype RadioProps = {\n  conditional?: ReactNode\n  forceShowConditional?: boolean\n  conditionalWrapperProps?: HTMLProps<HTMLDivElement>\n} & HTMLProps<HTMLInputElement> &\n  Omit<\n    FormElementProps,\n    'error' | 'errorProps' | 'formGroupProps' | 'disableErrorLine'\n  >\n\ntype RadioContainerProps = {\n  inline?: boolean\n  idPrefix?: string\n} & HTMLProps<HTMLDivElement> &\n  FormElementProps\n\nconst Divider: React.FC<HTMLProps<HTMLDivElement>> = ({\n  children,\n  className,\n  ...rest\n}): JSX.Element => {\n  return (\n    <div className={clsx('nhsuk-radios__divider', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n\nconst Radio: ForwardRefRenderFunction<HTMLInputElement, RadioProps> = (\n  {\n    children,\n    className,\n    id,\n    hint,\n    hintProps,\n    labelProps,\n    conditional,\n    forceShowConditional,\n    conditionalWrapperProps,\n    checked,\n    defaultChecked,\n    onChange,\n    type = 'radio',\n    ...rest\n  },\n  ref,\n): JSX.Element => {\n  const {\n    name,\n    getRadioId,\n    leaseReference,\n    releaseReference,\n    selectedRadio,\n    dispatch,\n  } = useRadiosContext()\n  const [radioReference] = useState<string>(leaseReference())\n  const inputId = id || getRadioId(radioReference)\n  const shouldShowConditional =\n    selectedRadio === radioReference && checked !== false\n\n  const { className: labelClassName, ...labelRest } = labelProps || {}\n  const { className: hintClassName, ...hintRest } = hintProps || {}\n  const { className: conditionalClassName, ...conditionalRest } =\n    conditionalWrapperProps || {}\n\n  const setSelected = (reference: string): void => {\n    dispatch({ type: 'set_selected', data: { refId: reference } })\n  }\n\n  useEffect(() => {\n    if (defaultChecked) {\n      setSelected(radioReference)\n    }\n\n    return () => releaseReference(radioReference)\n  }, [])\n\n  useEffect(() => {\n    if (checked) {\n      setSelected(radioReference)\n    }\n  }, [checked])\n\n  useEffect(() => {\n    dispatch({\n      type: 'set_conditional',\n      data: { refId: radioReference, hasConditional: Boolean(conditional) },\n    })\n\n    return () =>\n      dispatch({\n        type: 'set_conditional',\n        data: { refId: radioReference, hasConditional: false },\n      })\n  }, [conditional])\n\n  return (\n    <>\n      <div className={clsx('nhsuk-radios__item', className)}>\n        <input\n          className=\"nhsuk-radios__input\"\n          id={inputId}\n          name={name}\n          type={type}\n          checked={checked}\n          defaultChecked={defaultChecked}\n          ref={ref}\n          onChange={(ev) => {\n            setSelected(radioReference)\n            onChange?.(ev)\n          }}\n          {...rest}\n        />\n        {children && (\n          <Label\n            className={clsx('nhsuk-radios__label', labelClassName)}\n            id={`${inputId}--label`}\n            htmlFor={inputId}\n            {...labelRest}\n          >\n            {children}\n          </Label>\n        )}\n        {hint && (\n          <Hint\n            className={clsx('nhsuk-radios__hint', hintClassName)}\n            id={`${inputId}--hint`}\n            {...hintRest}\n          >\n            {hint}\n          </Hint>\n        )}\n      </div>\n      {conditional && (shouldShowConditional || forceShowConditional) && (\n        <div\n          className={clsx('nhsuk-radios__conditional', conditionalClassName)}\n          id={`${inputId}--conditional`}\n          {...conditionalRest}\n        >\n          {conditional}\n        </div>\n      )}\n    </>\n  )\n}\n\n/**\n * Radio component that renders a single radio input.\n *\n * @param {RadioProps} props - The props to be passed to the radio input.\n * @param {React.ForwardedRef<HTMLInputElement>} ref - Optional ref to be passed to the radio input.\n *\n * @example\n * ```tsx\n * <Radios.Radio value=\"yes\" hint=\"some hint\">\n *  Yes\n * </Radios.Radio>\n * ```\n */\nconst RadioForwardRef = forwardRef(Radio)\n\n/**\n * Use radios when you want users to select only 1 option from a list.\n *\n * For more information on when to use this component, go the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/radios).\n *\n * @example\n * ```tsx\n * <Radios label=\"Do you have any allergies?\">\n *  <Radios.Radio value=\"yes\" hint=\"some hint\">\n *   Yes\n *  </Radios.Radio>\n *  <Radios.Radio value=\"no\">No</Radios.Radio>\n * </Radios>\n * ```\n */\nconst Radios: Radios = ({ children, ...rest }): JSX.Element => {\n  let radioIds: Record<string, string> = {}\n  let radioReferences: string[] = []\n  let radioCount = 0\n\n  const [state, dispatch] = useReducer(reducer, {\n    selected: '',\n    conditional: [],\n  })\n\n  const getRadioId = useCallback((id: string, reference: string) => {\n    if (reference in radioIds) {\n      return radioIds[reference]\n    }\n\n    radioCount += 1\n    radioIds[reference] = `${rest.idPrefix || id}-${radioCount}`\n    return radioIds[reference]\n  }, [])\n\n  const leaseReference = (): string => {\n    const reference = generateRandomString()\n\n    if (radioReferences.includes(reference)) {\n      return leaseReference()\n    }\n\n    radioReferences.push(reference)\n    return reference\n  }\n\n  const releaseReference = (reference: string): void => {\n    radioReferences = radioReferences.filter((ref) => ref !== reference)\n  }\n\n  const resetRadios = (): void => {\n    radioIds = {}\n    radioCount = 0\n  }\n\n  return (\n    <FormGroup<RadioContainerProps>\n      {...rest}\n      inputType=\"radios\"\n      render={({ id, name, inline, className, ...renderRest }) => {\n        resetRadios()\n\n        const radiosContextValue: RadiosContextValue = {\n          name,\n          getRadioId: (reference) => getRadioId(id, reference),\n          selectedRadio: state.selected,\n          leaseReference,\n          releaseReference,\n          dispatch,\n        }\n\n        return (\n          <div\n            className={clsx(\n              'nhsuk-radios',\n              { 'nhsuk-radios--inline': inline },\n              className,\n            )}\n            id={id}\n            {...renderRest}\n          >\n            <RadiosContext.Provider value={radiosContextValue}>\n              {children}\n            </RadiosContext.Provider>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nDivider.displayName = 'Radios.Divider'\nRadioForwardRef.displayName = 'Radios.Radio'\nRadios.displayName = 'Radios'\n\nRadios.Divider = Divider\nRadios.Radio = RadioForwardRef\n\nexport default Radios\n","import { HTMLProps, ReactNode, useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport useIdWithPrefix from '@/hooks/use-id-with-prefix'\nimport Label from '@/components/miscellaneous/label/Label'\nimport ErrorMessage from '@/components/form-elements/error-message/ErrorMessage'\nimport Hint from '@/components/form-elements/hint/Hint'\nimport { useFieldsetContext } from '@/index'\nimport { FormElementProps } from '@/types/form-element-types'\n\ntype ExcludedProps =\n  | 'hint'\n  | 'label'\n  | 'labelProps'\n  | 'hintProps'\n  | 'errorProps'\n  | 'inputType'\n  | 'disableErrorLine'\n\ntype BaseFormElementRenderProps = {\n  error?: string | boolean\n} & HTMLProps<\n  HTMLInputElement | HTMLDivElement | HTMLSelectElement | HTMLTextAreaElement\n>\n\ntype FormElementRenderProps<T> = Omit<T, ExcludedProps> & {\n  id: string\n  name: string\n}\n\ntype FormGroupProps<T> = FormElementProps & {\n  render: (props: FormElementRenderProps<T>) => ReactNode\n  inputType:\n    | 'input'\n    | 'radios'\n    | 'select'\n    | 'checkboxes'\n    | 'dateinput'\n    | 'textarea'\n}\n\nconst FormGroup = <T extends BaseFormElementRenderProps>(\n  props: FormGroupProps<T>,\n): JSX.Element => {\n  const {\n    render,\n    hint,\n    label,\n    id,\n    labelProps,\n    error,\n    hintProps,\n    errorProps,\n    formGroupProps,\n    inputType,\n    disableErrorLine,\n    name,\n    ...rest\n  } = props\n\n  const [generatedId] = useState(useIdWithPrefix(inputType))\n  const { isFieldset, dispatch: dispatchFieldsetAction } = useFieldsetContext()\n\n  const elementId = id || generatedId\n  const labelId = `${elementId}--label`\n  const hintId = `${elementId}--hint`\n  const errorId = `${elementId}--error-message`\n\n  const renderProps = {\n    'aria-describedby': hint ? hintId : undefined,\n    'aria-labelledby': label ? labelId : undefined,\n    error,\n    name: name || elementId,\n    id: elementId,\n    ...rest,\n  } as FormElementRenderProps<T>\n\n  useEffect(() => {\n    if (!isFieldset) {\n      return\n    }\n\n    dispatchFieldsetAction({\n      type: 'set_error',\n      data: { id: elementId, error: Boolean(error) },\n    })\n\n    return () =>\n      dispatchFieldsetAction({\n        type: 'set_error',\n        data: { id: elementId, error: false },\n      })\n  }, [elementId, error, isFieldset])\n\n  useEffect(() => {\n    dispatchFieldsetAction({\n      type: 'register_component',\n      data: { id: elementId, unregister: false },\n    })\n    return () =>\n      dispatchFieldsetAction({\n        type: 'register_component',\n        data: { id: elementId, unregister: true },\n      })\n  }, [])\n\n  const { className: formGroupClass, ...formGroupRest } = formGroupProps || {}\n\n  return (\n    <div\n      className={clsx(\n        'nhsuk-form-group',\n        {\n          'nhsuk-form-group--error': !disableErrorLine && error,\n        },\n        formGroupClass,\n      )}\n      {...formGroupRest}\n    >\n      {label && (\n        <Label id={labelId} htmlFor={elementId} {...labelProps}>\n          {label}\n        </Label>\n      )}\n\n      {hint && (\n        <Hint id={hintId} htmlFor={elementId} {...hintProps}>\n          {hint}\n        </Hint>\n      )}\n\n      {error && typeof error === 'string' && (\n        <ErrorMessage id={errorId} htmlFor={elementId} {...errorProps}>\n          {error}\n        </ErrorMessage>\n      )}\n\n      {render(renderProps)}\n    </div>\n  )\n}\n\nFormGroup.displayName = 'FormGroup'\n\nexport default FormGroup\n","import FormGroup from '@/components/miscellaneous/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport clsx from 'clsx'\nimport { ForwardRefRenderFunction, HTMLProps, forwardRef } from 'react'\n\ntype TextareaProps = Omit<HTMLProps<HTMLTextAreaElement>, 'width'> &\n  FormElementProps\n\nconst Textarea: ForwardRefRenderFunction<HTMLTextAreaElement, TextareaProps> = (\n  props,\n  ref,\n): JSX.Element => {\n  return (\n    <FormGroup<TextareaProps>\n      {...props}\n      inputType=\"textarea\"\n      render={({ id, name, error, className, rows, ...rest }) => (\n        <textarea\n          id={id}\n          name={name}\n          className={clsx(\n            'nhsuk-textarea',\n            {\n              'nhsuk-textarea--error': error,\n            },\n            className,\n          )}\n          ref={ref}\n          rows={rows}\n          {...rest}\n        />\n      )}\n    />\n  )\n}\n\n/**\n * Use textarea to let users enter more than 1 line of text.\n *\n * For more information on when to use this component, go the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/textarea).\n *\n * @param {TextareaProps} props - The props of the component.\n * @param {React.ForwardedRef<HTMLTextAreaElement>} ref - Optional ref to be passed to the textarea.\n *\n * @example\n * ```tsx\n * <Textarea id=\"example\" label=\"Example\" />\n * ```\n */\nconst TextareaForwardRef = forwardRef(Textarea)\n\nTextareaForwardRef.displayName = 'Textarea'\n\nexport default TextareaForwardRef\n"],"names":["useIdWithPrefix","prefix","useId","reducer","state","type","data","id","CheckboxesContext","createContext","useCheckboxesContext","useContext","generateRandomString","length","Box","children","className","hint","hintProps","labelProps","conditional","forceShowConditional","conditionalWrapperProps","checked","defaultChecked","onChange","rest","ref","name","getCheckboxId","leaseReference","releaseReference","dispatch","checkboxReference","useState","showConditional","setShowConditional","inputId","labelClassName","labelRest","hintClassName","hintRest","conditionalClassName","conditionalRest","useEffect","jsxs","Fragment","clsx","jsx","ev","Label","Hint","BoxForwardRef","forwardRef","Checkboxes","idPrefix","checkboxIds","checkboxReferences","checkboxCount","useReducer","useCallback","reference","resetCheckboxes","FormGroup","renderProps","contextValues","Input","props","error","width","InputForwardRef","RadiosContext","useRadiosContext","Divider","Radio","getRadioId","selectedRadio","radioReference","shouldShowConditional","setSelected","RadioForwardRef","Radios","radioIds","radioReferences","radioCount","resetRadios","inline","renderRest","radiosContextValue","render","label","errorProps","formGroupProps","inputType","disableErrorLine","generatedId","isFieldset","dispatchFieldsetAction","useFieldsetContext","elementId","labelId","hintId","errorId","formGroupClass","formGroupRest","ErrorMessage","Textarea","rows","TextareaForwardRef"],"mappings":"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"}