{"version":3,"file":"Radios-fac483a4.js","sources":["../../../../packages/nhsuk-frontend-react/src/lib/components/form-elements/radios/RadiosContext.ts","../../../../packages/nhsuk-frontend-react/src/lib/components/form-elements/radios/Radios.tsx"],"sourcesContent":["import { ActionBase } from '@/utils/reducer'\nimport { createContext, useContext } from 'react'\n\nexport type RadiosState = {\n  selected: string\n  conditional: string[]\n}\n\nexport type SetConditionalAction = ActionBase<\n  'set_conditional',\n  { refId: string; hasConditional: boolean }\n>\nexport type SetSelectedAction = ActionBase<'set_selected', { refId: string }>\nexport type RadiosReducer = (\n  state: RadiosState,\n  action: SetConditionalAction | SetSelectedAction,\n) => RadiosState\n\nexport const reducer: RadiosReducer = (state, { type, data }) => {\n  switch (type) {\n    case 'set_conditional':\n      return {\n        ...state,\n        conditional: data.hasConditional\n          ? state.conditional\n              .filter(/* istanbul ignore next */ (id) => id !== data.refId)\n              .concat(data.refId)\n          : state.conditional.concat(data.refId),\n      }\n    case 'set_selected':\n      return {\n        ...state,\n        selected: data.refId,\n      }\n  }\n}\n\nexport type RadiosContextValue = {\n  name: string\n  selectedRadio: string\n  dispatch: React.Dispatch<SetConditionalAction | SetSelectedAction>\n  getRadioId: (reference: string) => string\n  leaseReference: () => string\n  releaseReference: (reference: string) => void\n}\n\nconst RadiosContext = createContext<RadiosContextValue>({\n  name: '',\n  selectedRadio: '',\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  dispatch: /* istanbul ignore next */ () => {},\n  getRadioId: /* istanbul ignore next */ () => '',\n  leaseReference: /* istanbul ignore next */ () => '',\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  releaseReference: /* istanbul ignore next */ () => {},\n})\n\nRadiosContext.displayName = 'RadiosContext'\n\nexport const useRadiosContext = () =>\n  useContext<RadiosContextValue>(RadiosContext)\n\nexport default RadiosContext\n","import Label from '@/components/core/label/Label'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLProps,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useReducer,\n  useState,\n} from 'react'\nimport RadiosContext, {\n  RadiosContextValue,\n  reducer,\n  useRadiosContext,\n} from './RadiosContext'\nimport Hint from '@/components/form-elements/hint'\nimport FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport { generateRandomString } from '@/utils/random'\n\ntype Radios = {\n  Divider: typeof Divider\n  Radio: typeof RadioForwardRef\n} & React.FC<RadioContainerProps>\n\ntype RadioProps = {\n  conditional?: ReactNode\n  forceShowConditional?: boolean\n  conditionalWrapperProps?: HTMLProps<HTMLDivElement>\n} & HTMLProps<HTMLInputElement> &\n  Omit<\n    FormElementProps,\n    'error' | 'errorProps' | 'formGroupProps' | 'disableErrorLine'\n  >\n\ntype RadioContainerProps = {\n  inline?: boolean\n  idPrefix?: string\n} & HTMLProps<HTMLDivElement> &\n  FormElementProps\n\nconst Divider: React.FC<HTMLProps<HTMLDivElement>> = ({\n  children,\n  className,\n  ...rest\n}): JSX.Element => {\n  return (\n    <div className={clsx('nhsuk-radios__divider', className)} {...rest}>\n      {children}\n    </div>\n  )\n}\n\nconst Radio: ForwardRefRenderFunction<HTMLInputElement, RadioProps> = (\n  {\n    children,\n    className,\n    id,\n    hint,\n    hintProps,\n    labelProps,\n    conditional,\n    forceShowConditional,\n    conditionalWrapperProps,\n    checked,\n    defaultChecked,\n    onChange,\n    type = 'radio',\n    ...rest\n  },\n  ref,\n): JSX.Element => {\n  const {\n    name,\n    getRadioId,\n    leaseReference,\n    releaseReference,\n    selectedRadio,\n    dispatch,\n  } = useRadiosContext()\n  const [radioReference] = useState<string>(leaseReference())\n  const inputId = id || getRadioId(radioReference)\n  const shouldShowConditional =\n    selectedRadio === radioReference && checked !== false\n\n  const { className: labelClassName, ...labelRest } = labelProps || {}\n  const { className: hintClassName, ...hintRest } = hintProps || {}\n  const { className: conditionalClassName, ...conditionalRest } =\n    conditionalWrapperProps || {}\n\n  const setSelected = (reference: string): void => {\n    dispatch({ type: 'set_selected', data: { refId: reference } })\n  }\n\n  useEffect(() => {\n    if (defaultChecked) {\n      setSelected(radioReference)\n    }\n\n    return () => releaseReference(radioReference)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (checked) {\n      setSelected(radioReference)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [checked])\n\n  useEffect(() => {\n    dispatch({\n      type: 'set_conditional',\n      data: { refId: radioReference, hasConditional: Boolean(conditional) },\n    })\n\n    return () =>\n      dispatch({\n        type: 'set_conditional',\n        data: { refId: radioReference, hasConditional: false },\n      })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [conditional])\n\n  return (\n    <>\n      <div className={clsx('nhsuk-radios__item', className)}>\n        <input\n          className=\"nhsuk-radios__input\"\n          id={inputId}\n          name={name}\n          type={type}\n          checked={checked}\n          defaultChecked={defaultChecked}\n          ref={ref}\n          onChange={(ev) => {\n            setSelected(radioReference)\n            onChange?.(ev)\n          }}\n          {...rest}\n        />\n        {children && (\n          <Label\n            className={clsx('nhsuk-radios__label', labelClassName)}\n            id={`${inputId}--label`}\n            htmlFor={inputId}\n            {...labelRest}\n          >\n            {children}\n          </Label>\n        )}\n        {hint && (\n          <Hint\n            className={clsx('nhsuk-radios__hint', hintClassName)}\n            id={`${inputId}--hint`}\n            {...hintRest}\n          >\n            {hint}\n          </Hint>\n        )}\n      </div>\n      {conditional && (shouldShowConditional || forceShowConditional) && (\n        <div\n          className={clsx('nhsuk-radios__conditional', conditionalClassName)}\n          id={`${inputId}--conditional`}\n          {...conditionalRest}\n        >\n          {conditional}\n        </div>\n      )}\n    </>\n  )\n}\n\n/**\n * Radio component that renders a single radio input.\n *\n * @param {RadioProps} props - The props to be passed to the radio input.\n * @param {React.ForwardedRef<HTMLInputElement>} ref - Optional ref to be passed to the radio input.\n *\n * @example\n * ```tsx\n * <Radios.Radio value=\"yes\" hint=\"some hint\">\n *  Yes\n * </Radios.Radio>\n * ```\n */\nconst RadioForwardRef = forwardRef(Radio)\n\n/**\n * Use radios when you want users to select only 1 option from a list.\n *\n * For more information on when to use this component, go to the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/radios).\n *\n * @example\n * ```tsx\n * <Radios label=\"Do you have any allergies?\">\n *  <Radios.Radio value=\"yes\" hint=\"some hint\">\n *   Yes\n *  </Radios.Radio>\n *  <Radios.Radio value=\"no\">No</Radios.Radio>\n * </Radios>\n * ```\n */\nconst Radios: Radios = ({ children, ...rest }): JSX.Element => {\n  let radioIds: Record<string, string> = {}\n  let radioReferences: string[] = []\n  let radioCount = 0\n\n  const [state, dispatch] = useReducer(reducer, {\n    selected: '',\n    conditional: [],\n  })\n\n  const getRadioId = useCallback((id: string, reference: string) => {\n    if (reference in radioIds) {\n      return radioIds[reference]\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    radioCount += 1\n    radioIds[reference] = `${rest.idPrefix || id}-${radioCount}`\n    return radioIds[reference]\n  }, [])\n\n  const leaseReference = (): string => {\n    const reference = generateRandomString()\n\n    if (radioReferences.includes(reference)) {\n      return leaseReference()\n    }\n\n    radioReferences.push(reference)\n    return reference\n  }\n\n  const releaseReference = (reference: string): void => {\n    radioReferences = radioReferences.filter((ref) => ref !== reference)\n  }\n\n  const resetRadios = (): void => {\n    radioIds = {}\n    radioCount = 0\n  }\n\n  return (\n    <FormGroup<RadioContainerProps>\n      {...rest}\n      inputType=\"radios\"\n      render={({ id, name, inline, className, ...renderRest }) => {\n        resetRadios()\n\n        const radiosContextValue: RadiosContextValue = {\n          name,\n          getRadioId: (reference) => getRadioId(id, reference),\n          selectedRadio: state.selected,\n          leaseReference,\n          releaseReference,\n          dispatch,\n        }\n\n        return (\n          <div\n            className={clsx(\n              'nhsuk-radios',\n              { 'nhsuk-radios--inline': inline },\n              className,\n            )}\n            id={id}\n            {...renderRest}\n          >\n            <RadiosContext.Provider value={radiosContextValue}>\n              {children}\n            </RadiosContext.Provider>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nDivider.displayName = 'Radios.Divider'\nRadioForwardRef.displayName = 'Radios.Radio'\nRadios.displayName = 'Radios'\n\nRadios.Divider = Divider\nRadios.Radio = RadioForwardRef\n\nexport default Radios\n"],"names":["reducer","state","type","data","id","RadiosContext","createContext","useRadiosContext","useContext","Divider","children","className","rest","jsx","clsx","Radio","hint","hintProps","labelProps","conditional","forceShowConditional","conditionalWrapperProps","checked","defaultChecked","onChange","ref","name","getRadioId","leaseReference","releaseReference","selectedRadio","dispatch","radioReference","useState","inputId","shouldShowConditional","labelClassName","labelRest","hintClassName","hintRest","conditionalClassName","conditionalRest","setSelected","reference","useEffect","jsxs","Fragment","ev","Label","Hint","RadioForwardRef","forwardRef","Radios","radioIds","radioReferences","radioCount","useReducer","useCallback","generateRandomString","resetRadios","FormGroup","inline","renderRest","radiosContextValue"],"mappings":"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"}