{"version":3,"file":"Fieldset-0011b1f9.js","sources":["../../src/components/form-elements/fieldset/FieldsetContext.ts","../../src/components/form-elements/fieldset/Fieldset.tsx"],"sourcesContent":["import { ActionBase, ReducerBase } from '@/utils/reducer'\nimport { createContext, useContext } from 'react'\n\nexport type FieldsetState = {\n  registered: string[]\n  errored: string[]\n}\n\nexport type SetErrorAction = ActionBase<\n  'set_error',\n  { id: string; error: boolean }\n>\nexport type RegisterComponentAction = ActionBase<\n  'register_component',\n  { id: string; unregister: boolean }\n>\nexport type FieldsetReducer = ReducerBase<\n  FieldsetState,\n  SetErrorAction | RegisterComponentAction\n>\n\nexport const reducer: FieldsetReducer = (state, { type, data }) => {\n  switch (type) {\n    case 'set_error':\n      return {\n        ...state,\n        errored: data.error\n          ? state.errored.filter((id) => id !== data.id).concat(data.id)\n          : state.errored.concat(data.id),\n      }\n    case 'register_component':\n      return {\n        ...state,\n        registered: data.unregister\n          ? state.registered.filter((id) => id !== data.id)\n          : state.registered.concat(data.id),\n      }\n  }\n}\n\nexport type FieldsetContextValue = {\n  isFieldset: boolean\n  dispatch: React.Dispatch<SetErrorAction | RegisterComponentAction>\n}\n\n/**\n * Context to pass the `FieldsetContextValue` to the `Fieldset` and `Fieldset.Legend` components.\n */\nconst FieldsetContext = createContext<FieldsetContextValue>({\n  isFieldset: false,\n  dispatch: () => {},\n})\n\nFieldsetContext.displayName = 'FieldsetContext'\n\n/**\n * Hook to get the `FieldsetContext`.\n *\n * @returns {FieldsetContextValue} The FieldsetContext\n */\nexport const useFieldsetContext = () =>\n  useContext<FieldsetContextValue>(FieldsetContext)\n\nexport default FieldsetContext\n","import clsx from 'clsx'\nimport { ElementType, HTMLProps, memo, useReducer } from 'react'\nimport FieldsetContext, {\n  FieldsetContextValue,\n  reducer,\n} from './FieldsetContext'\nimport { Size } from '@/types/nhsuk-sizes'\n\ntype LegendProps = {\n  isPageHeading?: boolean\n  asElement?: ElementType\n  size?: Size\n} & Omit<HTMLProps<HTMLLegendElement>, 'size'>\n\ntype Legend = React.FC<LegendProps>\n\n/**\n * Use a legend to provide a heading for a fieldset.\n *\n * @param {string} [props.className] - Optional additional classes to add to the legend.\n * @param {boolean} [props.isPageHeading] - Sets the legend as a page heading.\n * @param {string} [props.size] - Sets the size of the legend. Overrides `isPageHeading`.\n * @param {React.ElementType} [props.asElement] - Sets the element type of the legend. Defaults to `h1` if `isPageHeading` is true.\n *\n * @example\n * ```tsx\n * <Fieldset.Legend isPageHeading>What is your address?</Fieldset.Legend>\n * ```\n */\nconst Legend: Legend = ({\n  className,\n  children,\n  isPageHeading,\n  asElement: Component = 'h1',\n  size,\n  ...rest\n}): JSX.Element => {\n  return (\n    <legend\n      className={clsx(\n        'nhsuk-legend',\n        {\n          'nhsuk-fieldset__legend--xl': isPageHeading && !size,\n        },\n        { [`nhsuk-fieldset__legend--${size}`]: size },\n        className,\n      )}\n      {...rest}\n    >\n      {isPageHeading ? (\n        <Component className=\"nhsuk-fieldset__heading\">{children}</Component>\n      ) : (\n        children\n      )}\n    </legend>\n  )\n}\n\ntype FieldsetProps = {\n  disableErrorLine?: boolean\n} & HTMLProps<HTMLFieldSetElement>\n\ntype Fieldset = {\n  Legend: Legend\n} & React.FC<FieldsetProps>\n\nconst BaseFieldset: React.FC<HTMLProps<HTMLFieldSetElement>> = ({\n  className,\n  children,\n  ...rest\n}): JSX.Element => {\n  return (\n    <fieldset className={clsx('nhsuk-fieldset', className)} {...rest}>\n      {children}\n    </fieldset>\n  )\n}\n\nconst MemoBaseFieldset = memo(BaseFieldset)\n\n/**\n * Use a fieldset to group related form inputs.\n *\n * For more information on when to use this component, go the [NHS Service Manuals website](https://service-manual.nhs.uk/design-system/components/fieldset).\n *\n * @param {string} [props.className] - Optional additional classes to add to the fieldset.\n * @param {boolean} [props.disableErrorLine] - Disables the error line on the fieldset.\n *\n * @example\n * ```tsx\n * <Fieldset>\n *  <Fieldset.Legend isPageHeading>What is your address?</Fieldset.Legend>\n * </Fieldset>\n * ```\n */\nconst Fieldset: Fieldset = ({\n  className,\n  children,\n  disableErrorLine,\n  ...rest\n}): JSX.Element => {\n  const [state, dispatch] = useReducer(reducer, { registered: [], errored: [] })\n\n  const contextValue: FieldsetContextValue = {\n    isFieldset: true,\n    dispatch,\n  }\n\n  const withFormElements = state.registered.length > 0\n  const withErrors = state.errored.length > 0\n\n  return (\n    <FieldsetContext.Provider value={contextValue}>\n      {withFormElements ? (\n        <div\n          className={clsx('nhsuk-form-group', {\n            'nhsuk-form-group--error': disableErrorLine ? false : withErrors,\n          })}\n        >\n          <MemoBaseFieldset className={className} {...rest}>\n            {children}\n          </MemoBaseFieldset>\n        </div>\n      ) : (\n        <MemoBaseFieldset className={className} {...rest}>\n          {children}\n        </MemoBaseFieldset>\n      )}\n    </FieldsetContext.Provider>\n  )\n}\n\nFieldset.displayName = 'Fieldset'\nLegend.displayName = 'Fieldset.Legend'\n\nFieldset.Legend = Legend\n\nexport default Fieldset\n"],"names":["reducer","state","type","data","id","FieldsetContext","createContext","useFieldsetContext","useContext","Legend","className","children","isPageHeading","Component","size","rest","jsx","clsx","BaseFieldset","MemoBaseFieldset","memo","Fieldset","disableErrorLine","dispatch","useReducer","contextValue","withFormElements","withErrors"],"mappings":"iFAqBO,MAAMA,EAA2B,CAACC,EAAO,CAAE,KAAAC,EAAM,KAAAC,KAAW,CACjE,OAAQD,EAAM,CACZ,IAAK,YACI,MAAA,CACL,GAAGD,EACH,QAASE,EAAK,MACVF,EAAM,QAAQ,OAAQG,GAAOA,IAAOD,EAAK,EAAE,EAAE,OAAOA,EAAK,EAAE,EAC3DF,EAAM,QAAQ,OAAOE,EAAK,EAAE,CAAA,EAEpC,IAAK,qBACI,MAAA,CACL,GAAGF,EACH,WAAYE,EAAK,WACbF,EAAM,WAAW,OAAQG,GAAOA,IAAOD,EAAK,EAAE,EAC9CF,EAAM,WAAW,OAAOE,EAAK,EAAE,CAAA,CAEzC,CACF,EAUME,EAAkBC,EAAAA,cAAoC,CAC1D,WAAY,GACZ,SAAU,IAAM,CAAC,CACnB,CAAC,EAEDD,EAAgB,YAAc,kBAOjB,MAAAE,EAAqB,IAChCC,EAAAA,WAAiCH,CAAe,EChClDI,EAAA,CAAA,CAAwB,UAAAC,EACtB,SAAAC,EACA,cAAAC,EACA,UAAAC,EAAA,KACuB,KAAAC,EACvB,GAAAC,CAEF,IACEC,EAAA,IACE,SAAC,CAAA,UAAAC,EACY,eACT,CACA,6BAAAL,GAAA,CAAAE,CACkD,EAClD,CAAA,CAAA,2BAAAA,CAAA,EAAA,EAAAA,CAAA,EAC4CJ,CAC5C,EACF,GAAAK,EACI,SAAAH,EAAAI,EAAAA,IAAAH,EAAA,CAAA,UAAA,0BAAA,SAAAF,CAAA,CAAA,EAAAA,CAKF,CAAA,EAcRO,EAAA,CAAA,CAAgE,UAAAR,EAC9D,SAAAC,EACA,GAAAI,CAEF,IACEC,MAAA,WAAA,CAAA,UAAAC,EAAA,iBAAAP,CAAA,EAAA,GAAAK,EAAA,SAAAJ,CAAA,CAAA,EAOFQ,EAAAC,EAAAA,KAAAF,CAAA,EAiBAG,EAAA,CAAA,CAA4B,UAAAX,EAC1B,SAAAC,EACA,iBAAAW,EACA,GAAAP,CAEF,IAAA,CACE,KAAA,CAAAd,EAAAsB,CAAA,EAAAC,aAAAxB,EAAA,CAAA,WAAA,CAAA,EAAA,QAAA,CAAA,CAAA,CAAA,EAEAyB,EAAA,CAA2C,WAAA,GAC7B,SAAAF,CACZ,EAGFG,EAAAzB,EAAA,WAAA,OAAA,EACA0B,EAAA1B,EAAA,QAAA,OAAA,EAEA,OAAAe,EAAA,IAAAX,EAAA,SAAA,CAAA,MAAAoB,EAAA,SAAAC,EAAAV,EAAA,IAGM,MAAC,CAAA,UAAAC,EAAA,mBAAA,CACqC,0BAAAK,EAAA,GAAAK,CACoB,CAAA,EACvD,SAAAX,EAAA,IAAAG,EAAA,CAAA,UAAAT,EAAA,GAAAK,EAAA,SAAAJ,EAAA,CAID,CAAA,EAAAK,EAAA,IAAAG,EAAA,CAAA,UAAAT,EAAA,GAAAK,EAAA,SAAAJ,CAAA,CAAA,CAAA,CAAA,CASV,EAEAU,EAAA,YAAA,WACAZ,EAAA,YAAA,kBAEAY,EAAA,OAAAZ;;"}