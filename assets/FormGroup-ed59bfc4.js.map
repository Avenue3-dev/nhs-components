{"version":3,"file":"FormGroup-ed59bfc4.js","sources":["../../../../packages/nhsuk-frontend-react/src/lib/hooks/use-id-with-prefix.ts","../../../../packages/nhsuk-frontend-react/src/lib/components/core/form-group/FormGroup.tsx"],"sourcesContent":["import { useId } from 'react'\n\n/**\n * Generate a unique string with a prefix.\n *\n * @param prefix {string} - The prefix to use\n * @returns A unique string with the provided prefix\n *\n * @example\n * ```tsx\n * const id = useIdWithPrefix('my-id')\n * ```\n */\nconst useIdWithPrefix = (prefix: string) => `${prefix}_${useId()}`\n\nexport default useIdWithPrefix\n","import { HTMLProps, ReactNode, useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport useIdWithPrefix from '@/hooks/use-id-with-prefix'\nimport Label from '@/components/core/label/Label'\nimport ErrorMessage from '@/components/form-elements/error-message/ErrorMessage'\nimport Hint from '@/components/form-elements/hint/Hint'\nimport { FormElementProps } from '@/types/form-element-types'\nimport { useFieldsetContext } from '@/components/form-elements/fieldset'\n\ntype ExcludedProps =\n  | 'hint'\n  | 'label'\n  | 'labelProps'\n  | 'hintProps'\n  | 'errorProps'\n  | 'inputType'\n  | 'disableErrorLine'\n\ntype BaseFormElementRenderProps = {\n  error?: string | boolean\n} & HTMLProps<\n  HTMLInputElement | HTMLDivElement | HTMLSelectElement | HTMLTextAreaElement\n>\n\ntype FormElementRenderProps<T> = Omit<T, ExcludedProps> & {\n  id: string\n  name: string\n}\n\ntype FormGroupProps<T> = FormElementProps & {\n  render: (props: FormElementRenderProps<T>) => ReactNode\n  inputType:\n    | 'input'\n    | 'radios'\n    | 'select'\n    | 'checkboxes'\n    | 'dateinput'\n    | 'textarea'\n    | string\n}\n\nconst FormGroup = <T extends BaseFormElementRenderProps>(\n  props: FormGroupProps<T>,\n): JSX.Element => {\n  const {\n    render,\n    hint,\n    label,\n    id,\n    labelProps,\n    error,\n    hintProps,\n    errorProps,\n    formGroupProps,\n    inputType,\n    disableErrorLine,\n    name,\n    ...rest\n  } = props\n\n  const [generatedId] = useState(useIdWithPrefix(inputType))\n  const { isFieldset, dispatch: dispatchFieldsetAction } = useFieldsetContext()\n\n  const elementId = id || generatedId\n  const labelId = `${elementId}--label`\n  const hintId = `${elementId}--hint`\n  const errorId = `${elementId}--error-message`\n\n  const renderProps = {\n    'aria-describedby': hint ? hintId : undefined,\n    'aria-labelledby': label ? labelId : undefined,\n    error,\n    name: name || elementId,\n    id: elementId,\n    ...rest,\n  } as FormElementRenderProps<T>\n\n  useEffect(() => {\n    if (!isFieldset) {\n      return\n    }\n\n    dispatchFieldsetAction({\n      type: 'set_error',\n      data: { id: elementId, error: Boolean(error) },\n    })\n\n    return () =>\n      dispatchFieldsetAction({\n        type: 'set_error',\n        data: { id: elementId, error: false },\n      })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elementId, error, isFieldset])\n\n  useEffect(() => {\n    dispatchFieldsetAction({\n      type: 'register_component',\n      data: { id: elementId, unregister: false },\n    })\n    return () =>\n      dispatchFieldsetAction({\n        type: 'register_component',\n        data: { id: elementId, unregister: true },\n      })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const { className: formGroupClass, ...formGroupRest } = formGroupProps || {}\n\n  return (\n    <div\n      className={clsx(\n        'nhsuk-form-group',\n        {\n          'nhsuk-form-group--error': !disableErrorLine && error,\n        },\n        formGroupClass,\n      )}\n      {...formGroupRest}\n    >\n      {label && (\n        <Label id={labelId} htmlFor={elementId} {...labelProps}>\n          {label}\n        </Label>\n      )}\n\n      {hint && (\n        <Hint id={hintId} htmlFor={elementId} {...hintProps}>\n          {hint}\n        </Hint>\n      )}\n\n      {error && typeof error === 'string' && (\n        <ErrorMessage id={errorId} htmlFor={elementId} {...errorProps}>\n          {error}\n        </ErrorMessage>\n      )}\n\n      {render(renderProps)}\n    </div>\n  )\n}\n\nFormGroup.displayName = 'FormGroup'\n\nexport default FormGroup\n"],"names":["useIdWithPrefix","prefix","useId","FormGroup","props","render","hint","label","id","labelProps","error","hintProps","errorProps","formGroupProps","inputType","disableErrorLine","name","rest","generatedId","useState","isFieldset","dispatchFieldsetAction","useFieldsetContext","elementId","labelId","hintId","errorId","renderProps","useEffect","formGroupClass","formGroupRest","jsxs","clsx","jsx","Label","Hint","ErrorMessage"],"mappings":"sSAaA,MAAMA,EAAmBC,GAAmB,GAAGA,KAAUC,EAAM,MAAA,IC4B/DC,EAAAC,GAAA,CAGE,KAAA,CAAM,OAAAC,EACJ,KAAAC,EACA,MAAAC,EACA,GAAAC,EACA,WAAAC,EACA,MAAAC,EACA,UAAAC,EACA,WAAAC,EACA,eAAAC,EACA,UAAAC,EACA,iBAAAC,EACA,KAAAC,EACA,GAAAC,CACG,EAAAb,EAGL,CAAAc,CAAA,EAAAC,EAAAA,SAAAnB,EAAAc,CAAA,CAAA,EACA,CAAA,WAAAM,EAAA,SAAAC,CAAA,EAAAC,EAAA,EAEAC,EAAAf,GAAAU,EACAM,EAAA,GAAAD,WACAE,EAAA,GAAAF,UACAG,EAAA,GAAAH,mBAEAI,EAAA,CAAoB,mBAAArB,EAAAmB,EAAA,OACkB,kBAAAlB,EAAAiB,EAAA,OACC,MAAAd,EACrC,KAAAM,GAAAO,EACc,GAAAA,EACV,GAAAN,CACD,EAGLW,EAAAA,UAAA,IAAA,CACE,GAAAR,EAIA,OAAAC,EAAA,CAAuB,KAAA,YACf,KAAA,CAAA,GAAAE,EAAA,MAAA,EAAAb,CAAA,CACuC,CAAA,EAG/C,IAAAW,EAAA,CACyB,KAAA,YACf,KAAA,CAAA,GAAAE,EAAA,MAAA,EAAA,CAC8B,CAAA,CACrC,EAAA,CAAAA,EAAAb,EAAAU,CAAA,CAAA,EAILQ,EAAAA,UAAA,KACEP,EAAA,CAAuB,KAAA,qBACf,KAAA,CAAA,GAAAE,EAAA,WAAA,EAAA,CACmC,CAAA,EAE3C,IAAAF,EAAA,CACyB,KAAA,qBACf,KAAA,CAAA,GAAAE,EAAA,WAAA,EAAA,CACkC,CAAA,GACzC,CAAA,CAAA,EAIL,KAAA,CAAA,UAAAM,EAAA,GAAAC,CAAA,EAAAjB,GAAA,GAEA,OAAAkB,EAAA,KACE,MAAC,CAAA,UAAAC,EACY,mBACT,CACA,0BAAA,CAAAjB,GAAAL,CACkD,EAClDmB,CACA,EACF,GAAAC,EACI,SAAA,CAEHvB,GAAA0B,EAAA,IAAAC,EAAA,CAAA,GAAAV,EAAA,QAAAD,EAAA,GAAAd,EAAA,SAAAF,CAAA,CAAA,EAGCD,GAAA2B,EAAA,IAAAE,EAAA,CAAA,GAAAV,EAAA,QAAAF,EAAA,GAAAZ,EAAA,SAAAL,CAAA,CAAA,EAMAI,GAAA,OAAAA,GAAA,UAAAuB,EAAA,IAAAG,EAAA,CAAA,GAAAV,EAAA,QAAAH,EAAA,GAAAX,EAAA,SAAAF,CAAA,CAAA,EAMAL,EAAAsB,CAAA,CAGiB,CAAA,CAAA,CAGzB,EAEAxB,EAAA,YAAA"}