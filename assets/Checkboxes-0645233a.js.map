{"version":3,"file":"Checkboxes-0645233a.js","sources":["../../../../packages/nhsuk-frontend-react/src/lib/components/form-elements/checkboxes/CheckboxesContext.ts","../../../../packages/nhsuk-frontend-react/src/lib/components/form-elements/checkboxes/Checkboxes.tsx"],"sourcesContent":["import { ActionBase } from '@/utils/reducer'\nimport { createContext, useContext } from 'react'\n\nexport type CheckboxesState = {\n  conditional: string[]\n}\n\nexport type SetConditionalAction = ActionBase<\n  'set_conditional',\n  { refId: string; hasConditional: boolean }\n>\n\nexport type CheckboxesReducer = (\n  state: CheckboxesState,\n  action: SetConditionalAction,\n) => CheckboxesState\n\nexport const reducer: CheckboxesReducer = (state, { type, data }) => {\n  switch (type) {\n    case 'set_conditional':\n      return {\n        ...state,\n        conditional: data.hasConditional\n          ? state.conditional\n              .filter(/* istanbul ignore next */ (id) => id !== data.refId)\n              .concat(data.refId)\n          : state.conditional.filter((id) => id !== data.refId),\n      }\n  }\n}\n\nexport type CheckboxesContextValue = {\n  name: string\n  dispatch: React.Dispatch<SetConditionalAction>\n  getCheckboxId: (reference: string) => string\n  leaseReference: () => string\n  releaseReference: (reference: string) => void\n}\n\nconst CheckboxesContext = createContext<CheckboxesContextValue>({\n  name: '',\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  dispatch: /* istanbul ignore next */ () => {},\n  getCheckboxId: /* istanbul ignore next */ () => '',\n  leaseReference: /* istanbul ignore next */ () => '',\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  releaseReference: /* istanbul ignore next */ () => {},\n})\n\nCheckboxesContext.displayName = 'CheckboxesContext'\n\nexport const useCheckboxesContext = () =>\n  useContext<CheckboxesContextValue>(CheckboxesContext)\n\nexport default CheckboxesContext\n","import FormGroup from '@/components/core/form-group/FormGroup'\nimport { FormElementProps } from '@/types/form-element-types'\nimport clsx from 'clsx'\nimport {\n  ForwardRefRenderFunction,\n  HTMLProps,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useReducer,\n  useState,\n} from 'react'\nimport CheckboxesContext, {\n  CheckboxesContextValue,\n  reducer,\n  useCheckboxesContext,\n} from './CheckboxesContext'\nimport { generateRandomString } from '@/utils/random'\nimport Hint from '@/components/form-elements/hint'\nimport Label from '@/components/core/label/Label'\n\ntype Checkboxes = {\n  Box: typeof BoxForwardRef\n} & React.FC<CheckboxContainerProps>\n\ntype CheckboxContainerProps = {\n  idPrefix?: string\n} & HTMLProps<HTMLDivElement> &\n  FormElementProps\n\ntype CheckboxProps = {\n  conditional?: ReactNode\n  forceShowConditional?: boolean\n  conditionalWrapperProps?: HTMLProps<HTMLDivElement>\n} & Omit<HTMLProps<HTMLInputElement>, 'label'> &\n  Omit<\n    FormElementProps,\n    'error' | 'errorProps' | 'formGroupProps' | 'disableErrorLine'\n  >\n\nconst Box: ForwardRefRenderFunction<HTMLInputElement, CheckboxProps> = (\n  {\n    children,\n    className,\n    id,\n    hint,\n    hintProps,\n    labelProps,\n    conditional,\n    forceShowConditional,\n    conditionalWrapperProps,\n    checked,\n    defaultChecked,\n    onChange,\n    type = 'checkbox',\n    ...rest\n  },\n  ref,\n): JSX.Element => {\n  const { name, getCheckboxId, leaseReference, releaseReference, dispatch } =\n    useCheckboxesContext()\n\n  const [checkboxReference] = useState(leaseReference())\n  const [showConditional, setShowConditional] = useState<boolean>(\n    !!(checked || defaultChecked),\n  )\n  const inputId = id || getCheckboxId(checkboxReference)\n\n  const { className: labelClassName, ...labelRest } = labelProps || {}\n  const { className: hintClassName, ...hintRest } = hintProps || {}\n  const { className: conditionalClassName, ...conditionalRest } =\n    conditionalWrapperProps || {}\n\n  useEffect(() => {\n    return () => releaseReference(checkboxReference)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (checked !== undefined) {\n      setShowConditional(checked)\n    }\n  }, [checked])\n\n  useEffect(() => {\n    dispatch({\n      type: 'set_conditional',\n      data: { refId: checkboxReference, hasConditional: Boolean(conditional) },\n    })\n\n    return () =>\n      dispatch({\n        type: 'set_conditional',\n        data: { refId: checkboxReference, hasConditional: false },\n      })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [conditional])\n\n  return (\n    <>\n      <div className={clsx('nhsuk-checkboxes__item', className)}>\n        <input\n          className=\"nhsuk-checkboxes__input\"\n          id={inputId}\n          name={name}\n          type={type}\n          checked={checked}\n          defaultChecked={defaultChecked}\n          ref={ref}\n          onChange={(ev) => {\n            if (checked === undefined) {\n              setShowConditional(ev.target.checked)\n            }\n\n            onChange?.(ev)\n          }}\n          {...rest}\n        />\n        {children && (\n          <Label\n            className={clsx('nhsuk-checkboxes__label', labelClassName)}\n            id={`${inputId}--label`}\n            htmlFor={inputId}\n            {...labelRest}\n          >\n            {children}\n          </Label>\n        )}\n        {hint && (\n          <Hint\n            className={clsx('nhsuk-checkboxes__hint', hintClassName)}\n            {...hintRest}\n          >\n            {hint}\n          </Hint>\n        )}\n      </div>\n      {conditional && (showConditional || forceShowConditional) && (\n        <div\n          className={clsx(\n            'nhsuk-checkboxes__conditional',\n            conditionalClassName,\n          )}\n          {...conditionalRest}\n        >\n          {conditional}\n        </div>\n      )}\n    </>\n  )\n}\n\n/**\n * A checkbox component that can be used within a `Checkboxes` component.\n *\n * @example\n * ```tsx\n * <Checkboxes.Box value=\"GP Practice\">GP Practice</Checkboxes.Box>\n * ```\n */\nconst BoxForwardRef = forwardRef(Box)\n\n/**\n * Use checkboxes to let users select 1 or more options on a form.\n *\n * For more information on when to use this component, got to the [NHS Digital service manual](https://service-manual.nhs.uk/design-system/components/checkboxes).\n *\n * @example\n * ```tsx\n * <Checkboxes label=\"Which services?\" name=\"fruit\">\n *  <Checkboxes.Box value=\"GP Practice\">GP Practice</Checkboxes.Box>\n *  <Checkboxes.Box value=\"Dentist\">Dentist</Checkboxes.Box>\n * </Checkboxes>\n * ```\n */\nconst Checkboxes: Checkboxes = ({\n  children,\n  idPrefix,\n  ...rest\n}): JSX.Element => {\n  let checkboxIds: Record<string, string> = {}\n  let checkboxReferences: string[] = []\n  let checkboxCount = 0\n\n  const [state, dispatch] = useReducer(reducer, { conditional: [] })\n\n  const getCheckboxId = useCallback((id: string, reference: string) => {\n    if (reference in checkboxIds) {\n      return checkboxIds[reference]\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    checkboxCount += 1\n    checkboxIds[reference] = `${idPrefix || id}-${checkboxCount}`\n    return checkboxIds[reference]\n  }, [])\n\n  const leaseReference = (): string => {\n    const reference = generateRandomString()\n\n    if (checkboxReferences.includes(reference)) {\n      return leaseReference()\n    }\n\n    checkboxReferences.push(reference)\n    return reference\n  }\n\n  const releaseReference = (reference: string): void => {\n    checkboxReferences = checkboxReferences.filter((ref) => ref !== reference)\n  }\n\n  const resetCheckboxes = (): void => {\n    checkboxIds = {}\n    checkboxCount = 0\n  }\n\n  return (\n    <FormGroup<CheckboxContainerProps>\n      {...rest}\n      inputType=\"checkboxes\"\n      render={({ id, name, className, ...renderProps }) => {\n        resetCheckboxes()\n        const contextValues: CheckboxesContextValue = {\n          name,\n          getCheckboxId: (reference) => getCheckboxId(id, reference),\n          leaseReference,\n          releaseReference,\n          dispatch,\n        }\n\n        return (\n          <div\n            className={clsx(\n              'nhsuk-checkboxes',\n              {\n                'nhsuk-checkboxes--conditional': state.conditional.length > 0,\n              },\n              className,\n            )}\n            id={id}\n            {...renderProps}\n          >\n            <CheckboxesContext.Provider value={contextValues}>\n              {children}\n            </CheckboxesContext.Provider>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nBoxForwardRef.displayName = 'Checkboxes.Box'\nCheckboxes.displayName = 'Checkboxes'\n\nCheckboxes.Box = BoxForwardRef\n\nexport default Checkboxes\n"],"names":["reducer","state","type","data","id","CheckboxesContext","createContext","useCheckboxesContext","useContext","Box","children","className","hint","hintProps","labelProps","conditional","forceShowConditional","conditionalWrapperProps","checked","defaultChecked","onChange","rest","ref","name","getCheckboxId","leaseReference","releaseReference","dispatch","checkboxReference","useState","showConditional","setShowConditional","inputId","labelClassName","labelRest","hintClassName","hintRest","conditionalClassName","conditionalRest","useEffect","jsxs","Fragment","clsx","jsx","ev","Label","Hint","BoxForwardRef","forwardRef","Checkboxes","idPrefix","checkboxIds","checkboxReferences","checkboxCount","useReducer","useCallback","reference","generateRandomString","resetCheckboxes","FormGroup","renderProps","contextValues"],"mappings":"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"}